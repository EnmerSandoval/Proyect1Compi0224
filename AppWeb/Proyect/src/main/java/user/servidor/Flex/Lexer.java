// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex

package org.proyect1.Flex;

import java_cup.runtime.*;
import java.util.ArrayList;
import user.servidor.Errors.ErrorL;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\0\1\4"+
    "\7\0\1\5\1\6\1\7\1\0\12\10\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\27\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\27\1\45\1\46"+
    "\1\0\1\47\1\0\1\50\1\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\27\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\27\1\45\1\51"+
    "\1\52\1\53\7\0\1\1\32\0\1\1\217\0\2\54"+
    "\115\0\1\55\u0200\0\1\1\177\0\13\1\21\0\1\56"+
    "\1\57\12\0\2\1\5\0\1\1\57\0\1\1\312\0"+
    "\1\60\325\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\6\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\23\0\1\20\1\21\1\22\5\0"+
    "\1\23\1\0\1\24\50\0\1\25\14\0\1\26\35\0"+
    "\1\27\123\0\1\30\24\0\1\31\1\32\27\0\1\33"+
    "\16\0\1\34\20\0\1\35\4\0\1\36\13\0\1\37"+
    "\24\0\1\40\23\0\1\41\13\0\1\42\20\0\1\43"+
    "\1\0\1\44\40\0\1\45\12\0\1\46\17\0\1\47"+
    "\1\0\1\50\52\0\1\51\14\0\1\52\60\0\1\53"+
    "\27\0\1\54\26\0\1\55\6\0\1\56\1\0\1\57"+
    "\13\0\1\60\10\0\1\61\13\0\1\62\6\0\1\63"+
    "\17\0\1\64\1\65\11\0\1\66\4\0\1\67\7\0"+
    "\1\70\1\71\3\0\1\72\6\0\1\73\2\0\1\74"+
    "\1\0\1\75\3\0\1\76\2\0\1\77\4\0\1\100"+
    "\2\0\1\101\1\102\6\0\1\103\4\0\1\104\1\0"+
    "\1\105\1\0\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[741];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\61\0\365\0\61"+
    "\0\u0126\0\61\0\61\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b"+
    "\0\u024c\0\61\0\61\0\61\0\61\0\61\0\u027d\0\61"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\u05ef\0\u0620\0\61\0\61\0\61\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\61\0\u0746\0\61\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\61\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\61\0\u116b\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\61\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd"+
    "\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85"+
    "\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d"+
    "\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d"+
    "\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5"+
    "\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5"+
    "\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\61\0\u26db\0\u270c"+
    "\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894"+
    "\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c"+
    "\0\u2a4d\0\u2a7e\0\61\0\61\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42"+
    "\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca"+
    "\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52"+
    "\0\u2e83\0\u2eb4\0\u2ee5\0\61\0\u2f16\0\u2f47\0\u2f78\0\u2fa9"+
    "\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100\0\u3131"+
    "\0\u3162\0\u3193\0\61\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288"+
    "\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df\0\u3410"+
    "\0\u3441\0\u3472\0\u34a3\0\61\0\u34d4\0\u3505\0\u3536\0\u3567"+
    "\0\61\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be"+
    "\0\u36ef\0\u3720\0\u3751\0\u3782\0\61\0\u37b3\0\u37e4\0\u3815"+
    "\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d"+
    "\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4\0\u3b25"+
    "\0\u3b56\0\61\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c"+
    "\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04"+
    "\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\61\0\u3f2a\0\u3f5b"+
    "\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3"+
    "\0\u4114\0\61\0\u4145\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a"+
    "\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u4360\0\u4391\0\u43c2"+
    "\0\u43f3\0\u4424\0\61\0\u4455\0\61\0\u4486\0\u44b7\0\u44e8"+
    "\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd\0\u460e\0\u463f\0\u4670"+
    "\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765\0\u4796\0\u47c7\0\u47f8"+
    "\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed\0\u491e\0\u494f\0\u4980"+
    "\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u4a75\0\61\0\u4aa6\0\u4ad7"+
    "\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u4bfd\0\u4c2e\0\u4c5f"+
    "\0\61\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85\0\u4db6"+
    "\0\u4de7\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u4f0d\0\u4f3e"+
    "\0\61\0\u4f6f\0\61\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064"+
    "\0\u5095\0\u50c6\0\u50f7\0\u5128\0\u5159\0\u518a\0\u51bb\0\u51ec"+
    "\0\u521d\0\u524e\0\u527f\0\u52b0\0\u52e1\0\u5312\0\u5343\0\u5374"+
    "\0\u53a5\0\u53d6\0\u5407\0\u5438\0\u5469\0\u549a\0\u54cb\0\u54fc"+
    "\0\u552d\0\u555e\0\u558f\0\u55c0\0\u55f1\0\u5622\0\u5653\0\u5684"+
    "\0\u56b5\0\u56e6\0\u5717\0\u5748\0\u5779\0\61\0\u57aa\0\u57db"+
    "\0\u580c\0\u583d\0\u586e\0\u589f\0\u58d0\0\u5901\0\u5932\0\u5963"+
    "\0\u5994\0\u59c5\0\61\0\u59f6\0\u5a27\0\u5a58\0\u5a89\0\u5aba"+
    "\0\u5aeb\0\u5b1c\0\u5b4d\0\u5b7e\0\u5baf\0\u5be0\0\u5c11\0\u5c42"+
    "\0\u5c73\0\u5ca4\0\u5cd5\0\u5d06\0\u5d37\0\u5d68\0\u5d99\0\u5dca"+
    "\0\u5dfb\0\u5e2c\0\u5e5d\0\u5e8e\0\u5ebf\0\u5ef0\0\u5f21\0\u5f52"+
    "\0\u5f83\0\u5fb4\0\u5fe5\0\u6016\0\u6047\0\u6078\0\u60a9\0\u60da"+
    "\0\u610b\0\u613c\0\u616d\0\u619e\0\u61cf\0\u6200\0\u6231\0\u6262"+
    "\0\u6293\0\u62c4\0\u62f5\0\61\0\u6326\0\u6357\0\u6388\0\u63b9"+
    "\0\u63ea\0\u641b\0\u644c\0\u647d\0\u64ae\0\u64df\0\u6510\0\u6541"+
    "\0\u6572\0\u65a3\0\u65d4\0\u6605\0\u6636\0\u6667\0\u6698\0\u66c9"+
    "\0\u66fa\0\u672b\0\u675c\0\61\0\u678d\0\u67be\0\u67ef\0\u6820"+
    "\0\u6851\0\u6882\0\u68b3\0\u68e4\0\u6915\0\u6946\0\u6977\0\u69a8"+
    "\0\u69d9\0\u6a0a\0\u6a3b\0\u6a6c\0\u6a9d\0\u6ace\0\u6aff\0\u6b30"+
    "\0\u6b61\0\u6b92\0\61\0\u6bc3\0\u6bf4\0\u6c25\0\u6c56\0\u6c87"+
    "\0\u6cb8\0\61\0\u6ce9\0\u6d1a\0\u6d4b\0\u6d7c\0\u6dad\0\u6dde"+
    "\0\u6e0f\0\u6e40\0\u6e71\0\u6ea2\0\u6ed3\0\u6f04\0\u6f35\0\61"+
    "\0\u6f66\0\u6f97\0\u6fc8\0\u6ff9\0\u702a\0\u705b\0\u708c\0\u70bd"+
    "\0\61\0\u70ee\0\u711f\0\u7150\0\u7181\0\u71b2\0\u71e3\0\u7214"+
    "\0\u7245\0\u7276\0\u72a7\0\u72d8\0\61\0\u7309\0\u733a\0\u736b"+
    "\0\u739c\0\u73cd\0\u73fe\0\61\0\u742f\0\u7460\0\u7491\0\u74c2"+
    "\0\u74f3\0\u7524\0\u7555\0\u7586\0\u75b7\0\u75e8\0\u7619\0\u764a"+
    "\0\u767b\0\u76ac\0\u76dd\0\61\0\61\0\u770e\0\u773f\0\u7770"+
    "\0\u77a1\0\u77d2\0\u7803\0\u7834\0\u7865\0\u7896\0\61\0\u78c7"+
    "\0\u78f8\0\u7929\0\u795a\0\61\0\u798b\0\u79bc\0\u79ed\0\u7a1e"+
    "\0\u7a4f\0\u7a80\0\u7ab1\0\61\0\61\0\u7ae2\0\u7b13\0\u7b44"+
    "\0\u7b75\0\u7ba6\0\u7bd7\0\u7c08\0\u7c39\0\u7c6a\0\u7c9b\0\61"+
    "\0\u7ccc\0\u7cfd\0\61\0\u7d2e\0\u7d5f\0\u7d90\0\u7dc1\0\u7df2"+
    "\0\61\0\u7e23\0\u7e54\0\61\0\u7e85\0\u7eb6\0\u7ee7\0\u7f18"+
    "\0\61\0\u7f49\0\u7f7a\0\61\0\61\0\u7fab\0\u7fdc\0\u800d"+
    "\0\u803e\0\u806f\0\u80a0\0\61\0\u80d1\0\u8102\0\u8133\0\u8164"+
    "\0\61\0\u8195\0\61\0\u81c6\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[741];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\2\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\4\2\1\15\1\16"+
    "\12\2\1\17\3\2\1\20\1\2\1\21\1\2\1\22"+
    "\1\23\1\2\1\24\1\25\1\26\2\2\2\27\1\2"+
    "\62\0\1\3\73\0\1\30\45\0\1\31\2\0\1\32"+
    "\1\0\1\32\1\0\1\33\5\0\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\2\35\1\42\3\35\1\43\1\44"+
    "\1\45\1\46\1\47\1\35\1\50\1\51\4\35\2\0"+
    "\1\32\3\0\1\52\2\0\1\53\11\0\1\7\52\0"+
    "\1\54\12\0\1\55\57\0\1\56\77\0\1\57\53\0"+
    "\1\60\25\0\1\60\26\0\1\61\60\0\1\62\75\0"+
    "\1\63\15\0\1\63\4\0\1\31\2\0\1\32\1\0"+
    "\1\32\1\0\1\33\5\0\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\2\35\1\42\3\35\1\43\1\44\1\45"+
    "\1\46\1\47\1\35\1\50\1\51\4\35\2\0\1\32"+
    "\3\0\1\52\5\0\1\31\1\0\1\64\12\0\30\31"+
    "\4\0\1\65\3\0\2\64\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\30\32\2\0\1\32\5\0"+
    "\2\66\10\0\1\70\1\71\5\0\30\72\14\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\6\35\1\73\11\35\1\74\7\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\64\2\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\30\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\1\75\6\35"+
    "\1\76\3\35\1\77\2\35\1\100\11\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\1\101\27\35"+
    "\2\0\1\32\1\0\1\65\3\0\2\64\2\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\13\35\1\102\14\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\2\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\4\35\1\103\3\35\1\104\17\35"+
    "\2\0\1\32\1\0\1\65\1\0\1\105\1\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\3\35\1\106\11\35\1\107\12\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\16\35"+
    "\1\110\11\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\16\35\1\111\4\35\1\112\4\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\17\35"+
    "\1\113\10\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\1\114\27\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\1\115\3\35\1\116\23\35"+
    "\2\0\1\32\1\0\1\65\3\0\2\64\2\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\4\35\1\117\3\35\1\120\7\35\1\121\7\35\2\0"+
    "\1\32\1\0\1\65\1\0\1\122\1\0\2\64\2\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\21\35\1\123\6\35\2\0\1\32\1\0\1\65"+
    "\2\0\1\124\2\64\22\0\1\125\11\0\1\126\103\0"+
    "\1\127\44\0\1\130\51\0\1\131\43\0\1\132\100\0"+
    "\1\133\56\0\1\134\25\0\1\31\14\0\30\31\16\0"+
    "\1\66\4\0\1\67\5\0\30\67\2\0\1\67\5\0"+
    "\2\66\11\0\1\135\57\0\1\70\1\136\5\0\30\72"+
    "\16\0\1\137\52\0\2\137\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\20\35\1\140"+
    "\7\35\2\0\1\32\1\0\1\65\3\0\2\64\2\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\4\35\1\141\23\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\14\35\1\142\13\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\4\35"+
    "\1\143\23\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\1\144\27\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\14\35\1\145\13\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\22\35"+
    "\1\146\5\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\10\35\1\147\17\35\2\0\1\32\1\0"+
    "\1\65\1\0\1\150\1\0\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\2\35"+
    "\1\151\25\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\2\35\1\152\25\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\64\21\0\1\153\41\0\1\31\1\0"+
    "\1\154\1\32\1\0\1\32\1\0\1\67\5\0\30\35"+
    "\2\0\1\155\1\0\1\65\3\0\2\154\2\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\3\35\1\156\15\35\1\157\6\35\2\0\1\32\1\0"+
    "\1\65\2\0\1\160\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\3\35\1\161"+
    "\24\35\2\0\1\32\1\0\1\65\3\0\2\64\2\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\14\35\1\162\13\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\4\35\1\163\23\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\2\35"+
    "\1\164\25\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\20\35\1\165\1\166\6\35\2\0\1\32"+
    "\1\0\1\65\2\0\1\167\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\3\35"+
    "\1\170\24\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\21\35\1\171\6\35\2\0\1\32\1\0"+
    "\1\65\2\0\1\172\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\14\35\1\173"+
    "\11\35\1\174\1\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\2\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\4\35\1\175\23\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\10\35\1\176"+
    "\17\35\2\0\1\32\1\0\1\65\1\0\1\177\1\0"+
    "\2\64\23\0\1\200\37\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\23\35\1\201\4\35"+
    "\2\0\1\32\1\0\1\65\3\0\2\64\42\0\1\202"+
    "\22\0\1\154\44\0\1\203\5\0\2\154\22\0\1\204"+
    "\15\0\1\160\15\0\1\160\52\0\1\205\37\0\1\206"+
    "\25\0\1\206\54\0\1\207\41\0\1\210\66\0\1\211"+
    "\15\0\1\211\36\0\1\212\35\0\1\135\5\0\30\72"+
    "\22\0\1\70\1\213\5\0\30\72\14\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\4\35"+
    "\1\214\23\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\1\215\27\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\17\35\1\216\10\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\2\35"+
    "\1\217\25\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\21\35\1\220\6\35\2\0\1\32\1\0"+
    "\1\65\2\0\1\221\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\1\35\1\222"+
    "\26\35\2\0\1\32\1\0\1\65\3\0\2\64\2\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\16\35\1\223\11\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\14\35\1\224\13\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\33\0\1\225\27\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\7\35\1\226\20\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\7\35\1\227\20\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\26\0\1\230\36\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\22\32"+
    "\1\231\5\32\2\0\1\32\5\0\2\66\2\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\10\35\1\232\17\35\2\0\1\32\1\0\1\65\1\0"+
    "\1\233\1\0\2\64\2\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\22\35\1\234\5\35"+
    "\2\0\1\32\1\0\1\65\3\0\2\64\41\0\1\235"+
    "\21\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\10\35\1\236\17\35\2\0\1\32\1\0"+
    "\1\65\1\0\1\237\1\0\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\1\35"+
    "\1\240\26\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\24\35\1\241\3\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\64\2\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\10\35\1\242\17\35"+
    "\2\0\1\32\1\0\1\65\1\0\1\243\1\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\1\244\27\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\21\35\1\245\6\35\2\0"+
    "\1\32\1\0\1\65\2\0\1\246\2\64\40\0\1\246"+
    "\15\0\1\246\4\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\10\35\1\247\17\35\2\0"+
    "\1\32\1\0\1\65\1\0\1\250\1\0\2\64\2\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\17\35\1\251\10\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\36\0\1\252\24\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\1\253\27\35"+
    "\2\0\1\32\1\0\1\65\3\0\2\64\2\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\22\35\1\254\5\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\2\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\14\35\1\255\13\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\24\35\1\256"+
    "\3\35\2\0\1\32\1\0\1\65\3\0\2\64\43\0"+
    "\1\257\50\0\1\260\27\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\1\261\27\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\17\0\1\262\102\0"+
    "\1\263\46\0\1\233\25\0\1\233\35\0\1\264\63\0"+
    "\1\265\46\0\1\266\14\0\1\267\15\0\1\267\31\0"+
    "\1\270\25\0\1\270\32\0\1\271\25\0\1\271\12\0"+
    "\1\272\1\70\1\273\5\0\30\72\14\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\6\35"+
    "\1\274\21\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\30\35\2\0\1\275\1\0\1\65\3\0"+
    "\2\64\2\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\16\35\1\276\11\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\12\35\1\277"+
    "\15\35\2\0\1\32\1\0\1\65\3\0\2\64\1\300"+
    "\1\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\4\35\1\301\23\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\64\23\0\1\302\37\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\16\35"+
    "\1\303\11\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\21\35\1\304\6\35\2\0\1\32\1\0"+
    "\1\65\2\0\1\305\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\10\35\1\306"+
    "\17\35\2\0\1\32\1\0\1\65\1\0\1\307\1\0"+
    "\2\64\27\0\1\307\25\0\1\307\5\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\1\310"+
    "\27\35\2\0\1\32\1\0\1\65\3\0\2\64\2\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\4\35\1\311\23\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\23\0\1\312\41\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\20\32\1\313\7\32\2\0"+
    "\1\32\5\0\2\66\2\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\2\35\1\314\25\35"+
    "\2\0\1\32\1\0\1\65\3\0\2\64\21\0\1\315"+
    "\41\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\10\35\1\316\17\35\2\0\1\32\1\0"+
    "\1\65\1\0\1\317\1\0\2\64\27\0\1\317\25\0"+
    "\1\317\5\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\5\35\1\320\22\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\24\0\1\321\36\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\20\35\1\322\7\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\2\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\1\323\15\35\1\324\11\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\16\35"+
    "\1\325\11\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\35\0\1\326\25\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\14\35\1\327\13\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\25\35"+
    "\1\330\2\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\44\0\1\331\16\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\16\35\1\332\11\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\35\0\1\333\25\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\23\35\1\334\4\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\42\0\1\335\20\0\1\31\1\0\1\336"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\30\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\336\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\16\35"+
    "\1\337\11\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\17\35\1\340\10\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\64\2\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\10\35\1\341\17\35"+
    "\2\0\1\32\1\0\1\65\1\0\1\342\1\0\2\64"+
    "\27\0\1\342\25\0\1\342\41\0\1\343\24\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\20\35\1\344\7\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\37\0\1\345\60\0\1\346\56\0\1\347\74\0"+
    "\1\350\43\0\1\351\61\0\1\352\71\0\1\353\47\0"+
    "\1\354\34\0\1\355\57\0\1\70\1\273\5\0\30\72"+
    "\14\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\1\356\27\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\4\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\22\32\1\357\5\32\2\0\1\32\5\0"+
    "\2\66\2\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\30\35\2\0\1\360\1\0\1\65"+
    "\3\0\2\64\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\1\35\1\361\26\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\20\0\1\362\42\0"+
    "\1\31\1\0\1\363\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\30\35\2\0\1\32\1\0\1\65\3\0\2\363"+
    "\4\0\1\363\52\0\2\363\2\0\1\31\1\0\1\364"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\30\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\364\2\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\30\35"+
    "\2\0\1\365\1\0\1\65\3\0\2\64\51\0\1\366"+
    "\11\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\15\35\1\367\12\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\64\34\0\1\370\26\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\30\35"+
    "\2\0\1\371\1\0\1\65\3\0\2\64\2\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\20\35\1\372\7\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\37\0\1\373\25\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\10\32\1\374\17\32\2\0\1\32"+
    "\3\0\1\375\1\0\2\66\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\4\35\1\376"+
    "\23\35\2\0\1\32\1\0\1\65\3\0\2\64\23\0"+
    "\1\377\37\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\22\35\1\u0100\5\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\41\0\1\u0101\21\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\10\35\1\u0102\17\35\2\0\1\32\1\0\1\65\1\0"+
    "\1\u0103\1\0\2\64\27\0\1\u0103\25\0\1\u0103\5\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\4\35\1\u0104\23\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\30\35\2\0\1\u0105\1\0"+
    "\1\65\3\0\2\64\2\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\30\35\2\0\1\u0106"+
    "\1\0\1\65\3\0\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\15\35\1\u0107"+
    "\12\35\2\0\1\32\1\0\1\65\3\0\2\64\34\0"+
    "\1\u0108\26\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\4\35\1\u0109\23\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\16\35\1\u010a"+
    "\11\35\2\0\1\32\1\0\1\65\3\0\2\64\35\0"+
    "\1\u010b\25\0\1\31\1\0\1\u010c\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\30\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\u010c\4\0\1\u010c\52\0\2\u010c\2\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\4\35\1\u010d\23\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\23\0\1\u010e\37\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\30\35\2\0\1\u010f"+
    "\1\0\1\65\3\0\2\64\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\16\35\1\u0110"+
    "\11\35\2\0\1\32\1\0\1\65\3\0\2\64\2\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\1\u0111\27\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\17\0\1\u0112\76\0\1\u0113\25\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\10\35"+
    "\1\u0114\17\35\2\0\1\32\1\0\1\65\1\0\1\u0115"+
    "\1\0\2\64\27\0\1\u0115\25\0\1\u0115\32\0\1\375"+
    "\25\0\1\375\30\0\1\u0116\72\0\1\u0117\64\0\1\u0118"+
    "\47\0\1\u0119\45\0\1\u011a\75\0\1\u011b\35\0\1\u011c"+
    "\51\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\20\35\1\u011d\7\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\64\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\4\32\1\u011e\23\32\2\0\1\32"+
    "\5\0\2\66\4\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\22\32\1\u011f\5\32\2\0\1\32\5\0"+
    "\2\66\2\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\16\35\1\u0120\11\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\35\0\1\u0121\27\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\23\32\1\u0122"+
    "\4\32\2\0\1\32\5\0\2\66\42\0\1\u0123\20\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\1\u0124\27\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\17\0\1\u0125\45\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\2\32\1\u0126\11\32\1\u0127\13\32"+
    "\2\0\1\32\5\0\2\66\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\16\35\1\u0128"+
    "\11\35\2\0\1\32\1\0\1\65\3\0\2\64\35\0"+
    "\1\u0129\27\0\1\66\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\24\32\1\u012a\3\32\2\0\1\32\5\0\2\66"+
    "\43\0\1\u012b\17\0\1\31\1\0\1\u012c\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\30\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\u012c\4\0\1\u012c\52\0\2\u012c\2\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\23\35\1\u012d\4\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\42\0\1\u012e\20\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\2\35\1\u012f"+
    "\25\35\2\0\1\32\1\0\1\65\3\0\2\64\21\0"+
    "\1\u0130\41\0\1\31\1\0\1\u0131\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\30\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\u0131\4\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\22\32\1\u0132\5\32\2\0\1\32\5\0"+
    "\2\66\4\0\1\66\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\17\32\1\u0133\10\32\2\0\1\32\5\0\2\66"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\4\35\1\u0134\23\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\64\23\0\1\u0135\37\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\22\35"+
    "\1\u0136\5\35\2\0\1\32\1\0\1\65\3\0\2\64"+
    "\2\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\20\35\1\u0137\7\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\64\37\0\1\u0138\23\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\21\35"+
    "\1\u0139\6\35\2\0\1\32\1\0\1\65\2\0\1\u013a"+
    "\2\64\40\0\1\u013a\15\0\1\u013a\6\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\24\32\1\u013b\3\32"+
    "\2\0\1\32\5\0\2\66\2\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\30\35\2\0"+
    "\1\u013c\1\0\1\65\3\0\2\64\2\0\1\31\1\0"+
    "\1\u013d\1\32\1\0\1\32\1\0\1\67\5\0\30\35"+
    "\2\0\1\32\1\0\1\65\3\0\2\u013d\4\0\1\u013d"+
    "\52\0\2\u013d\51\0\1\u013e\11\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\16\35\1\u013f"+
    "\11\35\2\0\1\32\1\0\1\65\3\0\2\64\35\0"+
    "\1\u0140\52\0\1\u0141\25\0\1\u0141\26\0\1\u0142\64\0"+
    "\1\u0143\25\0\1\u0143\32\0\1\u0144\25\0\1\u0144\42\0"+
    "\1\u0145\30\0\1\u0146\53\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\30\35\2\0\1\u0147"+
    "\1\0\1\65\3\0\2\64\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\26\32\1\u0148\1\32\2\0"+
    "\1\32\5\0\2\66\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\4\32\1\u0149\23\32\2\0\1\32"+
    "\5\0\2\66\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\26\35\1\u014a\1\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\45\0\1\u014b\17\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\21\32"+
    "\1\u014c\6\32\2\0\1\32\4\0\1\u014d\2\66\40\0"+
    "\1\u014d\15\0\1\u014d\4\0\1\31\1\0\1\64\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\20\35\1\u014e\7\35"+
    "\2\0\1\32\1\0\1\65\3\0\2\64\37\0\1\u014f"+
    "\25\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\20\32\1\u0150\7\32\2\0\1\32\5\0\2\66\4\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\16\32"+
    "\1\u0151\11\32\2\0\1\32\5\0\2\66\2\0\1\31"+
    "\1\0\1\u0152\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\30\35\2\0\1\32\1\0\1\65\3\0\2\u0152\4\0"+
    "\1\u0152\52\0\2\u0152\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\10\32\1\u0153\17\32\2\0\1\32"+
    "\3\0\1\u0154\1\0\2\66\27\0\1\u0154\25\0\1\u0154"+
    "\5\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\2\35\1\u0155\25\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\64\21\0\1\u0156\41\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\1\u0157"+
    "\27\35\2\0\1\32\1\0\1\65\3\0\2\64\17\0"+
    "\1\u0158\45\0\1\66\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\20\32\1\u0159\7\32\2\0\1\32\5\0\2\66"+
    "\4\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\1\u015a\27\32\2\0\1\32\5\0\2\66\2\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\21\35\1\u015b\6\35\2\0\1\32\1\0\1\65\2\0"+
    "\1\u015c\2\64\40\0\1\u015c\15\0\1\u015c\4\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\20\35\1\u015d\7\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\2\0\1\31\1\0\1\64\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\3\35\1\u015e\24\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\22\0\1\u015f\40\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\22\35\1\u0160\5\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\41\0\1\u0161\23\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\10\32\1\u0162\17\32\2\0\1\32"+
    "\3\0\1\u0163\1\0\2\66\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\17\32\1\u0164\10\32\2\0"+
    "\1\32\5\0\2\66\36\0\1\u0165\24\0\1\31\1\0"+
    "\1\u0166\1\32\1\0\1\32\1\0\1\67\5\0\30\35"+
    "\2\0\1\u0167\1\0\1\65\3\0\2\u0166\4\0\1\u0166"+
    "\44\0\1\u0168\5\0\2\u0166\34\0\1\u0169\64\0\1\u016a"+
    "\15\0\1\u016a\37\0\1\u016b\44\0\1\u016c\110\0\1\u016d"+
    "\20\0\1\u016e\53\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\2\32\1\u016f\25\32\2\0\1\32\5\0"+
    "\2\66\4\0\1\66\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\22\32\1\u0170\5\32\2\0\1\32\5\0\2\66"+
    "\4\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\26\32\1\u0171\1\32\2\0\1\32\5\0\2\66\2\0"+
    "\1\31\1\0\1\u0172\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\30\35\2\0\1\32\1\0\1\65\3\0\2\u0172"+
    "\4\0\1\u0172\52\0\2\u0172\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\23\32\1\u0173\4\32\2\0"+
    "\1\32\5\0\2\66\42\0\1\u0174\20\0\1\31\1\0"+
    "\1\64\1\32\1\0\1\32\1\0\1\67\5\0\30\35"+
    "\2\0\1\u0175\1\0\1\65\3\0\2\64\51\0\1\u0176"+
    "\13\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\4\32\1\u0177\23\32\2\0\1\32\5\0\2\66\4\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\3\32"+
    "\1\u0178\24\32\2\0\1\32\5\0\2\66\4\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\1\u0179\27\32"+
    "\2\0\1\32\5\0\2\66\17\0\1\u017a\43\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\10\35\1\u017b\17\35\2\0\1\32\1\0\1\65\1\0"+
    "\1\u017c\1\0\2\64\27\0\1\u017c\25\0\1\u017c\5\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\20\35\1\u017d\7\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\37\0\1\u017e\25\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\10\32\1\u017f\17\32\2\0"+
    "\1\32\3\0\1\u0180\1\0\2\66\4\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\21\32\1\u0181\6\32"+
    "\2\0\1\32\4\0\1\u0182\2\66\2\0\1\31\1\0"+
    "\1\u0183\1\32\1\0\1\32\1\0\1\67\5\0\30\35"+
    "\2\0\1\32\1\0\1\65\3\0\2\u0183\4\0\1\u0183"+
    "\52\0\2\u0183\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\16\35\1\u0184\11\35\2\0"+
    "\1\32\1\0\1\65\3\0\2\64\2\0\1\31\1\0"+
    "\1\u0185\1\32\1\0\1\32\1\0\1\67\5\0\30\35"+
    "\2\0\1\32\1\0\1\65\3\0\2\u0185\4\0\1\u0185"+
    "\52\0\2\u0185\2\0\1\31\1\0\1\64\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\1\u0186\27\35\2\0\1\32"+
    "\1\0\1\65\3\0\2\64\17\0\1\u0187\45\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\21\32\1\u0188"+
    "\6\32\2\0\1\32\4\0\1\u0189\2\66\40\0\1\u0189"+
    "\15\0\1\u0189\6\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\20\32\1\u018a\7\32\2\0\1\32\5\0"+
    "\2\66\37\0\1\u018b\25\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\1\u018c\1\32\1\u018d\12\32\1\u018e"+
    "\12\32\2\0\1\32\5\0\2\66\17\0\1\u018f\1\0"+
    "\1\u0190\12\0\1\u0191\75\0\1\u0192\45\0\1\u0193\73\0"+
    "\1\u0194\36\0\1\u0195\25\0\1\u0195\43\0\1\u0196\15\0"+
    "\1\u0196\13\0\1\u0197\53\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\16\32\1\u0198\11\32\2\0\1\32"+
    "\5\0\2\66\4\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\16\32\1\u0199\11\32\2\0\1\32\5\0"+
    "\2\66\4\0\1\66\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\22\32\1\u019a\5\32\2\0\1\32\5\0\2\66"+
    "\4\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\1\u019b\27\32\2\0\1\32\5\0\2\66\17\0\1\u019c"+
    "\45\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\2\32\1\u019d\17\32\1\u019e\1\u019f\4\32\2\0\1\32"+
    "\5\0\2\66\21\0\1\u01a0\17\0\1\u01a1\1\u01a2\22\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\1\u01a3"+
    "\27\32\2\0\1\32\5\0\2\66\4\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\10\32\1\u01a4\17\32"+
    "\2\0\1\32\3\0\1\u01a5\1\0\2\66\4\0\1\u01a6"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\30\32\2\0"+
    "\1\32\5\0\2\u01a6\4\0\1\u01a6\52\0\2\u01a6\2\0"+
    "\1\31\1\0\1\64\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\16\35\1\u01a7\11\35\2\0\1\32\1\0\1\65"+
    "\3\0\2\64\35\0\1\u01a8\25\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\30\35\2\0"+
    "\1\u01a9\1\0\1\65\3\0\2\64\51\0\1\u01aa\13\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\24\32"+
    "\1\u01ab\3\32\2\0\1\32\5\0\2\66\43\0\1\u01ac"+
    "\21\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\21\32\1\u01ad\6\32\2\0\1\32\4\0\1\u01ae\2\66"+
    "\40\0\1\u01ae\15\0\1\u01ae\4\0\1\31\1\0\1\64"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\21\35\1\u01af"+
    "\6\35\2\0\1\32\1\0\1\65\2\0\1\u01b0\2\64"+
    "\2\0\1\31\1\0\1\u01b1\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\30\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\u01b1\4\0\1\u01b1\52\0\2\u01b1\4\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\10\32\1\u01b2\17\32"+
    "\2\0\1\32\3\0\1\u01b3\1\0\2\66\27\0\1\u01b3"+
    "\25\0\1\u01b3\7\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\4\32\1\u01b4\23\32\2\0\1\32\5\0"+
    "\2\66\23\0\1\u01b5\41\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\15\32\1\u01b6\12\32\2\0\1\32"+
    "\5\0\2\66\4\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\20\32\1\u01b7\7\32\2\0\1\32\5\0"+
    "\2\66\4\0\1\66\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\23\32\1\u01b8\4\32\2\0\1\32\5\0\2\66"+
    "\34\0\1\u01b9\63\0\1\u01ba\63\0\1\u01bb\60\0\1\u01bc"+
    "\60\0\1\u01bd\55\0\1\u01be\62\0\1\u01bf\54\0\1\u01c0"+
    "\27\0\1\u01c1\52\0\2\u01c1\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\14\32\1\u01c2\13\32\2\0"+
    "\1\32\5\0\2\66\4\0\1\u01c3\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\30\32\2\0\1\32\5\0\2\u01c3"+
    "\4\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\16\32\1\u01c4\11\32\2\0\1\32\5\0\2\66\4\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\20\32"+
    "\1\u01c5\7\32\2\0\1\32\5\0\2\66\37\0\1\u01c6"+
    "\25\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\16\32\1\u01c7\11\32\2\0\1\32\5\0\2\66\4\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\20\32"+
    "\1\u01c8\7\32\2\0\1\32\5\0\2\66\4\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\21\32\1\u01c9"+
    "\6\32\2\0\1\32\4\0\1\u01ca\2\66\35\0\1\u01cb"+
    "\62\0\1\u01cc\61\0\1\u01ca\15\0\1\u01ca\6\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\2\32\1\u01cd"+
    "\25\32\2\0\1\32\5\0\2\66\4\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\5\32\1\u01ce\22\32"+
    "\2\0\1\32\5\0\2\66\24\0\1\u01cf\36\0\1\31"+
    "\1\0\1\64\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\15\35\1\u01d0\12\35\2\0\1\32\1\0\1\65\3\0"+
    "\2\64\34\0\1\u01d1\30\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\2\32\1\u01d2\17\32\1\u01d3\1\u01d4"+
    "\4\32\2\0\1\32\5\0\2\66\21\0\1\u01d5\17\0"+
    "\1\u01d6\1\u01d7\22\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\10\32\1\u01d8\17\32\2\0\1\32\3\0"+
    "\1\u01d9\1\0\2\66\27\0\1\u01d9\25\0\1\u01d9\7\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\25\32"+
    "\1\u01da\2\32\2\0\1\32\5\0\2\66\44\0\1\u01db"+
    "\16\0\1\31\1\0\1\64\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\30\35\2\0\1\u01dc\1\0\1\65\3\0"+
    "\2\64\51\0\1\u01dd\13\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\1\32\1\u01de\26\32\2\0\1\32"+
    "\5\0\2\66\20\0\1\u01df\44\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\6\32\1\u01e0\21\32\2\0"+
    "\1\32\5\0\2\66\25\0\1\u01e1\37\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\22\32\1\u01e2\5\32"+
    "\2\0\1\32\5\0\2\66\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\4\32\1\u01e3\23\32\2\0"+
    "\1\32\5\0\2\66\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\4\32\1\u01e4\23\32\2\0\1\32"+
    "\5\0\2\66\41\0\1\u01e5\42\0\1\u01e6\60\0\1\u01e7"+
    "\75\0\1\u01e8\15\0\1\u01e8\25\0\1\u01e9\60\0\1\u01ea"+
    "\77\0\1\u01eb\50\0\1\u01ec\32\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\17\32\1\u01ed\10\32\2\0"+
    "\1\32\5\0\2\66\4\0\1\u01ee\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\30\32\2\0\1\32\5\0\2\u01ee"+
    "\4\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\10\32\1\u01ef\17\32\2\0\1\32\3\0\1\u01f0\1\0"+
    "\2\66\27\0\1\u01f0\25\0\1\u01f0\7\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\14\32\1\u01f1\13\32"+
    "\2\0\1\32\5\0\2\66\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\10\32\1\u01f2\17\32\2\0"+
    "\1\32\3\0\1\u01f3\1\0\2\66\4\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\23\32\1\u01f4\4\32"+
    "\2\0\1\32\5\0\2\66\42\0\1\u01f5\51\0\1\u01f6"+
    "\54\0\1\u01f3\25\0\1\u01f3\7\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\10\32\1\u01f7\17\32\2\0"+
    "\1\32\3\0\1\u01f8\1\0\2\66\4\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\10\32\1\u01f9\17\32"+
    "\2\0\1\32\3\0\1\u01fa\1\0\2\66\27\0\1\u01fa"+
    "\25\0\1\u01fa\5\0\1\31\1\0\1\u01fb\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\30\35\2\0\1\32\1\0"+
    "\1\65\3\0\2\u01fb\4\0\1\u01fb\52\0\2\u01fb\4\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\16\32"+
    "\1\u01fc\11\32\2\0\1\32\5\0\2\66\4\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\20\32\1\u01fd"+
    "\7\32\2\0\1\32\5\0\2\66\4\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\21\32\1\u01fe\6\32"+
    "\2\0\1\32\4\0\1\u01ff\2\66\35\0\1\u0200\62\0"+
    "\1\u0201\61\0\1\u01ff\15\0\1\u01ff\6\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\1\u0202\27\32\2\0"+
    "\1\32\5\0\2\66\17\0\1\u0203\45\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\16\32\1\u0204\11\32"+
    "\2\0\1\32\5\0\2\66\35\0\1\u0205\27\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\2\32\1\u0206"+
    "\17\32\1\u0207\5\32\2\0\1\32\5\0\2\66\21\0"+
    "\1\u0208\17\0\1\u0209\23\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\13\32\1\u020a\14\32\2\0\1\32"+
    "\5\0\2\66\32\0\1\u020b\32\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\23\32\1\u020c\4\32\2\0"+
    "\1\32\5\0\2\66\42\0\1\u020d\22\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\10\32\1\u020e\17\32"+
    "\2\0\1\32\3\0\1\u020f\1\0\2\66\4\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\1\u0210\27\32"+
    "\2\0\1\32\5\0\2\66\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\24\32\1\u0211\3\32\2\0"+
    "\1\32\5\0\2\66\27\0\1\u020f\25\0\1\u020f\22\0"+
    "\1\u0212\104\0\1\u0213\57\0\1\u0214\56\0\1\u0215\15\0"+
    "\1\u0215\42\0\1\u0216\15\0\1\u0216\24\0\1\u0217\65\0"+
    "\1\u0218\25\0\1\u0218\7\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\16\32\1\u0219\11\32\2\0\1\32"+
    "\5\0\2\66\4\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\16\32\1\u021a\11\32\2\0\1\32\5\0"+
    "\2\66\35\0\1\u021b\27\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\17\32\1\u021c\10\32\2\0\1\32"+
    "\5\0\2\66\4\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\24\32\1\u021d\3\32\2\0\1\32\5\0"+
    "\2\66\43\0\1\u021e\21\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\1\u021f\27\32\2\0\1\32\5\0"+
    "\2\66\17\0\1\u0220\77\0\1\u0221\26\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\16\32\1\u0222\11\32"+
    "\2\0\1\32\5\0\2\66\35\0\1\u0223\27\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\2\32\1\u0224"+
    "\25\32\2\0\1\32\5\0\2\66\21\0\1\u0225\43\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\14\32"+
    "\1\u0226\13\32\2\0\1\32\5\0\2\66\4\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\10\32\1\u0227"+
    "\17\32\2\0\1\32\3\0\1\u0228\1\0\2\66\4\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\23\32"+
    "\1\u0229\4\32\2\0\1\32\5\0\2\66\42\0\1\u022a"+
    "\51\0\1\u022b\54\0\1\u0228\25\0\1\u0228\7\0\1\u022c"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\30\32\2\0"+
    "\1\32\5\0\2\u022c\4\0\1\u022c\52\0\2\u022c\4\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\20\32"+
    "\1\u022d\7\32\2\0\1\32\5\0\2\66\37\0\1\u022e"+
    "\25\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\16\32\1\u022f\11\32\2\0\1\32\5\0\2\66\4\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\20\32"+
    "\1\u0230\7\32\2\0\1\32\5\0\2\66\35\0\1\u0231"+
    "\62\0\1\u0232\25\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\4\32\1\u0233\23\32\2\0\1\32\5\0"+
    "\2\66\23\0\1\u0234\41\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\15\32\1\u0235\12\32\2\0\1\32"+
    "\5\0\2\66\34\0\1\u0236\30\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\6\32\1\u0237\21\32\2\0"+
    "\1\32\5\0\2\66\25\0\1\u0238\37\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\2\32\1\u0239\25\32"+
    "\2\0\1\32\5\0\2\66\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\16\32\1\u023a\11\32\2\0"+
    "\1\32\5\0\2\66\21\0\1\u023b\74\0\1\u023c\42\0"+
    "\1\u023d\102\0\1\u023e\55\0\1\u023f\45\0\1\u0240\25\0"+
    "\1\u0241\30\0\1\u0242\43\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\15\32\1\u0243\12\32\2\0\1\32"+
    "\5\0\2\66\4\0\1\u0244\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\30\32\2\0\1\32\5\0\2\u0244\4\0"+
    "\1\u0244\52\0\2\u0244\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\16\32\1\u0245\11\32\2\0\1\32"+
    "\5\0\2\66\4\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\10\32\1\u0246\17\32\2\0\1\32\3\0"+
    "\1\u0247\1\0\2\66\27\0\1\u0247\25\0\1\u0247\7\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\20\32"+
    "\1\u0248\7\32\2\0\1\32\5\0\2\66\37\0\1\u0249"+
    "\56\0\1\u024a\27\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\15\32\1\u024b\12\32\2\0\1\32\5\0"+
    "\2\66\34\0\1\u024c\30\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\1\u024d\27\32\2\0\1\32\5\0"+
    "\2\66\17\0\1\u024e\45\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\17\32\1\u024f\10\32\2\0\1\32"+
    "\5\0\2\66\4\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\24\32\1\u0250\3\32\2\0\1\32\5\0"+
    "\2\66\43\0\1\u0251\21\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\1\u0252\27\32\2\0\1\32\5\0"+
    "\2\66\17\0\1\u0253\77\0\1\u0254\26\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\3\32\1\u0255\24\32"+
    "\2\0\1\32\5\0\2\66\22\0\1\u0256\42\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\14\32\1\u0257"+
    "\13\32\2\0\1\32\5\0\2\66\4\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\10\32\1\u0258\17\32"+
    "\2\0\1\32\3\0\1\u0259\1\0\2\66\33\0\1\u025a"+
    "\54\0\1\u0259\25\0\1\u0259\7\0\1\u025b\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\30\32\2\0\1\32\5\0"+
    "\2\u025b\4\0\1\u025b\52\0\2\u025b\4\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\22\32\1\u025c\5\32"+
    "\2\0\1\32\5\0\2\66\41\0\1\u025d\23\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\23\32\1\u025e"+
    "\4\32\2\0\1\32\5\0\2\66\42\0\1\u025f\22\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\10\32"+
    "\1\u0260\17\32\2\0\1\32\3\0\1\u0261\1\0\2\66"+
    "\4\0\1\u0262\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\30\32\2\0\1\32\5\0\2\u0262\27\0\1\u0261\25\0"+
    "\1\u0261\7\0\1\u0262\52\0\2\u0262\37\0\1\u0263\40\0"+
    "\1\u0264\103\0\1\u0265\56\0\1\u0266\15\0\1\u0266\41\0"+
    "\1\u0267\50\0\1\u0268\25\0\1\u0268\7\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\4\32\1\u0269\23\32"+
    "\2\0\1\32\5\0\2\66\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\15\32\1\u026a\12\32\2\0"+
    "\1\32\5\0\2\66\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\1\u026b\27\32\2\0\1\32\5\0"+
    "\2\66\17\0\1\u026c\45\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\10\32\1\u026d\17\32\2\0\1\32"+
    "\3\0\1\u026e\1\0\2\66\27\0\1\u026e\25\0\1\u026e"+
    "\37\0\1\u026f\30\0\1\u0270\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\30\32\2\0\1\32\5\0\2\u0270\4\0"+
    "\1\u0270\52\0\2\u0270\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\2\32\1\u0271\25\32\2\0\1\32"+
    "\5\0\2\66\21\0\1\u0272\43\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\16\32\1\u0273\11\32\2\0"+
    "\1\32\5\0\2\66\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\10\32\1\u0274\17\32\2\0\1\32"+
    "\3\0\1\u0275\1\0\2\66\27\0\1\u0275\25\0\1\u0275"+
    "\7\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\20\32\1\u0276\7\32\2\0\1\32\5\0\2\66\37\0"+
    "\1\u0277\56\0\1\u0278\27\0\1\u0279\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\30\32\2\0\1\32\5\0\2\u0279"+
    "\4\0\1\u0279\52\0\2\u0279\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\17\32\1\u027a\10\32\2\0"+
    "\1\32\5\0\2\66\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\24\32\1\u027b\3\32\2\0\1\32"+
    "\5\0\2\66\43\0\1\u027c\53\0\1\u027d\26\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\1\u027e\27\32"+
    "\2\0\1\32\5\0\2\66\17\0\1\u027f\45\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\16\32\1\u0280"+
    "\11\32\2\0\1\32\5\0\2\66\35\0\1\u0281\27\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\16\32"+
    "\1\u0282\11\32\2\0\1\32\5\0\2\66\35\0\1\u0283"+
    "\52\0\1\u0284\25\0\1\u0284\43\0\1\u0285\15\0\1\u0285"+
    "\25\0\1\u0286\106\0\1\u0287\32\0\1\u0288\76\0\1\u0289"+
    "\23\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\15\32\1\u028a\12\32\2\0\1\32\5\0\2\66\4\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\4\32"+
    "\1\u028b\23\32\2\0\1\32\5\0\2\66\4\0\1\u028c"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\30\32\2\0"+
    "\1\32\5\0\2\u028c\4\0\1\u028c\52\0\2\u028c\4\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\16\32"+
    "\1\u028d\11\32\2\0\1\32\5\0\2\66\35\0\1\u028e"+
    "\46\0\1\u028f\41\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\10\32\1\u0290\17\32\2\0\1\32\3\0"+
    "\1\u0291\1\0\2\66\27\0\1\u0291\25\0\1\u0291\7\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\15\32"+
    "\1\u0292\12\32\2\0\1\32\5\0\2\66\4\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\1\u0293\27\32"+
    "\2\0\1\32\5\0\2\66\17\0\1\u0294\45\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\10\32\1\u0295"+
    "\17\32\2\0\1\32\3\0\1\u0296\1\0\2\66\27\0"+
    "\1\u0296\25\0\1\u0296\37\0\1\u0297\30\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\16\32\1\u0298\11\32"+
    "\2\0\1\32\5\0\2\66\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\10\32\1\u0299\17\32\2\0"+
    "\1\32\3\0\1\u029a\1\0\2\66\27\0\1\u029a\25\0"+
    "\1\u029a\40\0\1\u029b\27\0\1\u029c\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\30\32\2\0\1\32\5\0\2\u029c"+
    "\4\0\1\u029c\52\0\2\u029c\4\0\1\u029d\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\30\32\2\0\1\32\5\0"+
    "\2\u029d\4\0\1\u029d\52\0\2\u029d\4\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\15\32\1\u029e\12\32"+
    "\2\0\1\32\5\0\2\66\34\0\1\u029f\61\0\1\u02a0"+
    "\63\0\1\u02a1\15\0\1\u02a1\41\0\1\u02a2\40\0\1\u02a3"+
    "\103\0\1\u02a4\22\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\22\32\1\u02a5\5\32\2\0\1\32\5\0"+
    "\2\66\4\0\1\66\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\15\32\1\u02a6\12\32\2\0\1\32\5\0\2\66"+
    "\4\0\1\u02a7\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\30\32\2\0\1\32\5\0\2\u02a7\4\0\1\u02a7\52\0"+
    "\2\u02a7\34\0\1\u02a8\30\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\16\32\1\u02a9\11\32\2\0\1\32"+
    "\5\0\2\66\35\0\1\u02aa\27\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\4\32\1\u02ab\23\32\2\0"+
    "\1\32\5\0\2\66\4\0\1\u02ac\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\30\32\2\0\1\32\5\0\2\u02ac"+
    "\4\0\1\u02ac\52\0\2\u02ac\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\16\32\1\u02ad\11\32\2\0"+
    "\1\32\5\0\2\66\35\0\1\u02ae\46\0\1\u02af\41\0"+
    "\1\66\1\32\1\0\1\32\1\0\1\67\5\0\15\32"+
    "\1\u02b0\12\32\2\0\1\32\5\0\2\66\4\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\1\u02b1\27\32"+
    "\2\0\1\32\5\0\2\66\17\0\1\u02b2\75\0\1\u02b3"+
    "\30\0\1\u02b4\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\30\32\2\0\1\32\5\0\2\u02b4\4\0\1\u02b4\52\0"+
    "\2\u02b4\4\0\1\u02b5\52\0\2\u02b5\41\0\1\u02b6\42\0"+
    "\1\u02b7\67\0\1\u02b8\50\0\1\u02b9\42\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\4\32\1\u02ba\23\32"+
    "\2\0\1\32\5\0\2\66\4\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\22\32\1\u02bb\5\32\2\0"+
    "\1\32\5\0\2\66\41\0\1\u02bc\23\0\1\66\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\15\32\1\u02bd\12\32"+
    "\2\0\1\32\5\0\2\66\34\0\1\u02be\30\0\1\66"+
    "\1\32\1\0\1\32\1\0\1\67\5\0\15\32\1\u02bf"+
    "\12\32\2\0\1\32\5\0\2\66\4\0\1\u02c0\1\32"+
    "\1\0\1\32\1\0\1\67\5\0\30\32\2\0\1\32"+
    "\5\0\2\u02c0\4\0\1\u02c0\52\0\2\u02c0\34\0\1\u02c1"+
    "\30\0\1\66\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\4\32\1\u02c2\23\32\2\0\1\32\5\0\2\66\4\0"+
    "\1\u02c3\1\32\1\0\1\32\1\0\1\67\5\0\30\32"+
    "\2\0\1\32\5\0\2\u02c3\4\0\1\u02c3\52\0\2\u02c3"+
    "\23\0\1\u02c4\54\0\1\u02c5\60\0\1\u02c6\70\0\1\u02c7"+
    "\25\0\1\u02c7\26\0\1\u02c8\41\0\1\u02c9\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\30\32\2\0\1\32\5\0"+
    "\2\u02c9\4\0\1\66\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\4\32\1\u02ca\23\32\2\0\1\32\5\0\2\66"+
    "\23\0\1\u02cb\41\0\1\u02cc\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\30\32\2\0\1\32\5\0\2\u02cc\4\0"+
    "\1\u02cc\52\0\2\u02cc\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\22\32\1\u02cd\5\32\2\0\1\32"+
    "\5\0\2\66\41\0\1\u02ce\23\0\1\66\1\32\1\0"+
    "\1\32\1\0\1\67\5\0\15\32\1\u02cf\12\32\2\0"+
    "\1\32\5\0\2\66\34\0\1\u02d0\64\0\1\u02d1\15\0"+
    "\1\u02d1\34\0\1\u02d2\74\0\1\u02d3\52\0\1\u02d4\15\0"+
    "\1\u02d4\6\0\1\u02d5\1\32\1\0\1\32\1\0\1\67"+
    "\5\0\30\32\2\0\1\32\5\0\2\u02d5\4\0\1\u02d5"+
    "\52\0\2\u02d5\4\0\1\66\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\4\32\1\u02d6\23\32\2\0\1\32\5\0"+
    "\2\66\23\0\1\u02d7\41\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\22\32\1\u02d8\5\32\2\0\1\32"+
    "\5\0\2\66\41\0\1\u02d9\46\0\1\u02da\25\0\1\u02da"+
    "\22\0\1\u02db\45\0\1\u02dc\1\32\1\0\1\32\1\0"+
    "\1\67\5\0\30\32\2\0\1\32\5\0\2\u02dc\4\0"+
    "\1\u02dc\52\0\2\u02dc\4\0\1\66\1\32\1\0\1\32"+
    "\1\0\1\67\5\0\4\32\1\u02dd\23\32\2\0\1\32"+
    "\5\0\2\66\23\0\1\u02de\103\0\1\u02df\34\0\1\u02e0"+
    "\42\0\1\u02e1\1\32\1\0\1\32\1\0\1\67\5\0"+
    "\30\32\2\0\1\32\5\0\2\u02e1\4\0\1\u02e1\52\0"+
    "\2\u02e1\17\0\1\u02e2\60\0\1\u02e3\63\0\1\u02e4\55\0"+
    "\1\u02e5\42\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[33271];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\6\1\5\11\1\1\1\11\23\0\3\11\5\0\1\11"+
    "\1\0\1\11\50\0\1\11\14\0\1\11\35\0\1\11"+
    "\123\0\1\11\24\0\2\11\27\0\1\11\16\0\1\11"+
    "\20\0\1\11\4\0\1\11\13\0\1\11\24\0\1\11"+
    "\23\0\1\11\13\0\1\11\20\0\1\11\1\0\1\11"+
    "\40\0\1\11\12\0\1\11\17\0\1\11\1\0\1\11"+
    "\52\0\1\11\14\0\1\11\60\0\1\11\27\0\1\11"+
    "\26\0\1\11\6\0\1\11\1\0\1\1\13\0\1\11"+
    "\10\0\1\11\13\0\1\11\6\0\1\11\17\0\2\11"+
    "\11\0\1\11\4\0\1\11\7\0\2\11\3\0\1\1"+
    "\6\0\1\11\2\0\1\11\1\0\1\1\3\0\1\11"+
    "\2\0\1\11\4\0\1\11\2\0\2\11\6\0\1\11"+
    "\4\0\1\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[741];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
        StringBuffer stringBuffer = new StringBuffer();
        ArrayList<Error> errors = new ArrayList<Error>();

        private Symbol symbol(int type){
            return new Symbol(type, yyline+1, yycolumn+1);
        }

        private Symbol symbol(int type, Object value){
            return new Symbol(type, yyline+1, yycolumn+1, value);
        }

        public ArrayList<ErrorL> getErrorsLexicos(){
            return this.errors;
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errors.add(new ErrorL(yytext(), yyline, yycolumn, "Error Lexico", "No coincide este caracter"));
            }
          // fall through
          case 71: break;
          case 2:
            { /*ignore*/
            }
          // fall through
          case 72: break;
          case 3:
            { return new Symbol(ParserSym.EXCLAMATION, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 4:
            { return new Symbol(ParserSym.COMMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 5:
            { return new Symbol(ParserSym.NUMBER, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 6:
            { return new Symbol(ParserSym.COLON, yyline, yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 7:
            { return new Symbol(ParserSym.LESST, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 8:
            { return new Symbol(ParserSym.EQUALS, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 9:
            { return new Symbol(ParserSym.GREATERT, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 10:
            { return new Symbol(ParserSym.BRACKETA, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 11:
            { return new Symbol(ParserSym.BRACKETC, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 12:
            { return new Symbol(ParserSym.KEYA, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 13:
            { return new Symbol(ParserSym.OR, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 14:
            { return new Symbol(ParserSym.KEYC, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 15:
            { return new Symbol(ParserSym.ENDREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 16:
            { return new Symbol(ParserSym.OPENREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 17:
            { return new Symbol(ParserSym.OPENXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 18:
            { return new Symbol(ParserSym.ENDXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 19:
            { return new Symbol(ParserSym.OPTIONSRESPONSES, yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 20:
            { return new Symbol(ParserSym.TEXT, yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 21:
            { return new Symbol(ParserSym.NUMBERVERSION, yyline, yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 22:
            { return new Symbol(ParserSym.ID, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 23:
            { return new Symbol(ParserSym.XSON, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 24:
            { return new Symbol(ParserSym.THEME, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 25:
            { return new Symbol(ParserSym.CLASS, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 26:
            { return new Symbol(ParserSym.COMBO, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 27:
            { return new Symbol(ParserSym.RADIO, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 28:
            { return new Symbol(ParserSym.VERSION, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 29:
            { return new Symbol(ParserSym.INDEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 30:
            { return new Symbol(ParserSym.NAME, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          case 31:
            { return new Symbol(ParserSym.TRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 101: break;
          case 32:
            { return new Symbol(ParserSym.CARDINDEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 102: break;
          case 33:
            { return new Symbol(ParserSym.USER, yycolumn, yyline, yytext());
            }
          // fall through
          case 103: break;
          case 34:
            { return new Symbol(ParserSym.CHECKBOX, yycolumn, yyline, yytext());
            }
          // fall through
          case 104: break;
          case 35:
            { return new Symbol(ParserSym.OPTIONS, yycolumn, yyline, yytext());
            }
          // fall through
          case 105: break;
          case 36:
            { return new Symbol(ParserSym.PASSWORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 106: break;
          case 37:
            { return new Symbol(ParserSym.IDTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 107: break;
          case 38:
            { return new Symbol(ParserSym.RESPONSETRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 108: break;
          case 39:
            { return new Symbol(ParserSym.DATECREATION, yycolumn, yyline, yytext());
            }
          // fall through
          case 109: break;
          case 40:
            { return new Symbol(ParserSym.TEXTAREA, yycolumn, yyline, yytext());
            }
          // fall through
          case 110: break;
          case 41:
            { return new Symbol(ParserSym.TEXTFIELD, yycolumn, yyline, yytext());
            }
          // fall through
          case 111: break;
          case 42:
            { return new Symbol(ParserSym.INSTITUTION, yycolumn, yyline, yytext());
            }
          // fall through
          case 112: break;
          case 43:
            { return new Symbol(ParserSym.NEWTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 113: break;
          case 44:
            { return new Symbol(ParserSym.USERDATA, yycolumn, yyline, yytext());
            }
          // fall through
          case 114: break;
          case 45:
            { return new Symbol(ParserSym.TXTVISIBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 115: break;
          case 46:
            { return new Symbol(ParserSym.NEWUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 116: break;
          case 47:
            { return new Symbol(ParserSym.INRESPONSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 117: break;
          case 48:
            { return new Symbol(ParserSym.DATE, yycolumn, yyline, yytext());
            }
          // fall through
          case 118: break;
          case 49:
            { return new Symbol(ParserSym.NEWPASSWORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 119: break;
          case 50:
            { return new Symbol(ParserSym.INITRESPONSES, yycolumn, yyline, yytext());
            }
          // fall through
          case 120: break;
          case 51:
            { return new Symbol(ParserSym.DELETETRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 121: break;
          case 52:
            { return new Symbol(ParserSym.TIMEQUESTION, yycolumn, yyline, yytext());
            }
          // fall through
          case 122: break;
          case 53:
            { return new Symbol(ParserSym.OLDUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 123: break;
          case 54:
            { return new Symbol(ParserSym.DELETEUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 124: break;
          case 55:
            { return new Symbol(ParserSym.EDITTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 125: break;
          case 56:
            { return new Symbol(ParserSym.USERCREATOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 126: break;
          case 57:
            { return new Symbol(ParserSym.LOGINUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 127: break;
          case 58:
            { return new Symbol(ParserSym.INREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 128: break;
          case 59:
            { return new Symbol(ParserSym.EDITUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 129: break;
          case 60:
            { return new Symbol(ParserSym.PARAMETERSTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 130: break;
          case 61:
            { return new Symbol(ParserSym.EDRESPONSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 131: break;
          case 62:
            { return new Symbol(ParserSym.ADDCOMPONENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 132: break;
          case 63:
            { return new Symbol(ParserSym.DATEEDIT, yycolumn, yyline, yytext());
            }
          // fall through
          case 133: break;
          case 64:
            { return new Symbol(ParserSym.ENDRESPONSES, yycolumn, yyline, yytext());
            }
          // fall through
          case 134: break;
          case 65:
            { return new Symbol(ParserSym.INITREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 135: break;
          case 66:
            { return new Symbol(ParserSym.DELETECOMPONENTT, yycolumn, yyline, yytext());
            }
          // fall through
          case 136: break;
          case 67:
            { return new Symbol(ParserSym.EDITCOMPONENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 137: break;
          case 68:
            { return new Symbol(ParserSym.PARAMETERSCOMPONENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 138: break;
          case 69:
            { return new Symbol(ParserSym.EDREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 139: break;
          case 70:
            { return new Symbol(ParserSym.ENDREQUESTS, yycolumn, yyline, yytext());
            }
          // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
