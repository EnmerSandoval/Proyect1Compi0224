// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: LoginFlex.flex

package user.servidor.Flex;

import java_cup.runtime.*;
import java.util.ArrayList;
import user.servidor.Errors.ErrorL;
import user.servidor.Cup.LoginSym;


@SuppressWarnings("fallthrough")
public class LoginFlex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\17\u0200\1\u0500"+
    "\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\0\1\4"+
    "\6\0\1\5\1\6\1\7\1\10\1\0\12\11\1\12"+
    "\1\0\1\13\1\14\1\15\1\16\1\0\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\20\1\26\2\20"+
    "\1\27\1\20\1\30\1\31\1\32\1\20\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\20\1\42\1\43"+
    "\1\0\1\44\1\0\1\45\1\0\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\20\1\26\2\20\1\27"+
    "\1\20\1\30\1\31\1\32\1\20\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\20\1\42\1\46\1\0"+
    "\1\47\7\0\1\1\32\0\1\1\36\0\1\50\160\0"+
    "\2\51\115\0\1\52\u0200\0\1\1\177\0\13\1\35\0"+
    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\5\1\1\7\1\10\1\11\1\12\1\13\7\0\1\14"+
    "\1\15\1\16\24\0\1\17\5\0\1\20\16\0\1\21"+
    "\3\0\1\21\6\0\1\22\11\0\1\23\4\0\1\24"+
    "\22\0\1\25\1\26\7\0\1\27\4\0\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\53\0\327\0\53"+
    "\0\u0102\0\53\0\53\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9"+
    "\0\53\0\53\0\53\0\53\0\53\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\53\0\53\0\53\0\u0331"+
    "\0\u035c\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489"+
    "\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1"+
    "\0\u060c\0\u0637\0\u0662\0\53\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\u0739\0\53\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993"+
    "\0\53\0\u09be\0\u09e9\0\u0a14\0\u08e7\0\u0a3f\0\u0a6a\0\u0a95"+
    "\0\u0ac0\0\u0aeb\0\u0b16\0\53\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2"+
    "\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\53\0\u0cc4\0\u0cef"+
    "\0\u0d1a\0\u0d45\0\53\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74"+
    "\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\53\0\53\0\u1076"+
    "\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\53\0\u11a3"+
    "\0\u11ce\0\u11f9\0\u1224\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\2\1\6\1\2\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\5\2\1\15"+
    "\6\2\1\16\3\2\1\17\1\2\1\20\1\2\1\21"+
    "\1\22\1\2\1\23\1\24\3\2\54\0\1\3\66\0"+
    "\1\25\46\0\1\26\10\0\1\27\4\0\1\30\2\0"+
    "\1\31\3\0\1\32\11\0\1\33\13\0\1\34\43\0"+
    "\1\35\13\0\1\36\51\0\1\37\63\0\1\40\22\0"+
    "\1\40\24\0\1\41\52\0\1\42\63\0\1\43\15\0"+
    "\1\43\10\0\1\44\1\26\60\0\1\45\64\0\1\46"+
    "\40\0\1\47\67\0\1\50\15\0\1\50\4\0\1\51"+
    "\2\0\1\51\7\0\24\51\2\0\1\51\16\0\1\34"+
    "\11\0\1\52\57\0\1\53\41\0\1\54\66\0\1\55"+
    "\50\0\1\56\32\0\1\57\76\0\1\60\42\0\1\61"+
    "\61\0\1\62\15\0\1\62\36\0\1\63\17\0\1\64"+
    "\1\51\2\0\1\51\1\0\1\65\5\0\24\51\2\0"+
    "\1\51\12\0\1\66\1\0\1\66\110\0\1\67\34\0"+
    "\1\70\57\0\1\71\15\0\1\71\30\0\1\72\33\0"+
    "\1\57\11\0\1\73\60\0\1\74\47\0\1\75\22\0"+
    "\1\75\35\0\1\76\15\0\1\76\17\0\1\77\36\0"+
    "\1\64\5\0\1\65\5\0\24\65\2\0\1\65\16\0"+
    "\1\100\75\0\1\101\15\0\1\101\26\0\1\102\22\0"+
    "\1\102\27\0\1\103\22\0\1\103\6\0\1\104\1\0"+
    "\1\104\77\0\1\105\15\0\1\105\30\0\1\106\62\0"+
    "\1\107\45\0\1\110\22\0\1\111\5\0\1\100\72\0"+
    "\1\112\63\0\1\113\41\0\1\114\32\0\1\115\106\0"+
    "\1\116\52\0\1\117\36\0\1\120\47\0\1\121\22\0"+
    "\1\121\30\0\1\122\42\0\1\123\63\0\1\124\60\0"+
    "\1\125\52\0\1\126\47\0\1\127\50\0\1\130\47\0"+
    "\1\131\22\0\1\131\34\0\1\132\53\0\1\133\15\0"+
    "\1\133\34\0\1\134\15\0\1\134\22\0\1\135\33\0"+
    "\1\136\70\0\1\137\76\0\1\140\43\0\1\141\52\0"+
    "\1\142\17\0\1\143\75\0\1\144\22\0\1\144\35\0"+
    "\1\145\15\0\1\145\17\0\1\146\52\0\1\147\70\0"+
    "\1\150\46\0\1\151\54\0\1\152\52\0\1\153\55\0"+
    "\1\154\43\0\1\155\51\0\1\156\22\0\1\156\27\0"+
    "\1\157\22\0\1\157\23\0\1\160\56\0\1\161\22\0"+
    "\1\161\32\0\1\162\52\0\1\163\66\0\1\164\26\0"+
    "\1\165\34\0\1\166\52\0\1\167\102\0\1\170\45\0"+
    "\1\171\22\0\1\171\24\0\1\172\64\0\1\173\34\0"+
    "\1\174\71\0\1\175\43\0\1\176\45\0\1\177\56\0"+
    "\1\200\22\0\1\200\43\0\1\201\27\0\1\202\55\0"+
    "\1\203\47\0\1\204\33\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4687];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\5\1\5\11\7\0\3\11\24\0\1\11\5\0\1\11"+
    "\16\0\1\11\3\0\1\1\6\0\1\11\11\0\1\11"+
    "\4\0\1\11\22\0\2\11\7\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
        StringBuffer stringBuffer = new StringBuffer();
        ArrayList<ErrorL> errors = new ArrayList<ErrorL>();

        private Symbol symbol(int type){
            return new Symbol(type, yyline+1, yycolumn+1);
        }

        private Symbol symbol(int type, Object value){
            return new Symbol(type, yyline+1, yycolumn+1, value);
        }

        public ArrayList<ErrorL> getErrorsLexicos(){
            return this.errors;
        }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LoginFlex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(LoginSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*ignore*/
            }
          // fall through
          case 25: break;
          case 2:
            { return new Symbol(LoginSym.COMMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 26: break;
          case 3:
            { return new Symbol(LoginSym.COLON, yycolumn, yyline, yytext());
            }
          // fall through
          case 27: break;
          case 4:
            { return new Symbol(LoginSym.LESST, yycolumn, yyline, yytext());
            }
          // fall through
          case 28: break;
          case 5:
            { return new Symbol(LoginSym.EQUALS, yycolumn, yyline, yytext());
            }
          // fall through
          case 29: break;
          case 6:
            { return new Symbol(LoginSym.GREATERT, yycolumn, yyline, yytext());
            }
          // fall through
          case 30: break;
          case 7:
            { return new Symbol(LoginSym.BRACKETA, yycolumn, yyline, yytext());
            }
          // fall through
          case 31: break;
          case 8:
            { return new Symbol(LoginSym.BRACKETC, yycolumn, yyline, yytext());
            }
          // fall through
          case 32: break;
          case 9:
            { return new Symbol(LoginSym.KEYA, yycolumn, yyline, yytext());
            }
          // fall through
          case 33: break;
          case 10:
            { return new Symbol(LoginSym.KEYC, yycolumn, yyline, yytext());
            }
          // fall through
          case 34: break;
          case 11:
            { return new Symbol(LoginSym.ENDREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 35: break;
          case 12:
            { return new Symbol(LoginSym.OPENREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 36: break;
          case 13:
            { return new Symbol(LoginSym.OPENXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 37: break;
          case 14:
            { return new Symbol(LoginSym.ENDXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 38: break;
          case 15:
            { return new Symbol(LoginSym.TEXT, yyline, yycolumn, yytext());
            }
          // fall through
          case 39: break;
          case 16:
            { return new Symbol(LoginSym.XSON, yycolumn, yyline, yytext());
            }
          // fall through
          case 40: break;
          case 17:
            { return new Symbol(LoginSym.NUMBERVERSION, yycolumn, yyline, yytext());
            }
          // fall through
          case 41: break;
          case 18:
            { return new Symbol(LoginSym.VERSION, yycolumn, yyline, yytext());
            }
          // fall through
          case 42: break;
          case 19:
            { return new Symbol(LoginSym.USER, yycolumn, yyline, yytext());
            }
          // fall through
          case 43: break;
          case 20:
            { return new Symbol(LoginSym.PASSWORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 44: break;
          case 21:
            { return new Symbol(LoginSym.USERDATA, yycolumn, yyline, yytext());
            }
          // fall through
          case 45: break;
          case 22:
            { return new Symbol(LoginSym.LOGINUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 46: break;
          case 23:
            { return new Symbol(LoginSym.INREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 47: break;
          case 24:
            { return new Symbol(LoginSym.EDREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
