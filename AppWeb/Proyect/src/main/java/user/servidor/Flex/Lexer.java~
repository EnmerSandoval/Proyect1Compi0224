// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex

package user.servidor.Flex;

import java_cup.runtime.*;
import java.util.ArrayList;
import user.servidor.Errors.ErrorL;
import user.servidor.Cup.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\0\1\4"+
    "\7\0\1\5\1\6\1\7\1\0\12\10\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\27\1\36\1\37"+
    "\1\40\1\41\1\42\1\27\1\43\1\27\1\44\1\45"+
    "\1\0\1\46\1\0\1\47\1\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\27\1\36\1\37"+
    "\1\40\1\41\1\42\1\27\1\43\1\27\1\44\1\50"+
    "\1\51\1\52\7\0\1\1\32\0\1\1\217\0\2\53"+
    "\115\0\1\54\u0200\0\1\1\177\0\13\1\21\0\2\3"+
    "\12\0\2\1\5\0\1\1\57\0\1\1\312\0\1\55"+
    "\325\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\6\1\1\11\1\12\1\13\1\14\1\15"+
    "\21\0\1\16\1\17\1\20\5\0\1\21\1\0\1\22"+
    "\45\0\1\23\16\0\1\24\27\0\1\25\112\0\1\26"+
    "\23\0\1\27\1\30\4\0\1\31\13\0\1\32\15\0"+
    "\1\33\16\0\1\34\12\0\1\35\21\0\1\36\30\0"+
    "\1\37\12\0\1\40\30\0\1\41\6\0\1\42\12\0"+
    "\1\43\1\0\1\44\33\0\1\45\51\0\1\46\40\0"+
    "\1\47\4\0\1\50\11\0\1\51\16\0\1\52\6\0"+
    "\1\53\13\0\1\54\14\0\1\55\5\0\1\56\3\0"+
    "\1\57\10\0\1\60\1\0\1\61\3\0\1\62\2\0"+
    "\1\63\4\0\1\64\2\0\1\65\1\66\6\0\1\67"+
    "\4\0\1\70\1\0\1\71\1\0\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[597];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\56\0\346\0\56"+
    "\0\u0114\0\56\0\56\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa"+
    "\0\u0228\0\56\0\56\0\56\0\56\0\56\0\u0256\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\56"+
    "\0\56\0\56\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\56"+
    "\0\u064a\0\56\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e"+
    "\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e"+
    "\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae"+
    "\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\56"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60"+
    "\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\56\0\u0fa2"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112"+
    "\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282"+
    "\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\56\0\u13c4"+
    "\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534"+
    "\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4"+
    "\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814"+
    "\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984"+
    "\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4"+
    "\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64"+
    "\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4"+
    "\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44"+
    "\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4"+
    "\0\u20e2\0\56\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6"+
    "\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366"+
    "\0\u2394\0\u23c2\0\u23f0\0\u241e\0\u244c\0\56\0\56\0\u247a"+
    "\0\u24a8\0\u24d6\0\u2504\0\56\0\u2532\0\u2560\0\u258e\0\u25bc"+
    "\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u26d0\0\u26fe\0\56"+
    "\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4\0\u2812\0\u2840\0\u286e"+
    "\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954\0\56\0\u2982\0\u29b0"+
    "\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96\0\u2ac4\0\u2af2\0\u2b20"+
    "\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8\0\56\0\u2c06\0\u2c34\0\u2c62"+
    "\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u2da4\0\56"+
    "\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8\0\u2ee6\0\u2f14"+
    "\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\u3084"+
    "\0\u30b2\0\56\0\u30e0\0\u310e\0\u313c\0\u316a\0\u3198\0\u31c6"+
    "\0\u31f4\0\u3222\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308\0\u3336"+
    "\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a\0\u3478\0\u34a6"+
    "\0\u34d4\0\u3502\0\56\0\u3530\0\u355e\0\u358c\0\u35ba\0\u35e8"+
    "\0\u3616\0\u3644\0\u3672\0\u36a0\0\u36ce\0\56\0\u36fc\0\u372a"+
    "\0\u3758\0\u3786\0\u37b4\0\u37e2\0\u3810\0\u383e\0\u386c\0\u389a"+
    "\0\u38c8\0\u38f6\0\u3924\0\u3952\0\u3980\0\u39ae\0\u39dc\0\u3a0a"+
    "\0\u3a38\0\u3a66\0\u3a94\0\u3ac2\0\u3af0\0\u3b1e\0\56\0\u3b4c"+
    "\0\u3b7a\0\u3ba8\0\u3bd6\0\u3c04\0\u3c32\0\56\0\u3c60\0\u3c8e"+
    "\0\u3cbc\0\u3cea\0\u3d18\0\u3d46\0\u3d74\0\u3da2\0\u3dd0\0\u3dfe"+
    "\0\56\0\u3e2c\0\56\0\u3e5a\0\u3e88\0\u3eb6\0\u3ee4\0\u3f12"+
    "\0\u3f40\0\u3f6e\0\u3f9c\0\u3fca\0\u3ff8\0\u4026\0\u4054\0\u4082"+
    "\0\u40b0\0\u40de\0\u410c\0\u413a\0\u4168\0\u4196\0\u41c4\0\u41f2"+
    "\0\u4220\0\u424e\0\u427c\0\u42aa\0\u42d8\0\u4306\0\56\0\u4334"+
    "\0\u4362\0\u4390\0\u43be\0\u43ec\0\u441a\0\u4448\0\u4476\0\u44a4"+
    "\0\u44d2\0\u4500\0\u452e\0\u455c\0\u458a\0\u45b8\0\u45e6\0\u4614"+
    "\0\u4642\0\u4670\0\u469e\0\u46cc\0\u46fa\0\u4728\0\u4756\0\u4784"+
    "\0\u47b2\0\u47e0\0\u480e\0\u483c\0\u486a\0\u4898\0\u48c6\0\u48f4"+
    "\0\u4922\0\u4950\0\u497e\0\u49ac\0\u49da\0\u4a08\0\u4a36\0\u4a64"+
    "\0\56\0\u4a92\0\u4ac0\0\u4aee\0\u4b1c\0\u4b4a\0\u4b78\0\u4ba6"+
    "\0\u4bd4\0\u4c02\0\u4c30\0\u4c5e\0\u4c8c\0\u4cba\0\u4ce8\0\u4d16"+
    "\0\u4d44\0\u4d72\0\u4da0\0\u4dce\0\u4dfc\0\u4e2a\0\u4e58\0\u4e86"+
    "\0\u4eb4\0\u4ee2\0\u4f10\0\u4f3e\0\u4f6c\0\u4f9a\0\u4fc8\0\u4ff6"+
    "\0\u5024\0\56\0\u5052\0\u5080\0\u50ae\0\u50dc\0\u510a\0\u5138"+
    "\0\u5166\0\u5194\0\u51c2\0\u51f0\0\u521e\0\u524c\0\u527a\0\u52a8"+
    "\0\56\0\u52d6\0\u5304\0\u5332\0\u5360\0\u538e\0\u53bc\0\u53ea"+
    "\0\u5418\0\u5446\0\u5474\0\u54a2\0\u54d0\0\u54fe\0\u552c\0\56"+
    "\0\u555a\0\u5588\0\u55b6\0\u55e4\0\u5612\0\u5640\0\56\0\u566e"+
    "\0\u569c\0\u56ca\0\u56f8\0\u5726\0\u5754\0\u5782\0\u57b0\0\u57de"+
    "\0\u580c\0\u583a\0\56\0\u5868\0\u5896\0\u58c4\0\u58f2\0\u5920"+
    "\0\u594e\0\u597c\0\u59aa\0\u59d8\0\u5a06\0\u5a34\0\u5a62\0\56"+
    "\0\u5a90\0\u5abe\0\u5aec\0\u5b1a\0\u5b48\0\56\0\u5b76\0\u5ba4"+
    "\0\u5bd2\0\u5c00\0\u5c2e\0\u5c5c\0\u5c8a\0\u5cb8\0\u5ce6\0\u5d14"+
    "\0\u5d42\0\u5d70\0\56\0\u5d9e\0\u5dcc\0\u5dfa\0\u5e28\0\u5e56"+
    "\0\56\0\u5e84\0\u5eb2\0\56\0\u5ee0\0\u5f0e\0\u5f3c\0\u5f6a"+
    "\0\56\0\u5f98\0\u5fc6\0\56\0\56\0\u5ff4\0\u6022\0\u6050"+
    "\0\u607e\0\u60ac\0\u60da\0\56\0\u6108\0\u6136\0\u6164\0\u6192"+
    "\0\56\0\u61c0\0\56\0\u61ee\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[597];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\2\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\4\2\1\15\1\16"+
    "\12\2\1\17\3\2\1\20\1\21\1\2\1\22\1\23"+
    "\1\2\1\24\1\2\1\25\3\2\57\0\1\3\70\0"+
    "\1\26\42\0\1\27\2\0\1\30\1\0\1\30\1\0"+
    "\1\31\5\0\1\32\1\33\1\34\1\33\1\35\1\36"+
    "\2\33\1\37\3\33\1\40\1\41\1\42\1\43\1\44"+
    "\1\33\1\45\1\46\3\33\2\0\1\30\3\0\1\47"+
    "\12\0\1\7\47\0\1\50\12\0\1\51\54\0\1\52"+
    "\74\0\1\53\50\0\1\54\24\0\1\54\24\0\1\55"+
    "\55\0\1\56\72\0\1\57\14\0\1\57\2\0\1\27"+
    "\1\0\1\60\12\0\27\27\4\0\1\61\7\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\27\30\2\0"+
    "\1\30\15\0\1\64\1\65\5\0\27\66\12\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\6\33\1\67\11\33\1\70\6\33\2\0\1\30\1\0"+
    "\1\61\5\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\27\33\2\0\1\30\1\0\1\61"+
    "\5\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\1\71\6\33\1\72\3\33\1\73\2\33"+
    "\1\74\10\33\2\0\1\30\1\0\1\61\5\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\13\33\1\75\13\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\4\33\1\76\3\33\1\77\16\33\2\0\1\30"+
    "\1\0\1\61\1\0\1\100\3\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\3\33\1\101"+
    "\11\33\1\102\11\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\16\33\1\103\10\33\2\0\1\30\1\0\1\61"+
    "\5\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\23\33\1\104\3\33\2\0\1\30\1\0"+
    "\1\61\5\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\17\33\1\105\7\33\2\0\1\30"+
    "\1\0\1\61\5\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\1\106\26\33\2\0\1\30"+
    "\1\0\1\61\5\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\1\107\3\33\1\110\22\33"+
    "\2\0\1\30\1\0\1\61\5\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\4\33\1\111"+
    "\3\33\1\112\7\33\1\113\6\33\2\0\1\30\1\0"+
    "\1\61\1\0\1\114\3\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\21\33\1\115\5\33"+
    "\2\0\1\30\1\0\1\61\2\0\1\116\22\0\1\117"+
    "\11\0\1\120\64\0\1\121\46\0\1\122\40\0\1\123"+
    "\75\0\1\124\53\0\1\125\22\0\1\27\14\0\27\27"+
    "\14\0\1\62\4\0\1\63\5\0\27\63\2\0\1\63"+
    "\16\0\1\126\54\0\1\64\1\127\5\0\27\66\14\0"+
    "\1\130\53\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\20\33\1\131\6\33\2\0\1\30"+
    "\1\0\1\61\5\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\4\33\1\132\22\33\2\0"+
    "\1\30\1\0\1\61\5\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\14\33\1\133\12\33"+
    "\2\0\1\30\1\0\1\61\5\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\4\33\1\134"+
    "\22\33\2\0\1\30\1\0\1\61\5\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\1\135"+
    "\26\33\2\0\1\30\1\0\1\61\5\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\13\33"+
    "\1\136\1\137\12\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\10\33\1\140\16\33\2\0\1\30\1\0\1\61"+
    "\1\0\1\141\3\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\2\33\1\142\24\33\2\0"+
    "\1\30\1\0\1\61\5\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\2\33\1\143\10\33"+
    "\1\144\13\33\2\0\1\30\1\0\1\61\24\0\1\145"+
    "\10\0\1\146\25\0\1\27\1\0\1\147\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\27\33\2\0\1\150\1\0"+
    "\1\61\5\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\3\33\1\151\23\33\2\0\1\30"+
    "\1\0\1\61\5\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\3\33\1\152\23\33\2\0"+
    "\1\30\1\0\1\61\5\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\4\33\1\153\22\33"+
    "\2\0\1\30\1\0\1\61\5\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\2\33\1\154"+
    "\24\33\2\0\1\30\1\0\1\61\5\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\20\33"+
    "\1\155\6\33\2\0\1\30\1\0\1\61\5\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\3\33\1\156\23\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\21\33\1\157\5\33\2\0\1\30\1\0\1\61"+
    "\2\0\1\160\2\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\14\33\1\161\10\33\1\162"+
    "\1\33\2\0\1\30\1\0\1\61\5\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\4\33"+
    "\1\163\22\33\2\0\1\30\1\0\1\61\5\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\10\33\1\164\16\33\2\0\1\30\1\0\1\61\1\0"+
    "\1\165\24\0\1\166\34\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\23\33\1\167\3\33"+
    "\2\0\1\30\1\0\1\61\45\0\1\170\17\0\1\147"+
    "\43\0\1\171\27\0\1\172\62\0\1\173\24\0\1\173"+
    "\51\0\1\174\37\0\1\175\63\0\1\176\14\0\1\176"+
    "\34\0\1\177\32\0\1\126\5\0\27\66\20\0\1\64"+
    "\1\200\5\0\27\66\12\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\4\33\1\201\22\33"+
    "\2\0\1\30\1\0\1\61\5\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\1\202\26\33"+
    "\2\0\1\30\1\0\1\61\5\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\17\33\1\203"+
    "\7\33\2\0\1\30\1\0\1\61\5\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\2\33"+
    "\1\204\24\33\2\0\1\30\1\0\1\61\5\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\21\33\1\205\5\33\2\0\1\30\1\0\1\61\2\0"+
    "\1\206\2\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\23\33\1\207\3\33\2\0\1\30"+
    "\1\0\1\61\5\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\1\33\1\210\25\33\2\0"+
    "\1\30\1\0\1\61\5\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\14\33\1\211\12\33"+
    "\2\0\1\30\1\0\1\61\36\0\1\212\24\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\7\33\1\213\17\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\7\33\1\214\17\33\2\0\1\30\1\0\1\61"+
    "\5\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\1\215\26\33\2\0\1\30\1\0\1\61"+
    "\31\0\1\216\46\0\1\217\42\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\22\30\1\220\4\30\2\0"+
    "\1\30\7\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\10\33\1\221\16\33\2\0\1\30"+
    "\1\0\1\61\1\0\1\222\3\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\10\33\1\223"+
    "\16\33\2\0\1\30\1\0\1\61\1\0\1\224\3\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\24\33\1\225\2\33\2\0\1\30\1\0\1\61"+
    "\5\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\10\33\1\226\16\33\2\0\1\30\1\0"+
    "\1\61\1\0\1\227\3\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\1\230\26\33\2\0"+
    "\1\30\1\0\1\61\5\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\10\33\1\231\16\33"+
    "\2\0\1\30\1\0\1\61\1\0\1\232\3\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\17\33\1\233\7\33\2\0\1\30\1\0\1\61\41\0"+
    "\1\234\21\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\1\235\26\33\2\0\1\30\1\0"+
    "\1\61\5\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\22\33\1\236\4\33\2\0\1\30"+
    "\1\0\1\61\5\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\14\33\1\237\12\33\2\0"+
    "\1\30\1\0\1\61\5\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\24\33\1\240\2\33"+
    "\2\0\1\30\1\0\1\61\46\0\1\241\45\0\1\242"+
    "\24\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\1\243\26\33\2\0\1\30\1\0\1\61"+
    "\22\0\1\244\77\0\1\245\43\0\1\222\24\0\1\222"+
    "\36\0\1\246\43\0\1\247\14\0\1\250\14\0\1\250"+
    "\27\0\1\251\24\0\1\251\30\0\1\252\24\0\1\252"+
    "\10\0\1\253\1\64\1\254\5\0\27\66\12\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\6\33\1\255\20\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\27\33\2\0\1\256\1\0\1\61\5\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\16\33\1\257\10\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\12\33\1\260\14\33\2\0\1\30\1\0\1\61"+
    "\3\0\1\261\1\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\4\33\1\262\22\33\2\0"+
    "\1\30\1\0\1\61\26\0\1\263\34\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\14\33"+
    "\1\264\12\33\2\0\1\30\1\0\1\61\5\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\16\33\1\265\10\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\10\33\1\266\16\33\2\0\1\30\1\0\1\61"+
    "\1\0\1\267\30\0\1\267\24\0\1\267\3\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\1\270\26\33\2\0\1\30\1\0\1\61\5\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\4\33\1\271\22\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\21\33\1\272\5\33\2\0\1\30\1\0\1\61"+
    "\2\0\1\273\23\0\1\274\72\0\1\273\14\0\1\273"+
    "\4\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\20\30\1\275\6\30\2\0\1\30\7\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\2\33"+
    "\1\276\24\33\2\0\1\30\1\0\1\61\24\0\1\277"+
    "\36\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\5\33\1\300\21\33\2\0\1\30\1\0"+
    "\1\61\27\0\1\301\33\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\1\302\26\33\2\0"+
    "\1\30\1\0\1\61\5\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\16\33\1\303\10\33"+
    "\2\0\1\30\1\0\1\61\40\0\1\304\22\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\14\33\1\305\12\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\16\33\1\306\10\33\2\0\1\30\1\0\1\61"+
    "\40\0\1\307\22\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\23\33\1\310\3\33\2\0"+
    "\1\30\1\0\1\61\45\0\1\311\15\0\1\27\1\0"+
    "\1\312\1\30\1\0\1\30\1\0\1\63\5\0\27\33"+
    "\2\0\1\30\1\0\1\61\5\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\16\33\1\313"+
    "\10\33\2\0\1\30\1\0\1\61\5\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\17\33"+
    "\1\314\7\33\2\0\1\30\1\0\1\61\5\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\10\33\1\315\16\33\2\0\1\30\1\0\1\61\1\0"+
    "\1\316\30\0\1\316\24\0\1\316\37\0\1\317\21\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\20\33\1\320\6\33\2\0\1\30\1\0\1\61"+
    "\42\0\1\321\55\0\1\322\66\0\1\323\41\0\1\324"+
    "\56\0\1\325\65\0\1\326\45\0\1\327\31\0\1\330"+
    "\54\0\1\64\1\254\5\0\27\66\12\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\1\331"+
    "\26\33\2\0\1\30\1\0\1\61\7\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\22\30\1\332\4\30"+
    "\2\0\1\30\7\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\27\33\2\0\1\333\1\0"+
    "\1\61\5\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\1\33\1\334\25\33\2\0\1\30"+
    "\1\0\1\61\23\0\1\335\37\0\1\27\1\0\1\336"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\27\33\2\0"+
    "\1\30\1\0\1\61\7\0\1\336\53\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\15\33"+
    "\1\144\11\33\2\0\1\30\1\0\1\61\5\0\1\27"+
    "\1\0\1\337\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\27\33\2\0\1\30\1\0\1\61\5\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\15\33"+
    "\1\340\11\33\2\0\1\30\1\0\1\61\37\0\1\341"+
    "\23\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\27\33\2\0\1\342\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\20\33\1\343\6\33\2\0\1\30\1\0\1\61"+
    "\5\0\1\27\1\0\1\344\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\27\33\2\0\1\30\1\0\1\61\7\0"+
    "\1\344\110\0\1\345\22\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\10\30\1\346\16\30\2\0\1\30"+
    "\3\0\1\347\3\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\4\33\1\350\22\33\2\0"+
    "\1\30\1\0\1\61\26\0\1\351\34\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\10\33"+
    "\1\352\16\33\2\0\1\30\1\0\1\61\1\0\1\353"+
    "\30\0\1\353\24\0\1\353\3\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\27\33\2\0"+
    "\1\354\1\0\1\61\5\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\15\33\1\355\11\33"+
    "\2\0\1\30\1\0\1\61\37\0\1\356\23\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\4\33\1\357\22\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\360\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\27\33\2\0\1\30\1\0\1\61\7\0\1\360"+
    "\53\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\4\33\1\361\22\33\2\0\1\30\1\0"+
    "\1\61\26\0\1\362\34\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\27\33\2\0\1\363"+
    "\1\0\1\61\5\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\16\33\1\364\10\33\2\0"+
    "\1\30\1\0\1\61\5\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\1\365\26\33\2\0"+
    "\1\30\1\0\1\61\22\0\1\366\73\0\1\367\22\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\10\33\1\370\16\33\2\0\1\30\1\0\1\61"+
    "\1\0\1\371\30\0\1\371\24\0\1\371\30\0\1\347"+
    "\24\0\1\347\40\0\1\372\61\0\1\373\44\0\1\374"+
    "\42\0\1\375\72\0\1\376\32\0\1\377\46\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\20\33\1\u0100\6\33\2\0\1\30\1\0\1\61\7\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\4\30"+
    "\1\u0101\22\30\2\0\1\30\11\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\22\30\1\u0102\4\30\2\0"+
    "\1\30\7\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\16\33\1\u0103\10\33\2\0\1\30"+
    "\1\0\1\61\40\0\1\u0104\22\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\1\u0105\26\33"+
    "\2\0\1\30\1\0\1\61\22\0\1\u0106\42\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\2\30\1\u0107"+
    "\11\30\1\u0108\12\30\2\0\1\30\7\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\16\33"+
    "\1\u0109\10\33\2\0\1\30\1\0\1\61\40\0\1\u010a"+
    "\24\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\24\30\1\u010b\2\30\2\0\1\30\50\0\1\u010c\14\0"+
    "\1\27\1\0\1\u010d\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\27\33\2\0\1\30\1\0\1\61\7\0\1\u010d"+
    "\53\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\2\33\1\u010e\24\33\2\0\1\30\1\0"+
    "\1\61\24\0\1\u010f\40\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\22\30\1\u0110\4\30\2\0\1\30"+
    "\7\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\4\33\1\u0111\22\33\2\0\1\30\1\0"+
    "\1\61\26\0\1\u0112\34\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\22\33\1\u0113\4\33"+
    "\2\0\1\30\1\0\1\61\5\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\21\33\1\u0114"+
    "\5\33\2\0\1\30\1\0\1\61\2\0\1\u0115\40\0"+
    "\1\u0115\14\0\1\u0115\4\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\24\30\1\u0116\2\30\2\0\1\30"+
    "\7\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\27\33\2\0\1\u0117\1\0\1\61\5\0"+
    "\1\27\1\0\1\u0118\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\27\33\2\0\1\30\1\0\1\61\7\0\1\u0118"+
    "\121\0\1\u0119\7\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\16\33\1\u011a\10\33\2\0"+
    "\1\30\1\0\1\61\40\0\1\u011b\43\0\1\u011c\61\0"+
    "\1\u011d\24\0\1\u011d\30\0\1\u011e\24\0\1\u011e\40\0"+
    "\1\u011f\25\0\1\u0120\50\0\1\27\1\0\1\60\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\27\33\2\0\1\u0121"+
    "\1\0\1\61\7\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\25\30\1\u0122\1\30\2\0\1\30\11\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\4\30"+
    "\1\u0123\22\30\2\0\1\30\7\0\1\27\1\0\1\60"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\25\33\1\u0124"+
    "\1\33\2\0\1\30\1\0\1\61\47\0\1\u0125\13\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\20\33\1\u0126\6\33\2\0\1\30\1\0\1\61"+
    "\42\0\1\u0127\22\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\20\30\1\u0128\6\30\2\0\1\30\11\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\16\30"+
    "\1\u0129\10\30\2\0\1\30\7\0\1\27\1\0\1\u012a"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\27\33\2\0"+
    "\1\30\1\0\1\61\7\0\1\u012a\55\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\10\30\1\u012b\16\30"+
    "\2\0\1\30\3\0\1\u012c\30\0\1\u012c\24\0\1\u012c"+
    "\3\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\1\u012d\26\33\2\0\1\30\1\0\1\61"+
    "\22\0\1\u012e\42\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\20\30\1\u012f\6\30\2\0\1\30\7\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\21\33\1\u0130\5\33\2\0\1\30\1\0\1\61"+
    "\2\0\1\u0131\40\0\1\u0131\14\0\1\u0131\2\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\20\33\1\u0132\6\33\2\0\1\30\1\0\1\61\5\0"+
    "\1\27\1\0\1\60\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\22\33\1\u0133\4\33\2\0\1\30\1\0\1\61"+
    "\44\0\1\u0134\20\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\10\30\1\u0135\16\30\2\0\1\30\3\0"+
    "\1\u0136\5\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\17\30\1\u0137\7\30\2\0\1\30\43\0\1\u0138"+
    "\21\0\1\27\1\0\1\60\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\27\33\2\0\1\u0139\1\0\1\61\53\0"+
    "\1\u013a\45\0\1\u013b\14\0\1\u013b\35\0\1\u013c\41\0"+
    "\1\u013d\104\0\1\u013e\16\0\1\u013f\50\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\2\30\1\u0140\24\30"+
    "\2\0\1\30\11\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\22\30\1\u0141\4\30\2\0\1\30\11\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\25\30"+
    "\1\u0142\1\30\2\0\1\30\7\0\1\27\1\0\1\u0143"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\27\33\2\0"+
    "\1\30\1\0\1\61\7\0\1\u0143\53\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\27\33"+
    "\2\0\1\u0144\1\0\1\61\53\0\1\u0145\11\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\4\30\1\u0146"+
    "\22\30\2\0\1\30\11\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\3\30\1\u0147\23\30\2\0\1\30"+
    "\11\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\1\u0148\26\30\2\0\1\30\24\0\1\u0149\40\0\1\27"+
    "\1\0\1\60\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\20\33\1\u014a\6\33\2\0\1\30\1\0\1\61\42\0"+
    "\1\u014b\22\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\10\30\1\u014c\16\30\2\0\1\30\3\0\1\u014d"+
    "\3\0\1\27\1\0\1\u014e\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\27\33\2\0\1\30\1\0\1\61\7\0"+
    "\1\u014e\53\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\16\33\1\u014f\10\33\2\0\1\30"+
    "\1\0\1\61\5\0\1\27\1\0\1\60\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\1\u0150\26\33\2\0\1\30"+
    "\1\0\1\61\22\0\1\u0151\42\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\21\30\1\u0152\5\30\2\0"+
    "\1\30\4\0\1\u0153\40\0\1\u0153\14\0\1\u0153\4\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\20\30"+
    "\1\u0154\6\30\2\0\1\30\44\0\1\u0155\22\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\2\30\1\u0156"+
    "\24\30\2\0\1\30\26\0\1\u0157\72\0\1\u0158\67\0"+
    "\1\u0159\34\0\1\u015a\24\0\1\u015a\41\0\1\u015b\14\0"+
    "\1\u015b\11\0\1\u015c\50\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\16\30\1\u015d\10\30\2\0\1\30"+
    "\11\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\16\30\1\u015e\10\30\2\0\1\30\11\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\22\30\1\u015f\4\30"+
    "\2\0\1\30\11\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\2\30\1\u0160\17\30\1\u0161\4\30\2\0"+
    "\1\30\26\0\1\u0162\17\0\1\u0163\20\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\1\u0164\26\30\2\0"+
    "\1\30\11\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\10\30\1\u0165\16\30\2\0\1\30\3\0\1\u0166"+
    "\5\0\1\u0167\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\27\30\2\0\1\30\11\0\1\u0167\53\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\27\33"+
    "\2\0\1\u0168\1\0\1\61\53\0\1\u0169\11\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\24\30\1\u016a"+
    "\2\30\2\0\1\30\50\0\1\u016b\14\0\1\27\1\0"+
    "\1\60\1\30\1\0\1\30\1\0\1\63\5\0\21\33"+
    "\1\u016c\5\33\2\0\1\30\1\0\1\61\2\0\1\u016d"+
    "\2\0\1\27\1\0\1\u016e\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\27\33\2\0\1\30\1\0\1\61\7\0"+
    "\1\u016e\55\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\10\30\1\u016f\16\30\2\0\1\30\3\0\1\u0170"+
    "\30\0\1\u0170\24\0\1\u0170\5\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\4\30\1\u0171\22\30\2\0"+
    "\1\30\30\0\1\u0172\36\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\20\30\1\u0173\6\30\2\0\1\30"+
    "\44\0\1\u0174\60\0\1\u0175\52\0\1\u0176\57\0\1\u0177"+
    "\51\0\1\u0178\24\0\1\u0179\55\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\14\30\1\u017a\12\30\2\0"+
    "\1\30\11\0\1\u017b\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\27\30\2\0\1\30\11\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\16\30\1\u017c\10\30\2\0"+
    "\1\30\11\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\16\30\1\u017d\10\30\2\0\1\30\11\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\20\30\1\u017e"+
    "\6\30\2\0\1\30\42\0\1\u017f\57\0\1\u0180\22\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\2\30"+
    "\1\u0181\24\30\2\0\1\30\11\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\5\30\1\u0182\21\30\2\0"+
    "\1\30\31\0\1\u0183\35\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\2\30\1\u0184\17\30\1\u0185\4\30"+
    "\2\0\1\30\26\0\1\u0186\17\0\1\u0187\20\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\10\30\1\u0188"+
    "\16\30\2\0\1\30\3\0\1\u0189\30\0\1\u0189\24\0"+
    "\1\u0189\3\0\1\27\1\0\1\60\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\27\33\2\0\1\u018a\1\0\1\61"+
    "\53\0\1\u018b\11\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\1\30\1\u018c\25\30\2\0\1\30\25\0"+
    "\1\u018d\41\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\6\30\1\u018e\20\30\2\0\1\30\32\0\1\u018f"+
    "\34\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\4\30\1\u0190\22\30\2\0\1\30\30\0\1\u0191\55\0"+
    "\1\u0192\55\0\1\u0193\74\0\1\u0194\45\0\1\u0195\27\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\17\30"+
    "\1\u0196\7\30\2\0\1\30\11\0\1\u0197\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\27\30\2\0\1\30\11\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\14\30"+
    "\1\u0198\12\30\2\0\1\30\11\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\10\30\1\u0199\16\30\2\0"+
    "\1\30\3\0\1\u019a\34\0\1\u019b\51\0\1\u019a\24\0"+
    "\1\u019a\5\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\10\30\1\u019c\16\30\2\0\1\30\3\0\1\u019d"+
    "\5\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\10\30\1\u019e\16\30\2\0\1\30\3\0\1\u019f\30\0"+
    "\1\u019f\24\0\1\u019f\5\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\16\30\1\u01a0\10\30\2\0\1\30"+
    "\11\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\20\30\1\u01a1\6\30\2\0\1\30\42\0\1\u01a2\57\0"+
    "\1\u01a3\22\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\1\u01a4\26\30\2\0\1\30\24\0\1\u01a5\42\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\2\30"+
    "\1\u01a6\17\30\1\u01a7\4\30\2\0\1\30\26\0\1\u01a8"+
    "\17\0\1\u01a9\20\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\13\30\1\u01aa\13\30\2\0\1\30\37\0"+
    "\1\u01ab\27\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\23\30\1\u01ac\3\30\2\0\1\30\47\0\1\u01ad"+
    "\17\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\1\u01ae\26\30\2\0\1\30\24\0\1\u01af\76\0\1\u01b0"+
    "\14\0\1\u01b0\40\0\1\u01b1\14\0\1\u01b1\22\0\1\u01b2"+
    "\62\0\1\u01b3\24\0\1\u01b3\5\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\16\30\1\u01b4\10\30\2\0"+
    "\1\30\11\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\17\30\1\u01b5\7\30\2\0\1\30\11\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\24\30\1\u01b6"+
    "\2\30\2\0\1\30\50\0\1\u01b7\50\0\1\u01b8\23\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\16\30"+
    "\1\u01b9\10\30\2\0\1\30\42\0\1\u01ba\24\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\2\30\1\u01bb"+
    "\24\30\2\0\1\30\26\0\1\u01bc\40\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\14\30\1\u01bd\12\30"+
    "\2\0\1\30\11\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\10\30\1\u01be\16\30\2\0\1\30\3\0"+
    "\1\u01bf\34\0\1\u01c0\51\0\1\u01bf\24\0\1\u01bf\5\0"+
    "\1\u01c1\1\30\1\0\1\30\1\0\1\63\5\0\27\30"+
    "\2\0\1\30\11\0\1\u01c1\55\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\16\30\1\u01c2\10\30\2\0"+
    "\1\30\11\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\20\30\1\u01c3\6\30\2\0\1\30\42\0\1\u01c4"+
    "\57\0\1\u01c5\22\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\4\30\1\u01c6\22\30\2\0\1\30\30\0"+
    "\1\u01c7\36\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\15\30\1\u01c8\11\30\2\0\1\30\41\0\1\u01c9"+
    "\25\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\2\30\1\u01ca\24\30\2\0\1\30\26\0\1\u01cb\75\0"+
    "\1\u01cc\52\0\1\u01cd\42\0\1\u01ce\24\0\1\u01cf\26\0"+
    "\1\u01d0\40\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\15\30\1\u01d1\11\30\2\0\1\30\11\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\16\30\1\u01d2"+
    "\10\30\2\0\1\30\11\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\10\30\1\u01d3\16\30\2\0\1\30"+
    "\3\0\1\u01d4\30\0\1\u01d4\24\0\1\u01d4\36\0\1\u01d5"+
    "\24\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\15\30\1\u01d6\11\30\2\0\1\30\41\0\1\u01d7\25\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\1\u01d8"+
    "\26\30\2\0\1\30\24\0\1\u01d9\42\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\17\30\1\u01da\7\30"+
    "\2\0\1\30\11\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\24\30\1\u01db\2\30\2\0\1\30\50\0"+
    "\1\u01dc\50\0\1\u01dd\23\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\14\30\1\u01de\12\30\2\0\1\30"+
    "\11\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\10\30\1\u01df\16\30\2\0\1\30\3\0\1\u01e0\34\0"+
    "\1\u01e1\51\0\1\u01e0\24\0\1\u01e0\5\0\1\u01e2\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\27\30\2\0\1\30"+
    "\11\0\1\u01e2\55\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\22\30\1\u01e3\4\30\2\0\1\30\46\0"+
    "\1\u01e4\20\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\10\30\1\u01e5\16\30\2\0\1\30\3\0\1\u01e6"+
    "\30\0\1\u01e6\24\0\1\u01e6\20\0\1\u01e7\100\0\1\u01e8"+
    "\53\0\1\u01e9\14\0\1\u01e9\37\0\1\u01ea\45\0\1\u01eb"+
    "\24\0\1\u01eb\5\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\4\30\1\u01ec\22\30\2\0\1\30\11\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\15\30"+
    "\1\u01ed\11\30\2\0\1\30\11\0\1\62\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\1\u01ee\26\30\2\0\1\30"+
    "\24\0\1\u01ef\72\0\1\u01f0\25\0\1\u01f1\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\27\30\2\0\1\30\11\0"+
    "\1\u01f1\55\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\2\30\1\u01f2\24\30\2\0\1\30\26\0\1\u01f3"+
    "\40\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\16\30\1\u01f4\10\30\2\0\1\30\11\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\10\30\1\u01f5\16\30"+
    "\2\0\1\30\3\0\1\u01f6\30\0\1\u01f6\24\0\1\u01f6"+
    "\36\0\1\u01f7\24\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\17\30\1\u01f8\7\30\2\0\1\30\11\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\24\30"+
    "\1\u01f9\2\30\2\0\1\30\50\0\1\u01fa\50\0\1\u01fb"+
    "\23\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\1\u01fc\26\30\2\0\1\30\24\0\1\u01fd\42\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\16\30\1\u01fe"+
    "\10\30\2\0\1\30\42\0\1\u01ff\60\0\1\u0200\14\0"+
    "\1\u0200\23\0\1\u0201\102\0\1\u0202\30\0\1\u0203\73\0"+
    "\1\u0204\20\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\15\30\1\u0205\11\30\2\0\1\30\11\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\4\30\1\u0206"+
    "\22\30\2\0\1\30\11\0\1\u0207\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\27\30\2\0\1\30\11\0\1\u0207"+
    "\74\0\1\u0208\36\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\10\30\1\u0209\16\30\2\0\1\30\3\0"+
    "\1\u020a\30\0\1\u020a\24\0\1\u020a\5\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\15\30\1\u020b\11\30"+
    "\2\0\1\30\11\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\1\u020c\26\30\2\0\1\30\24\0\1\u020d"+
    "\72\0\1\u020e\25\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\16\30\1\u020f\10\30\2\0\1\30\11\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\10\30"+
    "\1\u0210\16\30\2\0\1\30\3\0\1\u0211\30\0\1\u0211"+
    "\24\0\1\u0211\36\0\1\u0212\24\0\1\u0213\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\27\30\2\0\1\30\11\0"+
    "\1\u0213\55\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\15\30\1\u0214\11\30\2\0\1\30\41\0\1\u0215"+
    "\61\0\1\u0216\14\0\1\u0216\37\0\1\u0217\35\0\1\u0218"+
    "\100\0\1\u0219\17\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\22\30\1\u021a\4\30\2\0\1\30\11\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\15\30"+
    "\1\u021b\11\30\2\0\1\30\41\0\1\u021c\25\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\16\30\1\u021d"+
    "\10\30\2\0\1\30\42\0\1\u021e\24\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\4\30\1\u021f\22\30"+
    "\2\0\1\30\11\0\1\u0220\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\27\30\2\0\1\30\11\0\1\u0220\74\0"+
    "\1\u0221\36\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\15\30\1\u0222\11\30\2\0\1\30\11\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\1\u0223\26\30"+
    "\2\0\1\30\24\0\1\u0224\72\0\1\u0225\25\0\1\u0226"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\27\30\2\0"+
    "\1\30\11\0\1\u0226\112\0\1\u0227\37\0\1\u0228\64\0"+
    "\1\u0229\45\0\1\u022a\37\0\1\62\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\4\30\1\u022b\22\30\2\0\1\30"+
    "\11\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\22\30\1\u022c\4\30\2\0\1\30\46\0\1\u022d\20\0"+
    "\1\62\1\30\1\0\1\30\1\0\1\63\5\0\15\30"+
    "\1\u022e\11\30\2\0\1\30\41\0\1\u022f\25\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\15\30\1\u0230"+
    "\11\30\2\0\1\30\41\0\1\u0231\25\0\1\62\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\4\30\1\u0232\22\30"+
    "\2\0\1\30\11\0\1\u0233\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\27\30\2\0\1\30\11\0\1\u0233\74\0"+
    "\1\u0234\51\0\1\u0235\55\0\1\u0236\65\0\1\u0237\24\0"+
    "\1\u0237\24\0\1\u0238\36\0\1\u0239\1\30\1\0\1\30"+
    "\1\0\1\63\5\0\27\30\2\0\1\30\11\0\1\62"+
    "\1\30\1\0\1\30\1\0\1\63\5\0\4\30\1\u023a"+
    "\22\30\2\0\1\30\30\0\1\u023b\36\0\1\u023c\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\27\30\2\0\1\30"+
    "\11\0\1\u023c\55\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\22\30\1\u023d\4\30\2\0\1\30\46\0"+
    "\1\u023e\20\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\15\30\1\u023f\11\30\2\0\1\30\41\0\1\u0240"+
    "\61\0\1\u0241\14\0\1\u0241\32\0\1\u0242\70\0\1\u0243"+
    "\50\0\1\u0244\14\0\1\u0244\4\0\1\u0245\1\30\1\0"+
    "\1\30\1\0\1\63\5\0\27\30\2\0\1\30\11\0"+
    "\1\u0245\55\0\1\62\1\30\1\0\1\30\1\0\1\63"+
    "\5\0\4\30\1\u0246\22\30\2\0\1\30\30\0\1\u0247"+
    "\36\0\1\62\1\30\1\0\1\30\1\0\1\63\5\0"+
    "\22\30\1\u0248\4\30\2\0\1\30\46\0\1\u0249\43\0"+
    "\1\u024a\24\0\1\u024a\20\0\1\u024b\42\0\1\u024c\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\27\30\2\0\1\30"+
    "\11\0\1\u024c\55\0\1\62\1\30\1\0\1\30\1\0"+
    "\1\63\5\0\4\30\1\u024d\22\30\2\0\1\30\30\0"+
    "\1\u024e\77\0\1\u024f\32\0\1\u0250\37\0\1\u0251\1\30"+
    "\1\0\1\30\1\0\1\63\5\0\27\30\2\0\1\30"+
    "\11\0\1\u0251\70\0\1\u0252\55\0\1\u0253\60\0\1\u0254"+
    "\52\0\1\u0255\37\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25116];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\6\1\5\11\21\0\3\11\5\0\1\11\1\0\1\11"+
    "\45\0\1\11\16\0\1\11\27\0\1\11\112\0\1\11"+
    "\23\0\2\11\4\0\1\11\13\0\1\11\15\0\1\11"+
    "\16\0\1\11\12\0\1\11\21\0\1\11\30\0\1\11"+
    "\12\0\1\11\30\0\1\11\6\0\1\11\12\0\1\11"+
    "\1\0\1\11\33\0\1\11\51\0\1\11\40\0\1\11"+
    "\4\0\1\1\11\0\1\11\16\0\1\11\6\0\1\11"+
    "\13\0\1\11\14\0\1\11\5\0\1\11\3\0\1\1"+
    "\10\0\1\11\1\0\1\1\3\0\1\11\2\0\1\11"+
    "\4\0\1\11\2\0\2\11\6\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[597];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
        StringBuffer stringBuffer = new StringBuffer();
        ArrayList<ErrorL> errors = new ArrayList<ErrorL>();

        private Symbol symbol(int type){
            return new Symbol(type, yyline+1, yycolumn+1);
        }

        private Symbol symbol(int type, Object value){
            return new Symbol(type, yyline+1, yycolumn+1, value);
        }

        public ArrayList<ErrorL> getErrorsLexicos(){
            return this.errors;
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errors.add(new ErrorL(yytext(), yyline, yycolumn, "Error Lexico", "No coincide este caracter"));
            }
          // fall through
          case 59: break;
          case 2:
            { /*ignore*/
            }
          // fall through
          case 60: break;
          case 3:
            { return new Symbol(ParserSym.COMMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 4:
            { return new Symbol(ParserSym.NUMBER, yyline, yycolumn, yytext());
            }
          // fall through
          case 62: break;
          case 5:
            { return new Symbol(ParserSym.COLON, yyline, yycolumn, yytext());
            }
          // fall through
          case 63: break;
          case 6:
            { return new Symbol(ParserSym.LESST, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 7:
            { return new Symbol(ParserSym.EQUALS, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 8:
            { return new Symbol(ParserSym.GREATERT, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 9:
            { return new Symbol(ParserSym.BRACKETA, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 10:
            { return new Symbol(ParserSym.BRACKETC, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 11:
            { return new Symbol(ParserSym.KEYA, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 12:
            { return new Symbol(ParserSym.KEYC, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 13:
            { return new Symbol(ParserSym.ENDREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 14:
            { return new Symbol(ParserSym.OPENREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 15:
            { return new Symbol(ParserSym.OPENXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 16:
            { return new Symbol(ParserSym.ENDXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 17:
            { return new Symbol(ParserSym.OPTIONSRESPONSES, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 18:
            { return new Symbol(ParserSym.TEXT, yyline, yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 19:
            { return new Symbol(ParserSym.NUMBERVERSION, yyline, yycolumn, yytext());
            }
          // fall through
          case 77: break;
          case 20:
            { return new Symbol(ParserSym.ID, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 21:
            { return new Symbol(ParserSym.XSON, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 22:
            { return new Symbol(ParserSym.THEME, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 23:
            { return new Symbol(ParserSym.CLASSTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 24:
            { return new Symbol(ParserSym.COMBO, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 25:
            { return new Symbol(ParserSym.COLUMN, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 26:
            { return new Symbol(ParserSym.RADIO, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 27:
            { return new Symbol(ParserSym.VERSION, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 28:
            { return new Symbol(ParserSym.INDEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 29:
            { return new Symbol(ParserSym.TRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 30:
            { return new Symbol(ParserSym.CARDINEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 31:
            { return new Symbol(ParserSym.CHECKBOX, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 32:
            { return new Symbol(ParserSym.OPTIONS, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 33:
            { return new Symbol(ParserSym.IDTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 91: break;
          case 34:
            { return new Symbol(ParserSym.RESPONSETRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 35:
            { return new Symbol(ParserSym.DATECREATION, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 36:
            { return new Symbol(ParserSym.TEXTAREA, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 37:
            { return new Symbol(ParserSym.TEXTFIELD, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 38:
            { return new Symbol(ParserSym.NEWTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 39:
            { return new Symbol(ParserSym.TXTVISIBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 40:
            { return new Symbol(ParserSym.INRESPONSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 41:
            { return new Symbol(ParserSym.DATE, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 42:
            { return new Symbol(ParserSym.INITRESPONSES, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          case 43:
            { return new Symbol(ParserSym.DELETETRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 101: break;
          case 44:
            { return new Symbol(ParserSym.TIMEQUESTION, yycolumn, yyline, yytext());
            }
          // fall through
          case 102: break;
          case 45:
            { return new Symbol(ParserSym.EDITTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 103: break;
          case 46:
            { return new Symbol(ParserSym.USERCREATOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 104: break;
          case 47:
            { return new Symbol(ParserSym.INREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 105: break;
          case 48:
            { return new Symbol(ParserSym.PARAMETERSTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 106: break;
          case 49:
            { return new Symbol(ParserSym.EDRESPONSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 107: break;
          case 50:
            { return new Symbol(ParserSym.ADDCOMPONENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 108: break;
          case 51:
            { return new Symbol(ParserSym.DATEEDIT, yycolumn, yyline, yytext());
            }
          // fall through
          case 109: break;
          case 52:
            { return new Symbol(ParserSym.ENDRESPONSES, yycolumn, yyline, yytext());
            }
          // fall through
          case 110: break;
          case 53:
            { return new Symbol(ParserSym.INITREQUESTS, yycolumn, yyline, yytext());
            }
          // fall through
          case 111: break;
          case 54:
            { return new Symbol(ParserSym.DELETECOMPONENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 112: break;
          case 55:
            { return new Symbol(ParserSym.EDITCOMPONENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 113: break;
          case 56:
            { return new Symbol(ParserSym.PARAMETERSCOMPONENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 114: break;
          case 57:
            { return new Symbol(ParserSym.EDREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 115: break;
          case 58:
            { return new Symbol(ParserSym.ENDREQUESTS, yycolumn, yyline, yytext());
            }
          // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
