// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: UserFlex.flex

package user.servidor.Flex;

import java_cup.runtime.*;
import java.util.ArrayList;
import user.servidor.Cup.UserParserSym;
import user.servidor.Errors.ErrorL;


@SuppressWarnings("fallthrough")
public class UserFlex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\17\u0200\1\u0500"+
    "\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\0\1\4"+
    "\7\0\1\5\1\6\1\7\1\0\12\10\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\2\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\27\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\27\1\44\1\45\1\0"+
    "\1\46\1\0\1\47\1\0\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\27\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\27\1\44\1\50\1\0\1\51"+
    "\7\0\1\1\32\0\1\1\217\0\2\52\115\0\1\53"+
    "\u0200\0\1\1\177\0\13\1\21\0\2\3\12\0\2\1"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\1\2\1\3\1\4\1\5\1\6\5\1"+
    "\1\7\1\10\1\11\1\12\1\13\13\0\1\14\1\15"+
    "\1\16\4\0\1\17\44\0\1\20\70\0\1\21\13\0"+
    "\1\22\25\0\1\23\21\0\1\24\32\0\1\25\33\0"+
    "\1\26\35\0\1\27\14\0\1\30\5\0\1\31\4\0"+
    "\1\32\13\0\1\33\3\0\1\34\6\0\1\35\2\0"+
    "\1\36\3\0\1\37\2\0\1\35\5\0\1\40\1\0"+
    "\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\54\0\54\0\334"+
    "\0\54\0\54\0\u0108\0\u0134\0\u0160\0\u018c\0\u01b8\0\54"+
    "\0\54\0\54\0\54\0\54\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\54"+
    "\0\54\0\54\0\u03c8\0\u03f4\0\u0420\0\u044c\0\54\0\u0478"+
    "\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8"+
    "\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738"+
    "\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8"+
    "\0\u0a24\0\u0a50\0\u0a7c\0\54\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c"+
    "\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec"+
    "\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c"+
    "\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac"+
    "\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c"+
    "\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c"+
    "\0\u1398\0\u13c4\0\u13f0\0\u141c\0\54\0\u1448\0\u1474\0\u14a0"+
    "\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600"+
    "\0\54\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734"+
    "\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894"+
    "\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\54\0\u19c8"+
    "\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28"+
    "\0\u1b54\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88"+
    "\0\54\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc"+
    "\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c"+
    "\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c"+
    "\0\u20a8\0\u20d4\0\u2100\0\54\0\u212c\0\u2158\0\u2184\0\u21b0"+
    "\0\u21dc\0\u2208\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310"+
    "\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470"+
    "\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578\0\u25a4\0\54"+
    "\0\u25d0\0\u25fc\0\u2628\0\u2654\0\u2680\0\u26ac\0\u26d8\0\u2704"+
    "\0\u2730\0\u275c\0\u2788\0\u27b4\0\u27e0\0\u280c\0\u2838\0\u2864"+
    "\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4"+
    "\0\u29f0\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0\0\54\0\u2acc\0\u2af8"+
    "\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58"+
    "\0\u2c84\0\u2cb0\0\54\0\u2cdc\0\u2d08\0\u2d34\0\u2d60\0\u2d8c"+
    "\0\54\0\u2db8\0\u2de4\0\u2e10\0\u2e3c\0\54\0\u2e68\0\u2e94"+
    "\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4"+
    "\0\u3020\0\54\0\u304c\0\u3078\0\u30a4\0\54\0\u30d0\0\u30fc"+
    "\0\u3128\0\u3154\0\u3180\0\u31ac\0\u31d8\0\u3204\0\u3230\0\54"+
    "\0\u325c\0\u3288\0\u32b4\0\54\0\u32e0\0\u330c\0\54\0\u3338"+
    "\0\u3364\0\u3390\0\u33bc\0\u33e8\0\54\0\u3414\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\3\2\1\7"+
    "\1\10\1\11\1\12\1\13\5\2\1\14\11\2\1\15"+
    "\3\2\1\16\1\2\1\17\1\2\1\20\1\21\1\2"+
    "\1\22\1\23\2\2\55\0\1\3\66\0\1\24\43\0"+
    "\1\25\1\0\1\25\1\0\1\26\5\0\3\25\1\27"+
    "\1\30\1\31\2\25\1\32\2\25\1\33\1\34\1\25"+
    "\1\35\3\25\1\36\4\25\2\0\1\25\2\0\1\37"+
    "\3\0\1\40\12\0\1\41\52\0\1\42\65\0\1\43"+
    "\23\0\1\43\23\0\1\44\53\0\1\45\67\0\1\46"+
    "\14\0\1\46\3\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\27\25\2\0\1\25\7\0\1\47\3\0"+
    "\1\51\1\52\46\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\1\53\26\25\2\0\1\25\7\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\12\25\1\54"+
    "\14\25\2\0\1\25\7\0\1\47\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\4\25\1\55\22\25\2\0\1\25"+
    "\7\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\14\25\1\56\12\25\2\0\1\25\7\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\15\25\1\57\11\25"+
    "\2\0\1\25\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\15\25\1\60\4\25\1\61\4\25\2\0"+
    "\1\25\7\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\1\62\26\25\2\0\1\25\7\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\20\25\1\63\6\25"+
    "\2\0\1\25\3\0\1\64\32\0\1\65\53\0\1\66"+
    "\37\0\1\67\72\0\1\70\51\0\1\71\23\0\1\47"+
    "\4\0\1\50\5\0\27\50\2\0\1\50\14\0\1\72"+
    "\46\0\1\47\3\0\1\51\1\73\46\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\21\25\1\74\5\25"+
    "\2\0\1\25\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\10\25\1\75\16\25\2\0\1\25\2\0"+
    "\1\76\4\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\2\25\1\77\24\25\2\0\1\25\7\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\20\25\1\100"+
    "\6\25\2\0\1\25\3\0\1\101\3\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\3\25\1\102\23\25"+
    "\2\0\1\25\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\13\25\1\103\13\25\2\0\1\25\7\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\4\25"+
    "\1\104\22\25\2\0\1\25\7\0\1\47\1\25\1\0"+
    "\1\25\1\0\1\50\5\0\20\25\1\105\6\25\2\0"+
    "\1\25\3\0\1\106\3\0\1\47\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\22\25\1\107\4\25\2\0\1\25"+
    "\44\0\1\110\51\0\1\101\14\0\1\101\47\0\1\111"+
    "\34\0\1\112\61\0\1\113\14\0\1\113\32\0\1\114"+
    "\24\0\1\47\4\0\1\72\46\0\1\47\3\0\1\51"+
    "\1\115\46\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\15\25\1\116\11\25\2\0\1\25\7\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\13\25\1\117"+
    "\13\25\2\0\1\25\35\0\1\120\25\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\7\25\1\121\17\25"+
    "\2\0\1\25\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\21\25\1\122\5\25\2\0\1\25\43\0"+
    "\1\123\17\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\10\25\1\124\16\25\2\0\1\25\2\0\1\125"+
    "\4\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\1\25\1\126\25\25\2\0\1\25\7\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\23\25\1\127\3\25"+
    "\2\0\1\25\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\20\25\1\130\6\25\2\0\1\25\3\0"+
    "\1\131\36\0\1\131\14\0\1\131\3\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\1\132\26\25\2\0"+
    "\1\25\22\0\1\133\73\0\1\134\14\0\1\134\26\0"+
    "\1\135\23\0\1\135\27\0\1\136\23\0\1\136\4\0"+
    "\1\47\2\0\1\137\1\51\1\140\46\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\20\25\1\141\6\25"+
    "\2\0\1\25\3\0\1\142\3\0\1\47\1\25\1\0"+
    "\1\25\1\0\1\50\5\0\10\25\1\143\16\25\2\0"+
    "\1\25\2\0\1\144\27\0\1\144\23\0\1\144\4\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\1\145"+
    "\26\25\2\0\1\25\7\0\1\47\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\10\25\1\146\16\25\2\0\1\25"+
    "\2\0\1\147\27\0\1\147\23\0\1\147\4\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\5\25\1\150"+
    "\21\25\2\0\1\25\27\0\1\151\33\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\17\25\1\152\7\25"+
    "\2\0\1\25\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\15\25\1\153\11\25\2\0\1\25\7\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\24\25"+
    "\1\154\2\25\2\0\1\25\46\0\1\155\14\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\17\25\1\156"+
    "\7\25\2\0\1\25\41\0\1\157\51\0\1\160\64\0"+
    "\1\161\42\0\1\162\30\0\1\163\46\0\1\47\3\0"+
    "\1\51\1\140\46\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\27\25\2\0\1\164\53\0\1\165\7\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\14\25"+
    "\1\166\12\25\2\0\1\25\36\0\1\167\24\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\27\25\2\0"+
    "\1\170\7\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\21\25\1\171\5\25\2\0\1\25\43\0\1\172"+
    "\17\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\10\25\1\173\16\25\2\0\1\25\2\0\1\174\27\0"+
    "\1\174\23\0\1\174\4\0\1\47\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\4\25\1\175\22\25\2\0\1\25"+
    "\7\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\27\25\2\0\1\176\7\0\1\47\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\15\25\1\177\11\25\2\0\1\25"+
    "\37\0\1\200\23\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\10\25\1\201\16\25\2\0\1\25\2\0"+
    "\1\202\27\0\1\202\23\0\1\202\31\0\1\203\41\0"+
    "\1\204\67\0\1\205\31\0\1\206\46\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\22\25\1\207\4\25"+
    "\2\0\1\25\44\0\1\210\16\0\1\47\1\25\1\0"+
    "\1\25\1\0\1\50\5\0\1\211\26\25\2\0\1\25"+
    "\22\0\1\212\40\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\2\25\1\213\10\25\1\214\13\25\2\0"+
    "\1\25\7\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\22\25\1\215\4\25\2\0\1\25\44\0\1\216"+
    "\16\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\2\25\1\217\24\25\2\0\1\25\24\0\1\220\36\0"+
    "\1\221\1\25\1\0\1\25\1\0\1\50\5\0\27\25"+
    "\2\0\1\25\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\16\25\1\222\10\25\2\0\1\25\7\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\17\25"+
    "\1\223\7\25\2\0\1\25\41\0\1\224\21\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\15\25\1\225"+
    "\11\25\2\0\1\25\37\0\1\226\46\0\1\227\23\0"+
    "\1\227\36\0\1\230\24\0\1\231\50\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\20\25\1\232\6\25"+
    "\2\0\1\25\3\0\1\233\36\0\1\233\14\0\1\233"+
    "\3\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\17\25\1\234\7\25\2\0\1\25\41\0\1\235\21\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\17\25"+
    "\1\236\7\25\2\0\1\25\7\0\1\47\1\25\1\0"+
    "\1\25\1\0\1\50\5\0\15\25\1\237\11\25\2\0"+
    "\1\25\7\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\2\25\1\240\24\25\2\0\1\25\24\0\1\241"+
    "\36\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\1\242\26\25\2\0\1\25\22\0\1\243\40\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\1\244\26\25"+
    "\2\0\1\25\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\3\25\1\245\23\25\2\0\1\25\25\0"+
    "\1\246\35\0\1\247\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\27\25\2\0\1\250\7\0\1\247\43\0\1\251"+
    "\24\0\1\252\102\0\1\253\14\0\1\254\46\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\22\25\1\255"+
    "\4\25\2\0\1\25\44\0\1\256\16\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\27\25\2\0\1\257"+
    "\53\0\1\260\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\4\25\1\261\22\25\2\0\1\25\7\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\3\25"+
    "\1\262\23\25\2\0\1\25\7\0\1\47\1\25\1\0"+
    "\1\25\1\0\1\50\5\0\10\25\1\263\16\25\2\0"+
    "\1\25\2\0\1\264\27\0\1\264\23\0\1\264\4\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\17\25"+
    "\1\265\7\25\2\0\1\25\41\0\1\266\21\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\20\25\1\267"+
    "\6\25\2\0\1\25\3\0\1\270\3\0\1\271\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\27\25\2\0\1\25"+
    "\7\0\1\271\53\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\1\272\13\25\1\273\12\25\2\0\1\25"+
    "\22\0\1\274\13\0\1\275\47\0\1\276\23\0\1\276"+
    "\37\0\1\277\14\0\1\277\10\0\1\300\46\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\1\301\26\25"+
    "\2\0\1\25\22\0\1\302\40\0\1\47\1\25\1\0"+
    "\1\25\1\0\1\50\5\0\22\25\1\303\4\25\2\0"+
    "\1\25\44\0\1\304\16\0\1\47\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\1\305\26\25\2\0\1\25\7\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\10\25"+
    "\1\306\16\25\2\0\1\25\2\0\1\307\4\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\15\25\1\310"+
    "\11\25\2\0\1\25\37\0\1\311\23\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\27\25\2\0\1\312"+
    "\53\0\1\313\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\20\25\1\314\6\25\2\0\1\25\3\0"+
    "\1\315\36\0\1\315\14\0\1\315\3\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\14\25\1\316\12\25"+
    "\2\0\1\25\7\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\22\25\1\317\4\25\2\0\1\25\36\0"+
    "\1\320\61\0\1\321\52\0\1\322\47\0\1\323\23\0"+
    "\1\324\53\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\17\25\1\325\7\25\2\0\1\25\41\0\1\326"+
    "\21\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\20\25\1\327\6\25\2\0\1\25\3\0\1\330\36\0"+
    "\1\330\14\0\1\330\3\0\1\47\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\2\25\1\331\24\25\2\0\1\25"+
    "\7\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\5\25\1\332\21\25\2\0\1\25\27\0\1\333\33\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\14\25"+
    "\1\334\12\25\2\0\1\25\36\0\1\335\24\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\22\25\1\336"+
    "\4\25\2\0\1\25\44\0\1\337\16\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\24\25\1\340\2\25"+
    "\2\0\1\25\46\0\1\341\14\0\1\47\1\25\1\0"+
    "\1\25\1\0\1\50\5\0\21\25\1\342\5\25\2\0"+
    "\1\25\7\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\4\25\1\343\22\25\2\0\1\25\43\0\1\344"+
    "\36\0\1\345\71\0\1\346\43\0\1\347\26\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\10\25\1\350"+
    "\16\25\2\0\1\25\2\0\1\351\27\0\1\351\23\0"+
    "\1\351\4\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\22\25\1\352\4\25\2\0\1\25\44\0\1\353"+
    "\16\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\10\25\1\354\16\25\2\0\1\25\2\0\1\355\4\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\10\25"+
    "\1\356\16\25\2\0\1\25\2\0\1\357\27\0\1\357"+
    "\23\0\1\357\4\0\1\360\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\27\25\2\0\1\25\7\0\1\360\53\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\20\25"+
    "\1\361\6\25\2\0\1\25\3\0\1\362\36\0\1\362"+
    "\14\0\1\362\3\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\15\25\1\363\11\25\2\0\1\25\37\0"+
    "\1\364\23\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\10\25\1\365\16\25\2\0\1\25\2\0\1\366"+
    "\4\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\23\25\1\367\3\25\2\0\1\25\32\0\1\366\23\0"+
    "\1\366\42\0\1\370\33\0\1\371\60\0\1\372\23\0"+
    "\1\372\4\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\15\25\1\373\11\25\2\0\1\25\37\0\1\374"+
    "\23\0\1\47\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\1\375\26\25\2\0\1\25\22\0\1\376\40\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\15\25\1\377"+
    "\11\25\2\0\1\25\37\0\1\u0100\23\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\2\25\1\u0101\24\25"+
    "\2\0\1\25\24\0\1\u0102\36\0\1\47\1\25\1\0"+
    "\1\25\1\0\1\50\5\0\22\25\1\u0103\4\25\2\0"+
    "\1\25\44\0\1\u0104\16\0\1\47\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\17\25\1\u0105\7\25\2\0\1\25"+
    "\41\0\1\u0106\21\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\6\25\1\u0107\20\25\2\0\1\25\30\0"+
    "\1\u0108\32\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\15\25\1\u0109\11\25\2\0\1\25\37\0\1\u010a"+
    "\42\0\1\u010b\24\0\1\u010c\24\0\1\u010d\36\0\1\u010e"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\27\25\2\0"+
    "\1\25\7\0\1\u010e\53\0\1\47\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\17\25\1\u010f\7\25\2\0\1\25"+
    "\41\0\1\u0110\21\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\14\25\1\u0111\12\25\2\0\1\25\36\0"+
    "\1\u0112\24\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\1\u0113\26\25\2\0\1\25\22\0\1\u0114\40\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\1\u0115"+
    "\26\25\2\0\1\25\22\0\1\u0116\40\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\3\25\1\u0117\23\25"+
    "\2\0\1\25\25\0\1\u0118\35\0\1\47\1\25\1\0"+
    "\1\25\1\0\1\50\5\0\22\25\1\u0119\4\25\2\0"+
    "\1\25\44\0\1\u011a\16\0\1\u011b\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\27\25\2\0\1\25\7\0\1\u011b"+
    "\106\0\1\u011c\14\0\1\u011c\35\0\1\u011d\44\0\1\u011e"+
    "\23\0\1\u011e\4\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\10\25\1\u011f\16\25\2\0\1\25\2\0"+
    "\1\u0120\27\0\1\u0120\23\0\1\u0120\4\0\1\u0121\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\27\25\2\0\1\25"+
    "\7\0\1\u0121\53\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\2\25\1\u0122\24\25\2\0\1\25\24\0"+
    "\1\u0123\36\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\17\25\1\u0124\7\25\2\0\1\25\41\0\1\u0125"+
    "\21\0\1\u0126\1\25\1\0\1\25\1\0\1\50\5\0"+
    "\27\25\2\0\1\25\7\0\1\u0126\53\0\1\47\1\25"+
    "\1\0\1\25\1\0\1\50\5\0\15\25\1\u0127\11\25"+
    "\2\0\1\25\37\0\1\u0128\67\0\1\u0129\26\0\1\u012a"+
    "\70\0\1\u012b\17\0\1\47\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\15\25\1\u012c\11\25\2\0\1\25\37\0"+
    "\1\u012d\23\0\1\47\1\25\1\0\1\25\1\0\1\50"+
    "\5\0\10\25\1\u012e\16\25\2\0\1\25\2\0\1\u012f"+
    "\27\0\1\u012f\23\0\1\u012f\4\0\1\47\1\25\1\0"+
    "\1\25\1\0\1\50\5\0\10\25\1\u0130\16\25\2\0"+
    "\1\25\2\0\1\u0131\27\0\1\u0131\23\0\1\u0131\4\0"+
    "\1\u0132\1\25\1\0\1\25\1\0\1\50\5\0\27\25"+
    "\2\0\1\25\7\0\1\u0132\105\0\1\u0133\34\0\1\u0134"+
    "\75\0\1\u0135\16\0\1\u0136\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\27\25\2\0\1\25\7\0\1\u0136\53\0"+
    "\1\47\1\25\1\0\1\25\1\0\1\50\5\0\15\25"+
    "\1\u0137\11\25\2\0\1\25\37\0\1\u0138\23\0\1\47"+
    "\1\25\1\0\1\25\1\0\1\50\5\0\15\25\1\u0139"+
    "\11\25\2\0\1\25\37\0\1\u013a\42\0\1\u013b\61\0"+
    "\1\u013c\44\0\1\u013d\35\0\1\47\1\25\1\0\1\25"+
    "\1\0\1\50\5\0\14\25\1\u013e\12\25\2\0\1\25"+
    "\36\0\1\u013f\24\0\1\u0140\1\25\1\0\1\25\1\0"+
    "\1\50\5\0\27\25\2\0\1\25\7\0\1\u0140\66\0"+
    "\1\u0141\63\0\1\u0142\23\0\1\u0142\23\0\1\u0143\34\0"+
    "\1\u0144\1\25\1\0\1\25\1\0\1\50\5\0\27\25"+
    "\2\0\1\25\7\0\1\u0144\100\0\1\u0145\67\0\1\u0146"+
    "\45\0\1\u0147\14\0\1\u0147\26\0\1\u0148\23\0\1\u0148"+
    "\17\0\1\u0149\101\0\1\u014a\30\0\1\u014b\50\0\1\u014c"+
    "\53\0\1\u014d\56\0\1\u014e\50\0\1\u014f\35\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13376];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\2\11\5\1\5\11"+
    "\13\0\3\11\4\0\1\11\44\0\1\11\70\0\1\11"+
    "\13\0\1\11\25\0\1\11\21\0\1\11\32\0\1\11"+
    "\33\0\1\11\35\0\1\11\14\0\1\11\5\0\1\11"+
    "\4\0\1\11\13\0\1\11\3\0\1\11\6\0\1\1"+
    "\2\0\1\11\3\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
        StringBuffer stringBuffer = new StringBuffer();
        ArrayList<ErrorL> errors = new ArrayList<ErrorL>();

        private Symbol symbol(int type){
            return new Symbol(type, yyline+1, yycolumn+1);
        }

        private Symbol symbol(int type, Object value){
            return new Symbol(type, yyline+1, yycolumn+1, value);
        }

        public ArrayList<ErrorL> getErrorsLexicos(){
            return this.errors;
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public UserFlex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(UserParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*ignore*/
            }
          // fall through
          case 34: break;
          case 2:
            { return new Symbol(UserParserSym.COMMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 35: break;
          case 3:
            { return new Symbol(UserParserSym.COLON, yycolumn, yyline, yytext());
            }
          // fall through
          case 36: break;
          case 4:
            { return new Symbol(UserParserSym.LESST, yycolumn, yyline, yytext());
            }
          // fall through
          case 37: break;
          case 5:
            { return new Symbol(UserParserSym.EQUALS, yycolumn, yyline, yytext());
            }
          // fall through
          case 38: break;
          case 6:
            { return new Symbol(UserParserSym.GREATERT, yycolumn, yyline, yytext());
            }
          // fall through
          case 39: break;
          case 7:
            { return new Symbol(UserParserSym.BRACKETA, yycolumn, yyline, yytext());
            }
          // fall through
          case 40: break;
          case 8:
            { return new Symbol(UserParserSym.BRACKETC, yycolumn, yyline, yytext());
            }
          // fall through
          case 41: break;
          case 9:
            { return new Symbol(UserParserSym.KEYA, yycolumn, yyline, yytext());
            }
          // fall through
          case 42: break;
          case 10:
            { return new Symbol(UserParserSym.KEYC, yycolumn, yyline, yytext());
            }
          // fall through
          case 43: break;
          case 11:
            { return new Symbol(UserParserSym.ENDREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 44: break;
          case 12:
            { return new Symbol(UserParserSym.OPENREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 45: break;
          case 13:
            { return new Symbol(UserParserSym.OPENXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 46: break;
          case 14:
            { return new Symbol(UserParserSym.ENDXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 47: break;
          case 15:
            { return new Symbol(UserParserSym.TEXT, yyline, yycolumn, yytext());
            }
          // fall through
          case 48: break;
          case 16:
            { return new Symbol(UserParserSym.XSON, yycolumn, yyline, yytext());
            }
          // fall through
          case 49: break;
          case 17:
            { return new Symbol(UserParserSym.VERSION, yycolumn, yyline, yytext());
            }
          // fall through
          case 50: break;
          case 18:
            { return new Symbol(UserParserSym.NAME, yycolumn, yyline, yytext());
            }
          // fall through
          case 51: break;
          case 19:
            { return new Symbol(UserParserSym.USER, yycolumn, yyline, yytext());
            }
          // fall through
          case 52: break;
          case 20:
            { return new Symbol(UserParserSym.PASSWORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 53: break;
          case 21:
            { return new Symbol(UserParserSym.DATECREATION, yycolumn, yyline, yytext());
            }
          // fall through
          case 54: break;
          case 22:
            { return new Symbol(UserParserSym.INSTITUTION, yycolumn, yyline, yytext());
            }
          // fall through
          case 55: break;
          case 23:
            { return new Symbol(UserParserSym.USERDATA, yycolumn, yyline, yytext());
            }
          // fall through
          case 56: break;
          case 24:
            { return new Symbol(UserParserSym.NEWUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 57: break;
          case 25:
            { return new Symbol(UserParserSym.DATE, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 26:
            { return new Symbol(UserParserSym.NEWPASSWORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 27:
            { return new Symbol(UserParserSym.OLDUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 28:
            { return new Symbol(UserParserSym.DELETEUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 29:
            { return new Symbol(UserParserSym.INREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 30:
            { return new Symbol(UserParserSym.EDITUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 63: break;
          case 31:
            { return new Symbol(UserParserSym.DATEEDIT, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 32:
            { return new Symbol(UserParserSym.EDREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 33:
            { return new Symbol(UserParserSym.ENDREQUESTS, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
