// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: UserFlex.flex

package user.servidor.Flex;

import java_cup.runtime.*;
import java.util.ArrayList;
import user.servidor.Cup.UserParserSym;
import user.servidor.Errors.ErrorL;


@SuppressWarnings("fallthrough")
public class UserFlex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\17\u0200\1\u0500"+
    "\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\0\1\4"+
    "\7\0\1\5\1\6\1\7\1\0\12\10\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\2\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\27\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\27\1\44\1\45\1\0"+
    "\1\46\1\0\1\47\1\0\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\27\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\27\1\44\1\50\1\0\1\51"+
    "\7\0\1\1\32\0\1\1\217\0\2\52\115\0\1\53"+
    "\u0200\0\1\1\177\0\13\1\21\0\2\54\12\0\2\1"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\1\2\1\3\1\4\1\5\1\6\5\1"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\13\0\1\14"+
    "\1\15\1\16\5\0\1\17\44\0\1\20\67\0\1\21"+
    "\13\0\1\22\25\0\1\23\21\0\1\24\32\0\1\25"+
    "\33\0\1\26\35\0\1\27\14\0\1\30\5\0\1\31"+
    "\4\0\1\32\13\0\1\33\3\0\1\34\6\0\1\35"+
    "\2\0\1\36\3\0\1\37\2\0\1\35\5\0\1\40"+
    "\1\0\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\55\0\55\0\341"+
    "\0\55\0\55\0\u010e\0\u013b\0\u0168\0\u0195\0\u01c2\0\55"+
    "\0\55\0\55\0\55\0\u01ef\0\55\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\55\0\55\0\55\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf"+
    "\0\55\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\55\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d"+
    "\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5"+
    "\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d"+
    "\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275"+
    "\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd"+
    "\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\55\0\u14eb\0\u1518"+
    "\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680"+
    "\0\u16ad\0\55\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923"+
    "\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\55"+
    "\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6"+
    "\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e"+
    "\0\u1d5b\0\55\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69"+
    "\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1"+
    "\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139"+
    "\0\u2166\0\u2193\0\u21c0\0\u21ed\0\55\0\u221a\0\u2247\0\u2274"+
    "\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc"+
    "\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u2544"+
    "\0\u2571\0\u259e\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac"+
    "\0\55\0\u26d9\0\u2706\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7"+
    "\0\u2814\0\u2841\0\u286e\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f"+
    "\0\u297c\0\u29a9\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7"+
    "\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98\0\u2bc5\0\55\0\u2bf2"+
    "\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a"+
    "\0\u2d87\0\u2db4\0\u2de1\0\55\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95"+
    "\0\u2ec2\0\55\0\u2eef\0\u2f1c\0\u2f49\0\u2f76\0\55\0\u2fa3"+
    "\0\u2fd0\0\u2ffd\0\u302a\0\u3057\0\u3084\0\u30b1\0\u30de\0\u310b"+
    "\0\u3138\0\u3165\0\55\0\u3192\0\u31bf\0\u31ec\0\55\0\u3219"+
    "\0\u3246\0\u3273\0\u32a0\0\u32cd\0\u32fa\0\u3327\0\u3354\0\u3381"+
    "\0\55\0\u33ae\0\u33db\0\u3408\0\55\0\u3435\0\u3462\0\55"+
    "\0\u348f\0\u34bc\0\u34e9\0\u3516\0\u3543\0\55\0\u3570\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\3\2\1\7"+
    "\1\10\1\11\1\12\1\13\5\2\1\14\11\2\1\15"+
    "\3\2\1\16\1\2\1\17\1\2\1\20\1\21\1\2"+
    "\1\22\1\23\2\2\1\24\56\0\1\3\67\0\1\25"+
    "\44\0\1\26\1\0\1\26\1\0\1\27\5\0\3\26"+
    "\1\30\1\31\1\32\2\26\1\33\2\26\1\34\1\35"+
    "\1\26\1\36\3\26\1\37\4\26\2\0\1\26\2\0"+
    "\1\40\4\0\1\41\12\0\1\42\53\0\1\43\66\0"+
    "\1\44\23\0\1\44\24\0\1\45\54\0\1\46\70\0"+
    "\1\47\14\0\1\47\5\0\1\26\1\0\1\26\1\0"+
    "\1\50\5\0\27\26\2\0\1\26\10\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\27\26\2\0\1\26"+
    "\4\0\1\51\3\0\1\51\3\0\1\53\1\54\43\0"+
    "\1\51\3\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\1\55\26\26\2\0\1\26\4\0\1\51\3\0"+
    "\1\51\1\26\1\0\1\26\1\0\1\52\5\0\12\26"+
    "\1\56\14\26\2\0\1\26\4\0\1\51\3\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\4\26\1\57"+
    "\22\26\2\0\1\26\4\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\14\26\1\60\12\26"+
    "\2\0\1\26\4\0\1\51\3\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\15\26\1\61\11\26\2\0"+
    "\1\26\4\0\1\51\3\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\15\26\1\62\4\26\1\63\4\26"+
    "\2\0\1\26\4\0\1\51\3\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\1\64\26\26\2\0\1\26"+
    "\4\0\1\51\3\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\20\26\1\65\6\26\2\0\1\26\3\0"+
    "\1\66\1\51\32\0\1\67\54\0\1\70\40\0\1\71"+
    "\73\0\1\72\52\0\1\73\24\0\1\51\3\0\1\53"+
    "\1\50\43\0\1\51\3\0\1\51\4\0\1\52\5\0"+
    "\27\52\2\0\1\52\4\0\1\51\10\0\1\74\47\0"+
    "\1\51\3\0\1\53\1\75\43\0\1\51\3\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\21\26\1\76"+
    "\5\26\2\0\1\26\4\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\10\26\1\77\16\26"+
    "\2\0\1\26\2\0\1\100\1\0\1\51\3\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\2\26\1\101"+
    "\24\26\2\0\1\26\4\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\20\26\1\102\6\26"+
    "\2\0\1\26\3\0\1\103\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\3\26\1\104\23\26"+
    "\2\0\1\26\4\0\1\51\3\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\13\26\1\105\13\26\2\0"+
    "\1\26\4\0\1\51\3\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\4\26\1\106\22\26\2\0\1\26"+
    "\4\0\1\51\3\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\20\26\1\107\6\26\2\0\1\26\3\0"+
    "\1\110\1\51\3\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\22\26\1\111\4\26\2\0\1\26\4\0"+
    "\1\51\40\0\1\112\52\0\1\103\14\0\1\103\50\0"+
    "\1\113\35\0\1\114\62\0\1\115\14\0\1\115\33\0"+
    "\1\116\25\0\1\51\4\0\1\74\43\0\1\51\3\0"+
    "\1\51\3\0\1\53\1\117\43\0\1\51\3\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\15\26\1\120"+
    "\11\26\2\0\1\26\4\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\13\26\1\121\13\26"+
    "\2\0\1\26\4\0\1\51\31\0\1\122\26\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\7\26\1\123"+
    "\17\26\2\0\1\26\4\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\21\26\1\124\5\26"+
    "\2\0\1\26\4\0\1\51\37\0\1\125\20\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\10\26\1\126"+
    "\16\26\2\0\1\26\2\0\1\127\1\0\1\51\3\0"+
    "\1\51\1\26\1\0\1\26\1\0\1\52\5\0\1\26"+
    "\1\130\25\26\2\0\1\26\4\0\1\51\3\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\23\26\1\131"+
    "\3\26\2\0\1\26\4\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\20\26\1\132\6\26"+
    "\2\0\1\26\3\0\1\133\1\51\36\0\1\133\14\0"+
    "\1\133\4\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\1\134\26\26\2\0\1\26\4\0\1\51\16\0"+
    "\1\135\74\0\1\136\14\0\1\136\27\0\1\137\23\0"+
    "\1\137\30\0\1\140\23\0\1\140\5\0\1\51\2\0"+
    "\1\141\1\53\1\50\43\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\20\26\1\142\6\26"+
    "\2\0\1\26\3\0\1\143\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\10\26\1\144\16\26"+
    "\2\0\1\26\2\0\1\145\1\0\1\51\26\0\1\145"+
    "\23\0\1\145\5\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\1\146\26\26\2\0\1\26\4\0\1\51"+
    "\3\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\10\26\1\147\16\26\2\0\1\26\2\0\1\150\1\0"+
    "\1\51\26\0\1\150\23\0\1\150\5\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\5\26\1\151\21\26"+
    "\2\0\1\26\4\0\1\51\23\0\1\152\34\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\17\26\1\153"+
    "\7\26\2\0\1\26\4\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\15\26\1\154\11\26"+
    "\2\0\1\26\4\0\1\51\3\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\24\26\1\155\2\26\2\0"+
    "\1\26\4\0\1\51\42\0\1\156\15\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\17\26\1\157\7\26"+
    "\2\0\1\26\4\0\1\51\35\0\1\160\52\0\1\161"+
    "\65\0\1\162\43\0\1\163\31\0\1\164\47\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\27\26\2\0"+
    "\1\165\4\0\1\51\47\0\1\166\10\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\14\26\1\167\12\26"+
    "\2\0\1\26\4\0\1\51\32\0\1\170\25\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\27\26\2\0"+
    "\1\171\4\0\1\51\3\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\21\26\1\172\5\26\2\0\1\26"+
    "\4\0\1\51\37\0\1\173\20\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\10\26\1\174\16\26\2\0"+
    "\1\26\2\0\1\175\1\0\1\51\26\0\1\175\23\0"+
    "\1\175\5\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\4\26\1\176\22\26\2\0\1\26\4\0\1\51"+
    "\3\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\27\26\2\0\1\177\4\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\15\26\1\200\11\26"+
    "\2\0\1\26\4\0\1\51\33\0\1\201\24\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\10\26\1\202"+
    "\16\26\2\0\1\26\2\0\1\203\1\0\1\51\26\0"+
    "\1\203\23\0\1\203\32\0\1\204\42\0\1\205\70\0"+
    "\1\206\32\0\1\207\47\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\22\26\1\210\4\26\2\0\1\26"+
    "\4\0\1\51\40\0\1\211\17\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\1\212\26\26\2\0\1\26"+
    "\4\0\1\51\16\0\1\213\41\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\2\26\1\214\10\26\1\215"+
    "\13\26\2\0\1\26\4\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\22\26\1\216\4\26"+
    "\2\0\1\26\4\0\1\51\40\0\1\217\17\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\2\26\1\220"+
    "\24\26\2\0\1\26\4\0\1\51\20\0\1\221\37\0"+
    "\1\222\1\26\1\0\1\26\1\0\1\52\5\0\27\26"+
    "\2\0\1\26\4\0\1\51\3\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\16\26\1\223\10\26\2\0"+
    "\1\26\4\0\1\51\3\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\17\26\1\224\7\26\2\0\1\26"+
    "\4\0\1\51\35\0\1\225\22\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\15\26\1\226\11\26\2\0"+
    "\1\26\4\0\1\51\33\0\1\227\47\0\1\230\23\0"+
    "\1\230\37\0\1\231\25\0\1\232\51\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\20\26\1\233\6\26"+
    "\2\0\1\26\3\0\1\234\1\51\36\0\1\234\14\0"+
    "\1\234\4\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\17\26\1\235\7\26\2\0\1\26\4\0\1\51"+
    "\35\0\1\236\22\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\17\26\1\237\7\26\2\0\1\26\4\0"+
    "\1\51\3\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\15\26\1\240\11\26\2\0\1\26\4\0\1\51"+
    "\3\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\2\26\1\241\24\26\2\0\1\26\4\0\1\51\20\0"+
    "\1\242\37\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\1\243\26\26\2\0\1\26\4\0\1\51\16\0"+
    "\1\244\41\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\1\245\26\26\2\0\1\26\4\0\1\51\3\0"+
    "\1\51\1\26\1\0\1\26\1\0\1\52\5\0\3\26"+
    "\1\246\23\26\2\0\1\26\4\0\1\51\21\0\1\247"+
    "\36\0\1\250\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\27\26\2\0\1\251\4\0\1\51\3\0\1\250\43\0"+
    "\1\252\25\0\1\253\103\0\1\254\15\0\1\255\47\0"+
    "\1\51\1\26\1\0\1\26\1\0\1\52\5\0\22\26"+
    "\1\256\4\26\2\0\1\26\4\0\1\51\40\0\1\257"+
    "\17\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\27\26\2\0\1\260\4\0\1\51\47\0\1\261\10\0"+
    "\1\51\1\26\1\0\1\26\1\0\1\52\5\0\4\26"+
    "\1\262\22\26\2\0\1\26\4\0\1\51\3\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\3\26\1\263"+
    "\23\26\2\0\1\26\4\0\1\51\3\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\10\26\1\264\16\26"+
    "\2\0\1\26\2\0\1\265\1\0\1\51\26\0\1\265"+
    "\23\0\1\265\5\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\17\26\1\266\7\26\2\0\1\26\4\0"+
    "\1\51\35\0\1\267\22\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\20\26\1\270\6\26\2\0\1\26"+
    "\3\0\1\271\1\51\3\0\1\272\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\27\26\2\0\1\26\4\0\1\51"+
    "\3\0\1\272\54\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\1\273\13\26\1\274\12\26\2\0\1\26"+
    "\4\0\1\51\16\0\1\275\13\0\1\276\50\0\1\277"+
    "\23\0\1\277\40\0\1\300\14\0\1\300\11\0\1\301"+
    "\47\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\1\302\26\26\2\0\1\26\4\0\1\51\16\0\1\303"+
    "\41\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\22\26\1\304\4\26\2\0\1\26\4\0\1\51\40\0"+
    "\1\305\17\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\1\306\26\26\2\0\1\26\4\0\1\51\3\0"+
    "\1\51\1\26\1\0\1\26\1\0\1\52\5\0\10\26"+
    "\1\307\16\26\2\0\1\26\2\0\1\310\1\0\1\51"+
    "\3\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\15\26\1\311\11\26\2\0\1\26\4\0\1\51\33\0"+
    "\1\312\24\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\27\26\2\0\1\313\4\0\1\51\47\0\1\314"+
    "\10\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\20\26\1\315\6\26\2\0\1\26\3\0\1\316\1\51"+
    "\36\0\1\316\14\0\1\316\4\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\14\26\1\317\12\26\2\0"+
    "\1\26\4\0\1\51\3\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\22\26\1\320\4\26\2\0\1\26"+
    "\4\0\1\51\32\0\1\321\62\0\1\322\53\0\1\323"+
    "\50\0\1\324\24\0\1\325\54\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\17\26\1\326\7\26\2\0"+
    "\1\26\4\0\1\51\35\0\1\327\22\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\20\26\1\330\6\26"+
    "\2\0\1\26\3\0\1\331\1\51\36\0\1\331\14\0"+
    "\1\331\4\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\2\26\1\332\24\26\2\0\1\26\4\0\1\51"+
    "\3\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\5\26\1\333\21\26\2\0\1\26\4\0\1\51\23\0"+
    "\1\334\34\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\14\26\1\335\12\26\2\0\1\26\4\0\1\51"+
    "\32\0\1\336\25\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\22\26\1\337\4\26\2\0\1\26\4\0"+
    "\1\51\40\0\1\340\17\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\24\26\1\341\2\26\2\0\1\26"+
    "\4\0\1\51\42\0\1\342\15\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\21\26\1\343\5\26\2\0"+
    "\1\26\4\0\1\51\3\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\4\26\1\344\22\26\2\0\1\26"+
    "\4\0\1\51\37\0\1\345\37\0\1\346\72\0\1\347"+
    "\44\0\1\350\27\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\10\26\1\351\16\26\2\0\1\26\2\0"+
    "\1\352\1\0\1\51\26\0\1\352\23\0\1\352\5\0"+
    "\1\51\1\26\1\0\1\26\1\0\1\52\5\0\22\26"+
    "\1\353\4\26\2\0\1\26\4\0\1\51\40\0\1\354"+
    "\17\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\10\26\1\355\16\26\2\0\1\26\2\0\1\356\1\0"+
    "\1\51\3\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\10\26\1\357\16\26\2\0\1\26\2\0\1\360"+
    "\1\0\1\51\26\0\1\360\23\0\1\360\5\0\1\361"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\27\26\2\0"+
    "\1\26\4\0\1\51\3\0\1\361\54\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\20\26\1\362\6\26"+
    "\2\0\1\26\3\0\1\363\1\51\36\0\1\363\14\0"+
    "\1\363\4\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\15\26\1\364\11\26\2\0\1\26\4\0\1\51"+
    "\33\0\1\365\24\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\10\26\1\366\16\26\2\0\1\26\2\0"+
    "\1\367\1\0\1\51\3\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\23\26\1\370\3\26\2\0\1\26"+
    "\4\0\1\51\26\0\1\367\23\0\1\367\43\0\1\371"+
    "\34\0\1\372\61\0\1\373\23\0\1\373\5\0\1\51"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\15\26\1\374"+
    "\11\26\2\0\1\26\4\0\1\51\33\0\1\375\24\0"+
    "\1\51\1\26\1\0\1\26\1\0\1\52\5\0\1\376"+
    "\26\26\2\0\1\26\4\0\1\51\16\0\1\377\41\0"+
    "\1\51\1\26\1\0\1\26\1\0\1\52\5\0\15\26"+
    "\1\u0100\11\26\2\0\1\26\4\0\1\51\33\0\1\u0101"+
    "\24\0\1\51\1\26\1\0\1\26\1\0\1\52\5\0"+
    "\2\26\1\u0102\24\26\2\0\1\26\4\0\1\51\20\0"+
    "\1\u0103\37\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\22\26\1\u0104\4\26\2\0\1\26\4\0\1\51"+
    "\40\0\1\u0105\17\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\17\26\1\u0106\7\26\2\0\1\26\4\0"+
    "\1\51\35\0\1\u0107\22\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\6\26\1\u0108\20\26\2\0\1\26"+
    "\4\0\1\51\24\0\1\u0109\33\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\15\26\1\u010a\11\26\2\0"+
    "\1\26\4\0\1\51\33\0\1\u010b\43\0\1\u010c\24\0"+
    "\1\u010d\25\0\1\u010e\37\0\1\u010f\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\27\26\2\0\1\26\4\0\1\51"+
    "\3\0\1\u010f\54\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\17\26\1\u0110\7\26\2\0\1\26\4\0"+
    "\1\51\35\0\1\u0111\22\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\14\26\1\u0112\12\26\2\0\1\26"+
    "\4\0\1\51\32\0\1\u0113\25\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\1\u0114\26\26\2\0\1\26"+
    "\4\0\1\51\16\0\1\u0115\41\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\1\u0116\26\26\2\0\1\26"+
    "\4\0\1\51\16\0\1\u0117\41\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\3\26\1\u0118\23\26\2\0"+
    "\1\26\4\0\1\51\21\0\1\u0119\36\0\1\51\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\22\26\1\u011a\4\26"+
    "\2\0\1\26\4\0\1\51\40\0\1\u011b\17\0\1\u011c"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\27\26\2\0"+
    "\1\26\4\0\1\51\3\0\1\u011c\107\0\1\u011d\14\0"+
    "\1\u011d\36\0\1\u011e\45\0\1\u011f\23\0\1\u011f\5\0"+
    "\1\51\1\26\1\0\1\26\1\0\1\52\5\0\10\26"+
    "\1\u0120\16\26\2\0\1\26\2\0\1\u0121\1\0\1\51"+
    "\26\0\1\u0121\23\0\1\u0121\5\0\1\u0122\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\27\26\2\0\1\26\4\0"+
    "\1\51\3\0\1\u0122\54\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\2\26\1\u0123\24\26\2\0\1\26"+
    "\4\0\1\51\20\0\1\u0124\37\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\17\26\1\u0125\7\26\2\0"+
    "\1\26\4\0\1\51\35\0\1\u0126\22\0\1\u0127\1\26"+
    "\1\0\1\26\1\0\1\52\5\0\27\26\2\0\1\26"+
    "\4\0\1\51\3\0\1\u0127\54\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\15\26\1\u0128\11\26\2\0"+
    "\1\26\4\0\1\51\33\0\1\u0129\70\0\1\u012a\27\0"+
    "\1\u012b\71\0\1\u012c\20\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\15\26\1\u012d\11\26\2\0\1\26"+
    "\4\0\1\51\33\0\1\u012e\24\0\1\51\1\26\1\0"+
    "\1\26\1\0\1\52\5\0\10\26\1\u012f\16\26\2\0"+
    "\1\26\2\0\1\u0130\1\0\1\51\26\0\1\u0130\23\0"+
    "\1\u0130\5\0\1\51\1\26\1\0\1\26\1\0\1\52"+
    "\5\0\10\26\1\u0131\16\26\2\0\1\26\2\0\1\u0132"+
    "\1\0\1\51\26\0\1\u0132\23\0\1\u0132\5\0\1\u0133"+
    "\1\26\1\0\1\26\1\0\1\52\5\0\27\26\2\0"+
    "\1\26\4\0\1\51\3\0\1\u0133\106\0\1\u0134\35\0"+
    "\1\u0135\76\0\1\u0136\17\0\1\u0137\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\27\26\2\0\1\26\4\0\1\51"+
    "\3\0\1\u0137\54\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\15\26\1\u0138\11\26\2\0\1\26\4\0"+
    "\1\51\33\0\1\u0139\24\0\1\51\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\15\26\1\u013a\11\26\2\0\1\26"+
    "\4\0\1\51\33\0\1\u013b\43\0\1\u013c\62\0\1\u013d"+
    "\45\0\1\u013e\36\0\1\51\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\14\26\1\u013f\12\26\2\0\1\26\4\0"+
    "\1\51\32\0\1\u0140\25\0\1\u0141\1\26\1\0\1\26"+
    "\1\0\1\52\5\0\27\26\2\0\1\26\4\0\1\51"+
    "\3\0\1\u0141\67\0\1\u0142\64\0\1\u0143\23\0\1\u0143"+
    "\24\0\1\u0144\35\0\1\u0145\1\26\1\0\1\26\1\0"+
    "\1\52\5\0\27\26\2\0\1\26\4\0\1\51\3\0"+
    "\1\u0145\101\0\1\u0146\70\0\1\u0147\46\0\1\u0148\14\0"+
    "\1\u0148\27\0\1\u0149\23\0\1\u0149\20\0\1\u014a\102\0"+
    "\1\u014b\31\0\1\u014c\51\0\1\u014d\54\0\1\u014e\57\0"+
    "\1\u014f\51\0\1\u0150\36\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13725];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\2\11\5\1\4\11"+
    "\1\1\1\11\13\0\3\11\5\0\1\11\44\0\1\11"+
    "\67\0\1\11\13\0\1\11\25\0\1\11\21\0\1\11"+
    "\32\0\1\11\33\0\1\11\35\0\1\11\14\0\1\11"+
    "\5\0\1\11\4\0\1\11\13\0\1\11\3\0\1\11"+
    "\6\0\1\1\2\0\1\11\3\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
        StringBuffer stringBuffer = new StringBuffer();
        ArrayList<ErrorL> errors = new ArrayList<ErrorL>();

        private Symbol symbol(int type){
            return new Symbol(type, yyline+1, yycolumn+1);
        }

        private Symbol symbol(int type, Object value){
            return new Symbol(type, yyline+1, yycolumn+1, value);
        }

        public ArrayList<ErrorL> getErrorsLexicos(){
            return this.errors;
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public UserFlex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(UserParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*ignore*/
            }
          // fall through
          case 34: break;
          case 2:
            { return new Symbol(UserParserSym.COMMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 35: break;
          case 3:
            { return new Symbol(UserParserSym.COLON, yycolumn, yyline, yytext());
            }
          // fall through
          case 36: break;
          case 4:
            { return new Symbol(UserParserSym.LESST, yycolumn, yyline, yytext());
            }
          // fall through
          case 37: break;
          case 5:
            { return new Symbol(UserParserSym.EQUALS, yycolumn, yyline, yytext());
            }
          // fall through
          case 38: break;
          case 6:
            { return new Symbol(UserParserSym.GREATERT, yycolumn, yyline, yytext());
            }
          // fall through
          case 39: break;
          case 7:
            { return new Symbol(UserParserSym.BRACKETA, yycolumn, yyline, yytext());
            }
          // fall through
          case 40: break;
          case 8:
            { return new Symbol(UserParserSym.BRACKETC, yycolumn, yyline, yytext());
            }
          // fall through
          case 41: break;
          case 9:
            { return new Symbol(UserParserSym.KEYA, yycolumn, yyline, yytext());
            }
          // fall through
          case 42: break;
          case 10:
            { return new Symbol(UserParserSym.KEYC, yycolumn, yyline, yytext());
            }
          // fall through
          case 43: break;
          case 11:
            { return new Symbol(UserParserSym.ENDREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 44: break;
          case 12:
            { return new Symbol(UserParserSym.OPENREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 45: break;
          case 13:
            { return new Symbol(UserParserSym.OPENXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 46: break;
          case 14:
            { return new Symbol(UserParserSym.ENDXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 47: break;
          case 15:
            { return new Symbol(UserParserSym.TEXT, yyline, yycolumn, yytext());
            }
          // fall through
          case 48: break;
          case 16:
            { return new Symbol(UserParserSym.XSON, yycolumn, yyline, yytext());
            }
          // fall through
          case 49: break;
          case 17:
            { return new Symbol(UserParserSym.VERSION, yycolumn, yyline, yytext());
            }
          // fall through
          case 50: break;
          case 18:
            { return new Symbol(UserParserSym.NAME, yycolumn, yyline, yytext());
            }
          // fall through
          case 51: break;
          case 19:
            { return new Symbol(UserParserSym.USER, yycolumn, yyline, yytext());
            }
          // fall through
          case 52: break;
          case 20:
            { return new Symbol(UserParserSym.PASSWORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 53: break;
          case 21:
            { return new Symbol(UserParserSym.DATECREATION, yycolumn, yyline, yytext());
            }
          // fall through
          case 54: break;
          case 22:
            { return new Symbol(UserParserSym.INSTITUTION, yycolumn, yyline, yytext());
            }
          // fall through
          case 55: break;
          case 23:
            { return new Symbol(UserParserSym.USERDATA, yycolumn, yyline, yytext());
            }
          // fall through
          case 56: break;
          case 24:
            { return new Symbol(UserParserSym.NEWUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 57: break;
          case 25:
            { return new Symbol(UserParserSym.DATE, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 26:
            { return new Symbol(UserParserSym.NEWPASSWORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 27:
            { return new Symbol(UserParserSym.OLDUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 28:
            { return new Symbol(UserParserSym.DELETEUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 29:
            { return new Symbol(UserParserSym.INREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 30:
            { return new Symbol(UserParserSym.EDITUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 63: break;
          case 31:
            { return new Symbol(UserParserSym.DATEEDIT, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 32:
            { return new Symbol(UserParserSym.EDREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 33:
            { return new Symbol(UserParserSym.ENDREQUESTS, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
