
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package user.servidor.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Date.*;
import user.servidor.Objects.*;
import user.servidor.Errors.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\013\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\014\010\000\002\041\005\000\002\017\005\000" +
    "\002\021\002\000\002\023\004\000\002\023\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\025\007" +
    "\000\002\031\005\000\002\031\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\050" +
    "\005\000\002\051\005\000\002\052\005\000\002\053\005" +
    "\000\002\054\005\000\002\055\005\000\002\042\007\000" +
    "\002\033\007\000\002\043\010\000\002\012\010\000\002" +
    "\047\005\000\002\047\003\000\002\045\005\000\002\045" +
    "\003\000\002\046\003\000\002\046\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\064\005\000\002\065\005\000\002\056" +
    "\005\000\002\057\005\000\002\060\005\000\002\061\005" +
    "\000\002\062\005\000\002\030\015\000\002\063\005\000" +
    "\002\011\003\000\002\011\003\000\002\020\005\000\002" +
    "\007\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\006\007\000\002\006\003\000\002\005\007\000" +
    "\002\005\003\000\002\004\005\000\002\004\003\000\002" +
    "\003\005\000\002\002\005\000\002\002\003\000\002\022" +
    "\005\000\002\022\003\000\002\024\005\000\002\024\003" +
    "\000\002\035\005\000\002\035\003\000\002\036\005\000" +
    "\002\036\003\000\002\037\005\000\002\037\003\000\002" +
    "\040\005\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\004\006\001\002\000\004\002\266\001" +
    "\002\000\012\002\ufff8\003\022\036\025\061\016\001\002" +
    "\000\004\005\007\001\002\000\004\006\010\001\002\000" +
    "\004\007\011\001\002\000\004\010\012\001\002\000\004" +
    "\011\013\001\002\000\012\002\ufffb\003\ufffb\036\ufffb\061" +
    "\ufffb\001\002\000\004\002\ufffe\001\002\000\004\002\ufffd" +
    "\001\002\000\006\062\040\066\264\001\002\000\016\012" +
    "\053\027\054\030\045\031\056\037\046\040\044\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\uffff\001\002\000" +
    "\004\061\uffb0\001\002\000\004\002\000\001\002\000\004" +
    "\061\031\001\002\000\004\016\026\001\002\000\004\017" +
    "\027\001\002\000\010\002\uffc2\003\uffc2\053\uffc2\001\002" +
    "\000\006\003\ufff6\061\ufff6\001\002\000\004\062\040\001" +
    "\002\000\006\003\034\061\036\001\002\000\006\003\ufff7" +
    "\061\ufff7\001\002\000\004\002\uffae\001\002\000\004\002" +
    "\ufff9\001\002\000\006\062\040\075\037\001\002\000\004" +
    "\013\042\001\002\000\004\016\041\001\002\000\016\012" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\037\uffb4\040\uffb4\001\002" +
    "\000\004\002\uffaf\001\002\000\006\003\ufff3\063\ufff3\001" +
    "\002\000\004\013\247\001\002\000\004\013\243\001\002" +
    "\000\004\013\231\001\002\000\006\003\ufff5\063\ufff5\001" +
    "\002\000\006\003\224\063\226\001\002\000\006\003\ufff4" +
    "\063\ufff4\001\002\000\006\003\ufff2\063\ufff2\001\002\000" +
    "\004\013\167\001\002\000\004\013\152\001\002\000\006" +
    "\003\ufff1\063\ufff1\001\002\000\004\013\060\001\002\000" +
    "\006\003\ufff0\063\ufff0\001\002\000\006\003\061\052\063" +
    "\001\002\000\024\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\041\uffb7\042\uffb7\073\uffb7\074\uffb7\001\002\000\022" +
    "\032\074\033\104\034\107\035\076\036\111\042\106\073" +
    "\075\074\070\001\002\000\004\060\064\001\002\000\004" +
    "\016\065\001\002\000\004\055\066\001\002\000\004\052" +
    "\067\001\002\000\024\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\041\uffb8\042\uffb8\073\uffb8\074\uffb8\001\002\000" +
    "\004\016\150\001\002\000\010\014\uffd4\036\uffd4\042\uffd4" +
    "\001\002\000\010\014\uffd2\036\uffd2\042\uffd2\001\002\000" +
    "\010\014\146\036\uffda\042\uffda\001\002\000\004\016\144" +
    "\001\002\000\004\016\142\001\002\000\004\016\140\001" +
    "\002\000\010\014\uffd1\036\uffd1\042\uffd1\001\002\000\006" +
    "\036\025\042\106\001\002\000\010\014\uffd0\036\uffd0\042" +
    "\uffd0\001\002\000\010\014\uffce\036\uffce\042\uffce\001\002" +
    "\000\010\014\uffd5\036\uffd5\042\uffd5\001\002\000\004\016" +
    "\126\001\002\000\010\014\uffcf\036\uffcf\042\uffcf\001\002" +
    "\000\004\016\124\001\002\000\004\016\114\001\002\000" +
    "\010\014\uffd3\036\uffd3\042\uffd3\001\002\000\004\016\112" +
    "\001\002\000\004\017\113\001\002\000\010\014\uffc7\036" +
    "\uffc7\042\uffc7\001\002\000\016\044\115\045\121\046\120" +
    "\047\116\050\117\051\122\001\002\000\010\014\uffc0\036" +
    "\uffc0\042\uffc0\001\002\000\010\014\uffbd\036\uffbd\042\uffbd" +
    "\001\002\000\010\014\uffbc\036\uffbc\042\uffbc\001\002\000" +
    "\010\014\uffbe\036\uffbe\042\uffbe\001\002\000\010\014\uffbf" +
    "\036\uffbf\042\uffbf\001\002\000\010\014\uffbb\036\uffbb\042" +
    "\uffbb\001\002\000\010\014\uffc9\036\uffc9\042\uffc9\001\002" +
    "\000\004\043\125\001\002\000\014\003\uffc1\014\uffc1\036" +
    "\uffc1\042\uffc1\053\uffc1\001\002\000\004\017\127\001\002" +
    "\000\010\014\uffca\036\uffca\042\uffca\001\002\000\006\003" +
    "\uffc3\053\uffc3\001\002\000\006\003\133\053\134\001\002" +
    "\000\006\003\uffc4\053\uffc4\001\002\000\006\003\uffb5\063" +
    "\uffb5\001\002\000\004\056\136\001\002\000\006\003\uffdd" +
    "\063\uffdd\001\002\000\004\053\137\001\002\000\006\003" +
    "\uffb6\063\uffb6\001\002\000\004\017\141\001\002\000\010" +
    "\014\uffc8\036\uffc8\042\uffc8\001\002\000\004\022\143\001" +
    "\002\000\010\014\uffcd\036\uffcd\042\uffcd\001\002\000\004" +
    "\017\145\001\002\000\010\014\uffcb\036\uffcb\042\uffcb\001" +
    "\002\000\022\032\074\033\104\034\107\035\076\036\111" +
    "\042\106\073\075\074\070\001\002\000\006\036\uffdb\042" +
    "\uffdb\001\002\000\004\022\151\001\002\000\010\014\uffcc" +
    "\036\uffcc\042\uffcc\001\002\000\006\003\153\052\154\001" +
    "\002\000\020\003\uffb9\015\uffb9\020\uffb9\021\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\001\002\000\004\057\163\001\002\000" +
    "\004\015\156\001\002\000\004\016\161\001\002\000\006" +
    "\003\133\053\134\001\002\000\006\003\uffdf\063\uffdf\001" +
    "\002\000\004\017\162\001\002\000\010\003\uffe5\014\uffe5" +
    "\053\uffe5\001\002\000\004\016\164\001\002\000\004\055" +
    "\165\001\002\000\004\052\166\001\002\000\020\003\uffba" +
    "\015\uffba\020\uffba\021\uffba\023\uffba\024\uffba\025\uffba\001" +
    "\002\000\006\003\153\052\154\001\002\000\020\003\201" +
    "\015\156\020\206\021\174\023\202\024\171\025\172\001" +
    "\002\000\004\016\222\001\002\000\004\016\220\001\002" +
    "\000\006\003\133\053\134\001\002\000\004\016\215\001" +
    "\002\000\010\003\uffe7\014\uffe7\053\uffe7\001\002\000\010" +
    "\003\uffe8\014\uffe8\053\uffe8\001\002\000\010\003\uffea\014" +
    "\uffea\053\uffea\001\002\000\010\003\uffec\014\uffec\053\uffec" +
    "\001\002\000\010\003\uffe6\014\uffe6\053\uffe6\001\002\000" +
    "\004\016\213\001\002\000\010\003\uffeb\014\uffeb\053\uffeb" +
    "\001\002\000\010\003\uffe9\014\uffe9\053\uffe9\001\002\000" +
    "\010\003\uffed\014\211\053\uffed\001\002\000\004\016\207" +
    "\001\002\000\004\017\210\001\002\000\010\003\uffe4\014" +
    "\uffe4\053\uffe4\001\002\000\020\003\201\015\156\020\206" +
    "\021\174\023\202\024\171\025\172\001\002\000\006\003" +
    "\uffee\053\uffee\001\002\000\004\017\214\001\002\000\010" +
    "\003\uffe2\014\uffe2\053\uffe2\001\002\000\004\022\216\001" +
    "\002\000\010\003\uffe3\014\uffe3\053\uffe3\001\002\000\006" +
    "\003\uffef\063\uffef\001\002\000\004\026\221\001\002\000" +
    "\010\003\uffe0\014\uffe0\053\uffe0\001\002\000\004\017\223" +
    "\001\002\000\010\003\uffe1\014\uffe1\053\uffe1\001\002\000" +
    "\010\002\uffb2\003\uffb2\061\uffb2\001\002\000\010\002\ufffa" +
    "\003\ufffa\061\ufffa\001\002\000\004\064\227\001\002\000" +
    "\004\065\230\001\002\000\010\002\uffb3\003\uffb3\061\uffb3" +
    "\001\002\000\006\003\061\052\063\001\002\000\004\032" +
    "\233\001\002\000\004\016\234\001\002\000\004\017\235" +
    "\001\002\000\004\014\236\001\002\000\004\033\237\001" +
    "\002\000\004\016\240\001\002\000\004\017\241\001\002" +
    "\000\006\003\133\053\134\001\002\000\006\003\uffc6\063" +
    "\uffc6\001\002\000\006\003\153\052\154\001\002\000\002" +
    "\001\002\000\006\003\133\053\134\001\002\000\006\003" +
    "\uffde\063\uffde\001\002\000\006\003\061\052\063\001\002" +
    "\000\024\032\074\033\104\034\107\035\076\036\111\041" +
    "\255\042\106\073\075\074\070\001\002\000\010\014\uffd6" +
    "\036\uffd6\042\uffd6\001\002\000\010\014\uffd7\036\uffd7\042" +
    "\uffd7\001\002\000\010\014\262\036\uffd8\042\uffd8\001\002" +
    "\000\006\036\025\042\106\001\002\000\004\016\256\001" +
    "\002\000\004\017\257\001\002\000\010\014\uffc5\036\uffc5" +
    "\042\uffc5\001\002\000\006\003\133\053\134\001\002\000" +
    "\006\003\uffdc\063\uffdc\001\002\000\022\032\074\033\104" +
    "\034\107\035\076\036\111\042\106\073\075\074\070\001" +
    "\002\000\006\036\uffd9\042\uffd9\001\002\000\004\013\265" +
    "\001\002\000\004\061\uffb1\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\013\003\014\004\001\001\000\002\001" +
    "\001\000\020\003\016\015\022\017\013\020\014\021\017" +
    "\022\023\041\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\056\016\047\025\046\030\054" +
    "\033\042\042\050\043\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\016\023\031\041\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\016\024\034\041\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\061\001\001" +
    "\000\002\001\001\000\026\007\076\044\072\047\077\056" +
    "\102\057\070\060\107\061\071\062\101\064\100\065\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\127\011\130\020\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\076\044" +
    "\072\047\146\056\102\057\070\060\107\061\071\062\101" +
    "\064\100\065\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\156\001\001\000" +
    "\002\001\001\000\004\004\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\167\001\001\000\022\031\172\032\204\050\177\051" +
    "\202\052\176\053\203\054\175\055\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\031\211\032\204\050\177\051\202\052\176\053\203" +
    "\054\175\055\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\241" +
    "\001\001\000\002\001\001\000\004\006\243\001\001\000" +
    "\004\034\244\001\001\000\004\004\245\001\001\000\002" +
    "\001\001\000\004\005\247\001\001\000\032\007\076\044" +
    "\251\045\253\046\252\056\102\057\070\060\107\061\071" +
    "\062\101\063\250\064\100\065\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\127" +
    "\011\257\020\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\260\001\001\000\002" +
    "\001\001\000\026\007\076\044\072\047\262\056\102\057" +
    "\070\060\107\061\071\062\101\064\100\065\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ArrayList<Component> components = new ArrayList<Component>();
    private ArrayList<Trivia> trivias = new ArrayList<Trivia>();
    private ArrayList<ErrorL> errors = new ArrayList<ErrorL>();
    private String errorString = "";

    //Booleans to the trivia
    private boolean idTriviaBoolean         = false;
    private boolean nameBoolean             = false;
    private boolean timeQuestionBoolean     = false;
    private boolean userCreatorBoolean      = false;
    private boolean themeBoolean            = false;
    private boolean dateBoolean             = false;
    //Strings to the Trivia
    private String currentIdTrivia      = "";
    private String currentTimeQuestion  = "";
    private String currentName          = "";
    private String currentTheme         = "";
    private String currentDateCreation  = "";
    private String currentUserCreator   = "";

    public void cleanAttributsTrivia(){
        idTriviaBoolean     = false;
        nameBoolean         = false;
        timeQuestionBoolean = false;
        userCreatorBoolean  = false;
        themeBoolean        = false;
        dateBoolean         = false;

        currentIdTrivia         = "";
        currentTimeQuestion     = "";
        currentName             = "";
        currentTheme            = "";
        currentDateCreation     = "";
        currentUserCreator      = "";
    }

    //Booleans to the Components
    private boolean idComponentBoolean          = false;
    private boolean triviaComponentBoolean      = false;
    private boolean classComponentBoolean       = false;
    private boolean txtVisibleComponentBoolean  = false;
    private boolean responseComponentBoolean    = false;
    private boolean indexComponentBoolean       = false;
    private boolean rowComponentBoolean         = false;
    private boolean columnComponentBoolena      = false;
    //Strings to the Components
    private String currentIdComponent           = "";
    private String currentTriviaComponent       = "";
    private String currentClassComponent        = "";
    private String currentTxtVisibleComponent   = "";
    private String currentResponseComponent     = "";
    private String currentIndexComponent        = "";
    private String currentRowComponent          = "";
    private String currentColumnComponent       = "";

    public void cleanComponents(){
        idComponentBoolean          = false;
        triviaComponentBoolean      = false;
        classComponentBoolean       = false;
        txtVisibleComponentBoolean  = false;
        responseComponentBoolean    = false;
        indexComponentBoolean       = false;
        rowComponentBoolean         = false;
        columnComponentBoolena      = false;

        currentIdComponent          = "";
        currentTriviaComponent      = "";
        currentClassComponent       = "";
        currentTxtVisibleComponent  = "";
        currentResponseComponent    = "";
        currentIndexComponent       = "";
        currentRowComponent         = "";
        currentColumnComponent      = "";
    }


    public ArrayList<Component> getComponents(){
        return this.components;
    }

    public ArrayList<Trivia> getTrivias(){
        return this.trivias;
    }

    public ArrayList<ErrorL> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(errorString, line, column, "Sintactico", message));
    }

    public void addError(String message, String typeError){
        errors.add(new ErrorL(errorString, 0, 0, typeError, message));
    }

    public void syntax_error(Symbol s){
        errorString = s.value+"";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.";
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= in EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // in ::= initxson statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= statementRequest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= requests 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= oneresponse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= responses 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // initxson ::= OPENXS XSON VERSION EQUALS NUMBERVERSION ENDXS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initxson",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementRequest ::= initRequest onerequest endRequest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementRequest",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // requests ::= initMoreRequest recursiveRequest endMoreRequest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requests",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // responses ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("responses",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // recursiveRequest ::= recursiveRequest statementRequest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recursiveRequest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // recursiveRequest ::= statementRequest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recursiveRequest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // onerequest ::= newtrivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onerequest",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // onerequest ::= deleteTrivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onerequest",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // onerequest ::= editTrivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onerequest",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // onerequest ::= addcomponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onerequest",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // onerequest ::= deleteComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onerequest",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // onerequest ::= modifyComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onerequest",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // newtrivia ::= NEWTRIVIA GREATERT initParametersTrivia componentsTrivia endKeyBracket 
            {
              Object RESULT =null;
		
                if(!currentIdTrivia.equals("") && !currentName.equals("") &&
                !currentTimeQuestion.equals("") && !currentTheme.equals("")){
                    if(currentDateCreation.equals("")){
                        Date date = Calendar.getInstance().getTime();
                        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd");
                        String strDate = dateFormat.format(date);
                        Trivia trivia = new Trivia(currentIdTrivia, currentName, currentTimeQuestion,
                        currentUserCreator, currentTheme, currentDateCreation, 1);
                        trivias.add(trivia);
                        cleanAttributsTrivia();
                    } else {
                        Trivia trivia = new Trivia(currentIdTrivia, currentName, currentTimeQuestion,
                        currentUserCreator, currentTheme, currentDateCreation, 1);
                        trivias.add(trivia);
                        cleanAttributsTrivia();
                    }
                } else {
                    addError("No se cumple los requisitos para una nueva trivia", "Semantico");
                    cleanAttributsTrivia();
                }
                RESULT = "";
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newtrivia",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // componentsTrivia ::= componentsT COMMA componentsTrivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentsTrivia",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // componentsTrivia ::= componentsT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentsTrivia",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // componentsT ::= idTrivia 
            {
              Object RESULT =null;
		int idTrivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idTriviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String idTrivia = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = idTrivia.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentsT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // componentsT ::= nameTrivia 
            {
              Object RESULT =null;
		int nameTrivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameTriviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nameTrivia = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = nameTrivia.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentsT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // componentsT ::= timeQuestionTrivia 
            {
              Object RESULT =null;
		int timeQuestionTrivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int timeQuestionTriviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String timeQuestionTrivia = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = timeQuestionTrivia.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentsT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // componentsT ::= userCreatorTrivia 
            {
              Object RESULT =null;
		int userCreatorTrivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int userCreatorTriviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String userCreatorTrivia = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = userCreatorTrivia.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentsT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // componentsT ::= themeTrivia 
            {
              Object RESULT =null;
		int themeTrivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int themeTriviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String themeTrivia = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = themeTrivia.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentsT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // componentsT ::= dateTrivia 
            {
              Object RESULT =null;
		int dateTrivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dateTriviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dateTrivia = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = dateTrivia.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentsT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // componentsT ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                    int line    = (eleft)+1;
                                                                    int column  = eright;
                                                                    String message = "No se cumple con los parametros de los componentes";
                                                                    addError(line, column, message);
                                                                    RESULT = "";
                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentsT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // idTrivia ::= IDTRIVIA COLON TEXT 
            {
              String RESULT =null;
		int idTrivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idTriviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idTrivia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(idTriviaBoolean){
                    String message = "Ya existe un usuario";
                    addError(message, "Semantico");
                    RESULT = "";
                } else {
                    idTriviaBoolean = true;
                    currentIdTrivia = idTrivia.toString().replace("\"", "");
                    RESULT = currentIdTrivia;
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idTrivia",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nameTrivia ::= NAME COLON TEXT 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(nameBoolean){
                    String message      = "Ya existe un nombre";
                    addError(message, "Semantico");
                    RESULT              = "";
                } else {
                    nameBoolean = true;
                    currentName = name.toString().replace("\"", "");
                    RESULT      = currentName;
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTrivia",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // timeQuestionTrivia ::= TIMEQUESTION COLON NUMBER 
            {
              String RESULT =null;
		int timeQuestionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int timeQuestionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object timeQuestion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(timeQuestionBoolean){
                            String message = "Ya existe un usuario";
                            addError(message, "Semantico");
                            RESULT = "";
                        } else {
                            timeQuestionBoolean = true;
                            currentTimeQuestion = timeQuestion.toString().replace("\"", "");
                            RESULT = currentTimeQuestion;
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("timeQuestionTrivia",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // userCreatorTrivia ::= USERCREATOR COLON TEXT 
            {
              String RESULT =null;
		int userCreatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int userCreatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object userCreator = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(userCreatorBoolean){
                            String message  = "Ya existe un usuario creador";
                            addError(message, "Semantico");
                            RESULT          = "";
                        } else {
                            userCreatorBoolean  = true;
                            currentUserCreator  = userCreator.toString().replace("\"", "");
                            RESULT              = currentUserCreator;
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("userCreatorTrivia",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // themeTrivia ::= THEME COLON TEXT 
            {
              String RESULT =null;
		int themeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int themeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object theme = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(themeBoolean){
                    String message = "Ya existe un tema";
                    addError(message, "Semantico");
                    RESULT = "";
                } else {
                    themeBoolean = true;
                    currentTheme = theme.toString().replace("\"", "");
                    RESULT = currentTheme;
                }
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("themeTrivia",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dateTrivia ::= DATE COLON DATECREATION 
            {
              String RESULT =null;
		int dateCreationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dateCreationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dateCreation = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(dateBoolean){
                    String message = "Ya existe una fecha anterior";
                    addError(message, "Semantico");
                    RESULT = "";
                } else {
                    dateBoolean = true;
                    currentDateCreation = dateCreation.toString().replace("\"", "");
                    RESULT = currentDateCreation;
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dateTrivia",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // deleteTrivia ::= DELETETRIVIA GREATERT initParametersTrivia idTrivia endKeyBracket 
            {
              Object RESULT =null;
		int idTrivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idTriviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String idTrivia = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if(!idTrivia.toString().equals("")){
                        Trivia trivia = new Trivia(idTrivia.toString(), 2);
                        trivias.add(trivia);
                        cleanAttributsTrivia();
                        RESULT = trivia;
                    } else {
                        addError("El id no es valido para eliminar", "Semantico");
                        cleanAttributsTrivia();
                        RESULT = "";
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deleteTrivia",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // editTrivia ::= EDITTRIVIA GREATERT initParametersTrivia paramsET endKeyBracket 
            {
              Object RESULT =null;
		
                if(!currentIdTrivia.equals("") && !currentName.equals("") &&
                !currentTimeQuestion.equals("") && !currentTheme.equals("")){
                    Trivia trivia = new Trivia(currentIdTrivia, currentTimeQuestion, currentName, currentTheme, 3);
                    trivias.add(trivia);
                    cleanAttributsTrivia();
                    RESULT = trivia;
                } else {
                    cleanAttributsTrivia();
                    RESULT = "";
                }
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("editTrivia",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // addcomponent ::= ADDCOMPONENT GREATERT initParametersComponent parametersComponent typequestion endKeyBracket 
            {
              Object RESULT =null;
		
                    if(!currentIdComponent.equals("") && !currentTriviaComponent.equals("") &&
                    !currentClassComponent.equals("") && !currentTxtVisibleComponent.equals("") && currentClassComponent.equals("AREA_TEXTO") &&
                    !currentResponseComponent.equals("")){
                        if(!currentRowComponent.equals("") && !currentColumnComponent.equals("")){
                            Component component = new Component(currentIdComponent, currentTriviaComponent,
                            currentClassComponent, currentTxtVisibleComponent, currentResponseComponent, 1);
                            component.setRows(currentRowComponent);
                            component.setCols(currentColumnComponent);
                            component.setResponse(currentResponseComponent);
                            components.add(component);
                            cleanComponents();
                            RESULT = "Ok";
                        } else {
                            addError("No se pudo crear este componente, por que no cumplio con filas y columnas", "Semantico");
                            cleanComponents();
                        }
                        RESULT = "OK";
                    } else if(!currentIdComponent.equals("") && !currentTriviaComponent.equals("") && !currentClassComponent.equals("")
                              && !currentTxtVisibleComponent.equals("") && !currentResponseComponent.equals("")){
                            Component component = new Component(currentIdComponent, currentTriviaComponent, currentClassComponent,
                            currentTxtVisibleComponent, currentResponseComponent, 1);
                            component.setResponse(currentResponseComponent);
                            components.add(component);
                            cleanComponents();
                            RESULT = "OK";
                    } else {
                        addError("Error en los parametros para crear un componente","Semantico");
                        cleanComponents();
                        RESULT = "";
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addcomponent",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // modifyComponent ::= EDITCOMPONENT GREATERT initParametersComponent parametersComponentEdit typequestion endKeyBracket 
            {
              String RESULT =null;
		int typeQuestionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeQuestionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String typeQuestion = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if(!currentIdComponent.equals("") && !currentTriviaComponent.equals("") &&
                        !currentClassComponent.equals("") && !currentTxtVisibleComponent.equals("") && currentClassComponent.equals("AREA_TEXTO") &&
                        !currentResponseComponent.equals("")){
                            if(!currentRowComponent.equals("") && !currentColumnComponent.equals("")){
                                Component component = new Component(currentIdComponent, currentTriviaComponent, currentClassComponent,
                                currentIndexComponent, currentTxtVisibleComponent, currentResponseComponent,   1);
                                component.setRows(currentRowComponent);
                                component.setCols(currentColumnComponent);
                                component.setResponse(currentResponseComponent);
                                components.add(component);
                                cleanComponents();
                                RESULT = "OK";
                            } else {
                                addError("No se pudo crear este componente, por que no cumplio con filas y columnas", "Semantico");
                                cleanComponents();
                            }
                            RESULT = "OK";
                        } else if(!currentIdComponent.equals("") && !currentTriviaComponent.equals("") && !currentClassComponent.equals("")
                                  && !currentTxtVisibleComponent.equals("") && !currentResponseComponent.equals("")){
                                Component component = new Component(currentIdComponent, currentTriviaComponent, currentClassComponent,
                                currentIndexComponent, currentTxtVisibleComponent, currentResponseComponent,   1);
                                component.setResponse(currentResponseComponent);
                                components.add(component);
                                cleanComponents();
                                RESULT = "OK";
                    } else {
                            addError("Error en los parametros para crear un componente","Semantico");
                            cleanComponents();
                            RESULT = "";
                    }
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifyComponent",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametersComponent ::= parameterC COMMA parametersComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametersComponent",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametersComponent ::= parameterC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametersComponent",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametersComponentEdit ::= editComponent COMMA parametersComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametersComponentEdit",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametersComponentEdit ::= editComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametersComponentEdit",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // editComponent ::= parameterC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("editComponent",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // editComponent ::= index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("editComponent",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameterC ::= idComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterC",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameterC ::= triviaComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterC",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameterC ::= classTriviaComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterC",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameterC ::= txtComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterC",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameterC ::= optionsresponse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterC",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameterC ::= rowComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterC",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parameterC ::= columnComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterC",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parameterC ::= responseComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterC",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rowComponent ::= ROW COLON NUMBER 
            {
              String RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    currentRowComponent = number.toString();
                    RESULT = currentRowComponent;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rowComponent",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // columnComponent ::= COLUMN COLON NUMBER 
            {
              String RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    currentColumnComponent = number.toString();
                    RESULT = currentColumnComponent;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("columnComponent",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // idComponent ::= ID COLON TEXT 
            {
              String RESULT =null;
		int idComponentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idComponentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idComponent = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(idComponentBoolean){
                        String message = "Ya existe el id del componente";
                        addError(message, "Semantico");
                        RESULT         = "";
                    } else {
                        idComponentBoolean = true;
                        currentIdComponent = idComponent.toString().replace("\"", "");
                        RESULT             = currentIdComponent;
                    }
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idComponent",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // triviaComponent ::= TRIVIA COLON TEXT 
            {
              String RESULT =null;
		int trivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int triviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object trivia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(triviaComponentBoolean){
                            String message = "Ya existe una trivia anterior";
                            addError(message, "Semantico");
                            RESULT = "";
                        } else {
                            triviaComponentBoolean = true;
                            currentTriviaComponent = trivia.toString().replace("\"", "");
                            RESULT = currentTriviaComponent;
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("triviaComponent",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // classTriviaComponent ::= CLASSTRIVIA COLON classComponent 
            {
              String RESULT =null;
		int classComponentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classComponentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String classComponent = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            if(classComponentBoolean){
                                String message = "Ya existe una clase del componente";
                                addError(message, "Semantico");
                                RESULT = "";
                            } else {
                                classComponentBoolean = true;
                                currentClassComponent = classComponent.toString().replace("\"", "");
                                RESULT = currentClassComponent;
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classTriviaComponent",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // txtComponent ::= TXTVISIBLE COLON TEXT 
            {
              String RESULT =null;
		int txtVisibleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int txtVisibleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object txtVisible = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(txtVisibleComponentBoolean){
                        String message = "Ya existe un texto visible";
                        addError(message, "Semantico");
                        RESULT = "";
                    } else {
                        txtVisibleComponentBoolean = true;
                        currentTxtVisibleComponent = txtVisible.toString().replace("\"", "");
                        RESULT = currentTxtVisibleComponent;
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("txtComponent",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // responseComponent ::= RESPONSETRIVIA COLON TEXT 
            {
              String RESULT =null;
		int responseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int responseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object response = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(responseComponentBoolean){
                            addError("Ya existe una respuesta anterior", "Semantico");
                            RESULT = "";
                        } else {
                            responseComponentBoolean = true;
                            currentResponseComponent = response.toString();
                            RESULT = currentResponseComponent;
                        }
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("responseComponent",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // deleteComponent ::= DELETECOMPONENT GREATERT initParametersComponent ID COLON TEXT COMMA TRIVIA COLON TEXT endKeyBracket 
            {
              Object RESULT =null;
		int idTrivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idTriviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object idTrivia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int trivialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int triviaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object trivia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if(!idTrivia.toString().equals("") && !trivia.toString().equals("")){
                            Component component = new Component(idTrivia.toString(), trivia.toString(), 2);
                            components.add(component);
                            cleanComponents();
                            RESULT = component;
                        } else {
                            addError("Los errores para eliminar una trivia no se cumplen", "Semantico");
                            cleanComponents();
                            RESULT = "";
                        }
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deleteComponent",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // index ::= INDEX COLON TEXT 
            {
              String RESULT =null;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(indexComponentBoolean){
                addError("Ya existe un indice anterior para modificar", "Semantico");
                RESULT = "";
            } else {
                indexComponentBoolean = true;
                currentIndexComponent = index.toString();
                RESULT = currentIndexComponent;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // typequestion ::= oneresponse 
            {
              String RESULT =null;
		int oneResponseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oneResponseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object oneResponse = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = oneResponse.toString().replace("\"", "");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typequestion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // typequestion ::= optionsresponse 
            {
              String RESULT =null;
		int optionsResponseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int optionsResponseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String optionsResponse = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = optionsResponse.toString().replace("\"", "");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typequestion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // oneresponse ::= RESPONSETRIVIA COLON TEXT 
            {
              Object RESULT =null;
		int textResponseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int textResponseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object textResponse = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = textResponse.toString().replace("\"", "");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneresponse",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // optionsresponse ::= OPTIONS COLON OPTIONSRESPONSES 
            {
              String RESULT =null;
		int optionsResponseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int optionsResponseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object optionsResponse = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = optionsResponse.toString().replace("\"", "");
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionsresponse",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // classComponent ::= TEXTFIELD 
            {
              String RESULT =null;
		int txtFieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int txtFieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object txtField = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = txtField.toString().replace("\"", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classComponent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // classComponent ::= TEXTAREA 
            {
              String RESULT =null;
		int txtArealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int txtArearight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object txtArea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = txtArea.toString().replace("\"", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classComponent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // classComponent ::= CHECKBOX 
            {
              String RESULT =null;
		int checkBoxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int checkBoxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object checkBox = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = checkBox.toString().replace("\"", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classComponent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // classComponent ::= RADIO 
            {
              String RESULT =null;
		int radioleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int radioright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object radio = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = radio.toString().replace("\"", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classComponent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // classComponent ::= CARDINEX 
            {
              String RESULT =null;
		int cardIndexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cardIndexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cardIndex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = cardIndex.toString().replace("\"", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classComponent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // classComponent ::= COMBO 
            {
              String RESULT =null;
		int comboleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comboright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object combo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = combo.toString().replace("\"", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classComponent",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // initParametersTrivia ::= KEYA PARAMETERSTRIVIA COLON BRACKETA KEYA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initParametersTrivia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // initParametersTrivia ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                int line        = (eleft)+1;
                                                                                int column      = eright;
                                                                                String message  = "No se cumple los parametros para crear la trivia";
                                                                                addError(line, column, message);
                                                                                RESULT = "";
                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initParametersTrivia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // initParametersComponent ::= KEYA PARAMETERSCOMPONENT COLON BRACKETA KEYA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initParametersComponent",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // initParametersComponent ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                   int line        = (eleft)+1;
                                                                                   int column      = eright;
                                                                                   String message  = "No se cumple los parametros para iniciar los componentes";
                                                                                   addError(line, column, message);
                                                                                   RESULT = "";
                                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initParametersComponent",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // endKeyBracket ::= KEYC BRACKETC KEYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endKeyBracket",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // endKeyBracket ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        int line        = (eleft)+1;
                                                        int column      = eright;
                                                        String message  = "No se cumple los parametros para iniciar las solicitudes";
                                                        addError(line, column, message);
                                                        RESULT = "";
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endKeyBracket",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // initRequest ::= OPENREQ INREQUEST COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initRequest",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // endRequest ::= LESST EDREQUEST ENDREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endRequest",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // endRequest ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                     int line        = (eleft)+1;
                                                     int column      = eright;
                                                     String message  = "No se cumple los parametros para iniciar las solicitudes";
                                                     addError(line, column, message);
                                                     RESULT = "";
                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endRequest",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // initMoreRequest ::= OPENREQ INITREQUESTS GREATERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initMoreRequest",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // initMoreRequest ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                          int line        = (eleft)+1;
                                                          int column      = eright;
                                                          String message  = "No se cumple los parametros para iniciar las solicitudes";
                                                          addError(line, column, message);
                                                          RESULT = "";
                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initMoreRequest",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // endMoreRequest ::= OPENREQ ENDREQUESTS GREATERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endMoreRequest",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // endMoreRequest ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                         int line        = (eleft)+1;
                                                         int column      = eright;
                                                         String message  = "No se cumple los parametros para iniciar las solicitudes";
                                                         addError(line, column, message);
                                                         RESULT = "";
                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endMoreRequest",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // oneResponse ::= OPENREQ INRESPONSE GREATERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneResponse",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // oneResponse ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                       int line        = (eleft)+1;
                                       int column      = eright;
                                       String message  = "No se cumple los parametros para iniciar las solicitudes";
                                       addError(line, column, message);
                                       RESULT = "";
                                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneResponse",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // endResponse ::= OPENREQ EDRESPONSE ENDREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endResponse",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // endResponse ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        int line        = (eleft)+1;
                                        int column      = eright;
                                        String message  = "No se cumple los parametros para finalizar una respuesta";
                                        addError(line, column, message);
                                        RESULT = "";
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endResponse",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // initMoreResponses ::= OPENREQ INITRESPONSES GREATERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initMoreResponses",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // initMoreResponses ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                             int line        = (eleft)+1;
                                             int column      = eright;
                                             String message  = "No se cumple los parametros para iniciar las respuesta";
                                             addError(line, column, message);
                                             RESULT = "";
                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initMoreResponses",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // endMoreResponses ::= OPENREQ ENDRESPONSES ENDREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endMoreResponses",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // endMoreResponses ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            int line        = (eleft)+1;
                                            int column      = eright;
                                            String message  = "No se cumple los parametros para finalizar una respuesta";
                                            addError(line, column, message);
                                            RESULT = "";
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endMoreResponses",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
