
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package user.servidor.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import user.servidor.Objects.*;
import user.servidor.Errors.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class UserParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return UserParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public UserParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public UserParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public UserParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\037\004\000\002\003" +
    "\003\000\002\003\003\000\002\022\005\000\002\023\003" +
    "\000\002\007\005\000\002\011\006\000\002\011\005\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\013\007\000\002\035\003\000\002\035\005\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\024\005\000" +
    "\002\025\005\000\002\026\005\000\002\027\005\000\002" +
    "\030\005\000\002\014\007\000\002\016\005\000\002\016" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\031\005\000\002\032\005\000\002\033\005\000\002" +
    "\034\005\000\002\015\007\000\002\021\007\000\002\021" +
    "\004\000\002\020\005\000\002\020\004\000\002\004\005" +
    "\000\002\004\004\000\002\006\005\000\002\006\004\000" +
    "\002\002\010\000\002\002\003\000\002\010\005\000\002" +
    "\010\003\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\006\003\006\036\007\001\002\000\004\002" +
    "\172\001\002\000\006\003\017\031\021\001\002\000\006" +
    "\003\uffd0\031\uffd0\001\002\000\004\037\010\001\002\000" +
    "\004\040\011\001\002\000\004\041\012\001\002\000\004" +
    "\011\013\001\002\000\004\042\014\001\002\000\006\003" +
    "\uffd1\031\uffd1\001\002\000\006\003\154\031\155\001\002" +
    "\000\004\002\ufffe\001\002\000\010\003\uffce\010\153\031" +
    "\uffce\001\002\000\004\002\000\001\002\000\006\032\150" +
    "\043\147\001\002\000\004\002\uffff\001\002\000\010\004" +
    "\025\017\026\023\033\001\002\000\004\002\ufffc\001\002" +
    "\000\004\005\121\001\002\000\004\005\065\001\002\000" +
    "\006\003\ufff6\033\ufff6\001\002\000\006\003\ufff8\033\ufff8" +
    "\001\002\000\006\003\ufff7\033\ufff7\001\002\000\006\003" +
    "\057\033\061\001\002\000\004\005\034\001\002\000\006" +
    "\003\036\024\037\001\002\000\004\007\046\001\002\000" +
    "\004\024\044\001\002\000\004\025\040\001\002\000\004" +
    "\010\041\001\002\000\004\026\042\001\002\000\004\024" +
    "\043\001\002\000\026\003\uffd9\004\uffd9\007\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\020\uffd9\021\uffd9\022\uffd9\001" +
    "\002\000\026\003\uffd8\004\uffd8\007\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\020\uffd8\021\uffd8\022\uffd8\001\002\000" +
    "\006\003\051\027\052\001\002\000\004\010\047\001\002" +
    "\000\004\011\050\001\002\000\010\003\uffec\006\uffec\027" +
    "\uffec\001\002\000\004\027\056\001\002\000\004\030\054" +
    "\001\002\000\006\003\uffda\033\uffda\001\002\000\004\027" +
    "\055\001\002\000\006\003\uffd7\033\uffd7\001\002\000\006" +
    "\003\uffd6\033\uffd6\001\002\000\004\035\064\001\002\000" +
    "\004\002\ufffd\001\002\000\004\034\062\001\002\000\004" +
    "\035\063\001\002\000\010\002\uffd3\003\uffd3\031\uffd3\001" +
    "\002\000\010\002\uffd2\003\uffd2\031\uffd2\001\002\000\006" +
    "\003\036\024\037\001\002\000\016\003\077\004\070\014" +
    "\103\020\071\021\101\022\074\001\002\000\010\003\uffe2" +
    "\006\uffe2\027\uffe2\001\002\000\004\010\117\001\002\000" +
    "\004\010\115\001\002\000\010\003\uffe4\006\uffe4\027\uffe4" +
    "\001\002\000\010\003\uffe0\006\uffe0\027\uffe0\001\002\000" +
    "\004\010\113\001\002\000\010\003\uffe5\006\111\027\uffe5" +
    "\001\002\000\010\003\uffe1\006\uffe1\027\uffe1\001\002\000" +
    "\010\003\uffdf\006\uffdf\027\uffdf\001\002\000\010\003\uffe3" +
    "\006\uffe3\027\uffe3\001\002\000\004\010\107\001\002\000" +
    "\006\003\051\027\052\001\002\000\004\010\104\001\002" +
    "\000\004\011\105\001\002\000\010\003\uffe9\006\uffe9\027" +
    "\uffe9\001\002\000\006\003\uffe7\033\uffe7\001\002\000\004" +
    "\011\110\001\002\000\010\003\uffdc\006\uffdc\027\uffdc\001" +
    "\002\000\016\003\077\004\070\014\103\020\071\021\101" +
    "\022\074\001\002\000\006\003\uffe6\027\uffe6\001\002\000" +
    "\004\016\114\001\002\000\010\003\uffdb\006\uffdb\027\uffdb" +
    "\001\002\000\004\011\116\001\002\000\010\003\uffde\006" +
    "\uffde\027\uffde\001\002\000\004\011\120\001\002\000\010" +
    "\003\uffdd\006\uffdd\027\uffdd\001\002\000\006\003\036\024" +
    "\037\001\002\000\016\003\131\007\046\012\135\013\134" +
    "\014\103\015\123\001\002\000\004\010\145\001\002\000" +
    "\010\003\ufff2\006\ufff2\027\ufff2\001\002\000\010\003\uffee" +
    "\006\uffee\027\uffee\001\002\000\006\003\051\027\052\001" +
    "\002\000\010\003\ufff4\006\142\027\ufff4\001\002\000\010" +
    "\003\uffef\006\uffef\027\uffef\001\002\000\010\003\uffed\006" +
    "\uffed\027\uffed\001\002\000\010\003\ufff1\006\ufff1\027\ufff1" +
    "\001\002\000\010\003\ufff0\006\ufff0\027\ufff0\001\002\000" +
    "\004\010\140\001\002\000\004\010\136\001\002\000\004" +
    "\011\137\001\002\000\010\003\uffeb\006\uffeb\027\uffeb\001" +
    "\002\000\004\011\141\001\002\000\010\003\uffea\006\uffea" +
    "\027\uffea\001\002\000\016\003\131\007\046\012\135\013" +
    "\134\014\103\015\123\001\002\000\006\003\ufff3\027\ufff3" +
    "\001\002\000\006\003\ufff5\033\ufff5\001\002\000\004\016" +
    "\146\001\002\000\010\003\uffe8\006\uffe8\027\uffe8\001\002" +
    "\000\004\005\152\001\002\000\004\010\151\001\002\000" +
    "\010\004\uffd5\017\uffd5\023\uffd5\001\002\000\006\003\uffcf" +
    "\031\uffcf\001\002\000\010\004\uffd4\017\uffd4\023\uffd4\001" +
    "\002\000\004\010\153\001\002\000\004\032\150\001\002" +
    "\000\006\003\162\031\164\001\002\000\010\004\025\017" +
    "\026\023\033\001\002\000\006\003\057\033\061\001\002" +
    "\000\006\003\ufff9\031\ufff9\001\002\000\006\002\uffcc\010" +
    "\153\001\002\000\004\002\ufffb\001\002\000\006\032\150" +
    "\044\170\001\002\000\010\004\025\017\026\023\033\001" +
    "\002\000\006\003\057\033\061\001\002\000\006\003\ufffa" +
    "\031\ufffa\001\002\000\004\005\171\001\002\000\004\002" +
    "\uffcd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\006\002\004\037\003\001\001\000\002\001" +
    "\001\000\016\003\017\004\022\007\023\010\014\022\021" +
    "\023\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\156\011\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\031\013" +
    "\027\014\030\015\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\057\001\001\000\002" +
    "\001\001\000\004\021\034\001\001\000\004\024\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\065\001\001\000\020\016" +
    "\101\017\074\027\075\031\071\032\077\033\066\034\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\111\017\074\027\075\031\071\032\077\033\066\034" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\121\001\001\000\020" +
    "\024\123\025\131\026\132\027\127\030\124\035\125\036" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\024\123\025\131\026\132\027\127\030\124\035" +
    "\142\036\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\164\012\162\001\001\000\012\005\157\013\027\014\030" +
    "\015\026\001\001\000\004\006\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\165\013\027\014\030\015\026\001\001\000" +
    "\004\006\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$UserParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$UserParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$UserParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ArrayList<User> users = new ArrayList<User>();
    private ArrayList<ErrorL> errors = new ArrayList<ErrorL>();
    private String errorString = "";

    private String currentUser = "";
    private String currentPassword = "";
    private String currentName = "";
    private String currentInstitution = "";
    private String currentDateCreation = "";
    private String currentOldUser = "";
    private boolean currentUserBoolean = false;
    private boolean currentPasswordBoolean = false;
    private boolean currentNameBoolean = false;
    private boolean currentInstitutionBoolean = false;
    private boolean currentDateCreationBoolean = false;
    private boolean currentOldUserBoolean = false;

    public void emptyParameters(){
        currentUser = "";
        currentPassword = "";
        currentName = "";
        currentInstitution = "";
        currentDateCreation = "";
        currentOldUser = "";
        currentUserBoolean = false;
        currentPasswordBoolean = false;
        currentNameBoolean = false;
        currentInstitutionBoolean = false;
        currentDateCreationBoolean = false;
        currentOldUserBoolean = false;
    }

    public ArrayList<User> getUsers(){
        return this.users;
    }

    public ArrayList<ErrorL> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(errorString, line, column, "Sintactico", message));
    }

    public void addError(String message, String typeError){
        errors.add(new ErrorL(errorString, 0, 0, typeError, message));
    }

    public void syntax_error(Symbol s){
        errorString = s.value+"";
        String message = "Error síntactico irrecuperable en la Línea " +
                (s.left)+ " Columna "+s.right+". Componente " + s.value +
                " no reconocido.";
                System.out.println(message);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.";
        System.out.println(message);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$UserParser$actions {
  private final UserParser parser;

  /** Constructor */
  CUP$UserParser$actions(UserParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$UserParser$do_action_part00000000(
    int                        CUP$UserParser$act_num,
    java_cup.runtime.lr_parser CUP$UserParser$parser,
    java.util.Stack            CUP$UserParser$stack,
    int                        CUP$UserParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$UserParser$result;

      /* select the action based on the action number */
      switch (CUP$UserParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= in EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).value;
		RESULT = start_val;
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$UserParser$parser.done_parsing();
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // in ::= initxson statement 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("in",29, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= singleRequest 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= multipleRequest 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // singleRequest ::= initRequest onerequest endRequest 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("singleRequest",16, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // multipleRequest ::= requests 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("multipleRequest",17, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // requests ::= initMoreRequest recursiveRequest endMoreRequest 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("requests",5, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // recursiveRequest ::= recursiveRequest initRequest onerequest endRequest 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("recursiveRequest",7, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-3)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // recursiveRequest ::= initRequest onerequest endRequest 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("recursiveRequest",7, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // onerequest ::= newuser 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("onerequest",3, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // onerequest ::= edituser 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("onerequest",3, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // onerequest ::= deleteuser 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("onerequest",3, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // newuser ::= NEWUSER GREATERT initDataUser paramStructureUser endKeyBracket 
            {
              Object RESULT =null;
		
                if(!currentUser.equals("") && !currentPassword.equals("") && !currentName.equals("")
                && !currentInstitution.equals("")){
                    if(!currentDateCreation.equals("")){
                        User user = new User(currentUser, currentPassword, currentName,
                        currentInstitution, currentDateCreation, 1);
                        users.add(user);
                        emptyParameters();
                    } else {
                        Date date = Calendar.getInstance().getTime();
                        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd");
                        String strDate = dateFormat.format(date);
                        User user = new User(currentUser, currentPassword, currentName,
                        currentInstitution, strDate, 1);
                        users.add(user);
                        emptyParameters();
                    }
                } else {
                    String message = "Error a la creacion de un usuario no cumples con todos los campos";
                    addError(message, "Semantico");
                    emptyParameters();
                }
           
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("newuser",9, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-4)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramStructureUser ::= paramsUserStructure 
            {
              String RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramStructureUser",27, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramStructureUser ::= paramsUserStructure COMMA paramStructureUser 
            {
              String RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramStructureUser",27, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramsUserStructure ::= userStructure 
            {
              String RESULT =null;
		int userleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int userright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		String user = (String)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		System.out.println("user+" + user.toString());
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsUserStructure",28, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramsUserStructure ::= passwordStructure 
            {
              String RESULT =null;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		String password = (String)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		System.out.println("password+ " + password.toString());
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsUserStructure",28, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramsUserStructure ::= nameStructure 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		System.out.println("Name: " + name.toString());
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsUserStructure",28, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramsUserStructure ::= institutionStructure 
            {
              String RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		System.out.println("institution " + ins.toString());
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsUserStructure",28, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramsUserStructure ::= dateStructure 
            {
              String RESULT =null;
		int dateleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		String date = (String)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		System.out.println("date" + date.toString());
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsUserStructure",28, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramsUserStructure ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                            int line       = (eleft)+1;
                            int column     = eright;
                            String message = "No se cumple la estructura de usuario, se espera \"PASSWORD: \"PASSWORD DEL USUARIO\" ,";
                            addError(line, column, message);
                            RESULT = "";
                        
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsUserStructure",28, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // userStructure ::= USER COLON TEXT 
            {
              String RESULT =null;
		int userleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int userright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object user = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                        if(currentUserBoolean){
                            String message = "Ya existia un usuario";
                            addError(message, "Semantico");
                            RESULT = "";
                        } else {
                            currentUserBoolean = true;
                            currentUser = user.toString().replace("\"", "");
                            RESULT = currentUser;
                        }
                   
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("userStructure",18, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // passwordStructure ::= PASSWORD COLON TEXT 
            {
              String RESULT =null;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object password = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                        if(currentPasswordBoolean){
                            String message = "Ya existe una password";
                            addError(message, "Semantico");
                            RESULT = "";
                        } else {
                            currentPasswordBoolean = true;
                            currentPassword = password.toString().replace("\"", "");
                            RESULT = currentPassword;
                        }
                    
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("passwordStructure",19, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nameStructure ::= NAME COLON TEXT 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                    if(currentNameBoolean){
                        String message = "Ya existe un nombre";
                        addError(message, "Semantico");
                        RESULT = "";
                    } else {
                        currentNameBoolean = true;
                        currentName = name.toString().replace("\"", "");
                        RESULT = currentName;
                    }
                
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("nameStructure",20, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // institutionStructure ::= INSTITUTION COLON TEXT 
            {
              String RESULT =null;
		int institutionleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int institutionright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object institution = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                            if(currentInstitutionBoolean){
                                String message = "Ya existe una institucion";
                                addError(message, "Semantico");
                                RESULT = "";
                            } else {
                                currentInstitutionBoolean = true;
                                currentInstitution = institution.toString().replace("\"", "");
                                RESULT = currentInstitution;
                            }
                        
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("institutionStructure",21, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dateStructure ::= DATE COLON DATECREATION 
            {
              String RESULT =null;
		int dateCreationleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int dateCreationright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object dateCreation = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                    if(currentDateCreationBoolean){
                        String message = "Ya existia una fecha anterior";
                        addError(message, "Semantico");
                        RESULT = "";
                    } else {
                        currentDateCreationBoolean = true;
                        currentDateCreation = dateCreation.toString().replace("\"", "");
                        RESULT = dateCreation.toString();
                    }
                
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("dateStructure",22, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // edituser ::= EDITUSER GREATERT initDataUser paramsEdit endKeyBracket 
            {
              Object RESULT =null;
		
                if(!currentOldUser.equals("") && !currentUser.equals("") && !currentPassword.equals("")
                && currentInstitution.equals("")){
                    if(!currentDateCreation.equals("")){
                        User user = new User(currentOldUser, currentUser, currentPassword,
                        currentInstitution, 2, currentDateCreation);
                        users.add(user);
                        emptyParameters();
                    } else {
                        Date date = Calendar.getInstance().getTime();
                        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd");
                        String strDate = dateFormat.format(date);
                        User user = new User(currentOldUser, currentUser, currentPassword,
                        currentInstitution, 2, strDate);
                        users.add(user);
                        emptyParameters();
                    }
                }
            
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("edituser",10, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-4)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // paramsEdit ::= paramsEditUser COMMA paramsEdit 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsEdit",12, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // paramsEdit ::= paramsEditUser 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsEdit",12, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paramsEditUser ::= oldUserStructure 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsEditUser",13, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramsEditUser ::= newUserStructure 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsEditUser",13, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramsEditUser ::= newPasswordStructure 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsEditUser",13, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramsEditUser ::= institutionStructure 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsEditUser",13, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramsEditUser ::= dateEditStructure 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsEditUser",13, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramsEditUser ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		

                
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("paramsEditUser",13, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // oldUserStructure ::= OLDUSER COLON TEXT 
            {
              String RESULT =null;
		int olduserleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int olduserright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object olduser = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                        if(currentOldUserBoolean){
                            String message = "Ya existia un usuario antiguo";
                            addError(message, "Semantico");
                            RESULT = "";
                        } else {
                            currentOldUserBoolean = true;
                            currentOldUser = olduser.toString().replace("\"", "");
                            RESULT = currentOldUser;
                        }
                    
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("oldUserStructure",23, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // newUserStructure ::= NEWUSER COLON TEXT 
            {
              String RESULT =null;
		int newuserleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int newuserright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object newuser = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                        if(currentUserBoolean){
                            String message = "Ya existia un usuario";
                            addError(message, "Semantico");
                            RESULT = "";
                        } else {
                            currentUserBoolean = true;
                            currentUser = newuser.toString().replace("\"", "");
                            RESULT = currentUser;
                        }
                    
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("newUserStructure",24, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // newPasswordStructure ::= NEWPASSWORD COLON TEXT 
            {
              String RESULT =null;
		int newpasswordleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int newpasswordright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object newpassword = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                            if(currentPasswordBoolean){
                                String message = "Ya existia una password";
                                addError(message, "Semantico");
                                RESULT = "";
                            } else {
                                currentPasswordBoolean = true;
                                currentPassword = newpassword.toString().replace("\"", "");
                                RESULT = currentPassword;
                            }
                        
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("newPasswordStructure",25, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dateEditStructure ::= DATEEDIT COLON DATECREATION 
            {
              String RESULT =null;
		int dateCreationleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int dateCreationright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object dateCreation = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                        if(currentDateCreationBoolean){
                            String message = "Ya existia anteriormente una fecha";
                            addError(message, "Semantico");
                            RESULT = "";
                        } else {
                            currentDateCreationBoolean = true;
                            currentDateCreation = dateCreation.toString().replace("\"", "");
                            RESULT = currentDateCreation;
                        }
                     
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("dateEditStructure",26, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // deleteuser ::= DELETEUSER GREATERT initDataUser userStructure endKeyBracket 
            {
              Object RESULT =null;
		int userleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).left;
		int userright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).right;
		String user = (String)((java_cup.runtime.Symbol) CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).value;
		
                if(!user.toString().equals("") | user != null){
                    User userResult = new User(user.toString(), 3);
                    users.add(userResult);
                    RESULT = user;
                } else {
                    int line   = (userleft)+1;
                    int column = userright;
                    String message = "Error semantico el usuario es invalido para eliminar";
                    addError(line, column, message);
                    RESULT = "";
                }
              
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("deleteuser",11, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-4)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // initDataUser ::= KEYA USERDATA COLON BRACKETA KEYA 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("initDataUser",15, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-4)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // initDataUser ::= error KEYA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).value;
		
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden de las llaves de apertura xson";
                    addError(line, column, message);
                    RESULT = "";
                
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("initDataUser",15, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // endKeyBracket ::= KEYC BRACKETC KEYC 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("endKeyBracket",14, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // endKeyBracket ::= error KEYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).value;
		
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden de cierre de llaves en xson";
                    addError(line, column, message);
                    RESULT = "";
                
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("endKeyBracket",14, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // initRequest ::= OPENREQ INREQUEST COLON 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("initRequest",2, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // initRequest ::= error COLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).value;
		
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden para iniciar una solicitud de login";
                    addError(line, column, message);
                    RESULT = "";
               
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("initRequest",2, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // endRequest ::= LESST EDREQUEST ENDREQ 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("endRequest",4, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // endRequest ::= error ENDREQ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)).value;
		
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden para finalizar una solicitud de llaves en xson";
                    addError(line, column, message);
                    RESULT = "";
               
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("endRequest",4, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-1)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // initxson ::= OPENXS XSON VERSION EQUALS TEXT ENDXS 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("initxson",0, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-5)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // initxson ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                int line        = (eleft)+1;
                int column      = eright;
                String message  = "No se cumple los parametros para iniciar el xson";
                addError(line, column, message);
                RESULT = "";
            
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("initxson",0, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // initMoreRequest ::= OPENREQ INITREQUESTS GREATERT 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("initMoreRequest",6, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // initMoreRequest ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                        int line        = (eleft)+1;
                        int column      = eright;
                        String message  = "No se cumple los parametros para iniciar las solicitudes";
                        addError(line, column, message);
                        RESULT = "";
                     
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("initMoreRequest",6, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // endMoreRequest ::= OPENREQ ENDREQUESTS GREATERT 
            {
              Object RESULT =null;

              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("endMoreRequest",8, ((java_cup.runtime.Symbol)CUP$UserParser$stack.elementAt(CUP$UserParser$top-2)), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // endMoreRequest ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$UserParser$stack.peek()).value;
		
                        int line        = (eleft)+1;
                        int column      = eright;
                        String message  = "No se cumple los parametros para finalizar las solicitudes";
                        addError(line, column, message);
                        RESULT = "";
                    
              CUP$UserParser$result = parser.getSymbolFactory().newSymbol("endMoreRequest",8, ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserParser$stack.peek()), RESULT);
            }
          return CUP$UserParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$UserParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$UserParser$do_action(
    int                        CUP$UserParser$act_num,
    java_cup.runtime.lr_parser CUP$UserParser$parser,
    java.util.Stack            CUP$UserParser$stack,
    int                        CUP$UserParser$top)
    throws java.lang.Exception
    {
              return CUP$UserParser$do_action_part00000000(
                               CUP$UserParser$act_num,
                               CUP$UserParser$parser,
                               CUP$UserParser$stack,
                               CUP$UserParser$top);
    }
}

}
