package user.servidor.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Date.*;
import user.servidor.Objects.*;
import user.servidor.Errors.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;


class Parser;


parser code{:
    private ArrayList<Component> components = new ArrayList<Component>();
    private ArrayList<Trivia> trivias = new ArrayList<Trivia>();
    private ArrayList<ErrorL> errors = new ArrayList<ErrorL>();
    private String errorString = "";

    //Booleans to the trivia
    private boolean idTriviaBoolean         = false;
    private boolean nameBoolean             = false;
    private boolean timeQuestionBoolean     = false;
    private boolean userCreatorBoolean      = false;
    private boolean themeBoolean            = false;
    private boolean dateBoolean             = false;
    //Strings to the Trivia
    private String currentIdTrivia      = "";
    private String currentTimeQuestion  = "";
    private String currentName          = "";
    private String currentTheme         = "";
    private String currentDateCreation  = "";
    private String currentUserCreator   = "";

    public void cleanAttributsTrivia(){
        idTriviaBoolean     = false;
        nameBoolean         = false;
        timeQuestionBoolean = false;
        userCreatorBoolean  = false;
        themeBoolean        = false;
        dateBoolean         = false;

        currentIdTrivia         = "";
        currentTimeQuestion     = "";
        currentName             = "";
        currentTheme            = "";
        currentDateCreation     = "";
        currentUserCreator      = "";
    }

    //Booleans to the Components
    private boolean idComponentBoolean          = false;
    private boolean triviaComponentBoolean      = false;
    private boolean classComponentBoolean       = false;
    private boolean txtVisibleComponentBoolean  = false;
    private boolean responseComponentBoolean    = false;
    private boolean indexComponentBoolean       = false;
    private boolean rowComponentBoolean         = false;
    private boolean columnComponentBoolena      = false;
    //Strings to the Components
    private String currentIdComponent           = "";
    private String currentTriviaComponent       = "";
    private String currentClassComponent        = "";
    private String currentTxtVisibleComponent   = "";
    private String currentResponseComponent     = "";
    private String currentIndexComponent        = "";
    private String currentRowComponent          = "";
    private String currentColumnComponent       = "";

    public void cleanComponents(){
        idComponentBoolean          = false;
        triviaComponentBoolean      = false;
        classComponentBoolean       = false;
        txtVisibleComponentBoolean  = false;
        responseComponentBoolean    = false;
        indexComponentBoolean       = false;
        rowComponentBoolean         = false;
        columnComponentBoolena      = false;

        currentIdComponent          = "";
        currentTriviaComponent      = "";
        currentClassComponent       = "";
        currentTxtVisibleComponent  = "";
        currentResponseComponent    = "";
        currentIndexComponent       = "";
        currentRowComponent         = "";
        currentColumnComponent      = "";
    }


    public ArrayList<Component> getComponents(){
        return this.components;
    }

    public ArrayList<Trivia> getTrivias(){
        return this.trivias;
    }

    public ArrayList<ErrorL> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(errorString, line, column, "Sintactico", message));
    }

    public void addError(String message, String typeError){
        errors.add(new ErrorL(errorString, 0, 0, typeError, message));
    }

    public void syntax_error(Symbol s){
        errorString = s.value+"";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.";
    }


:}

terminal OPENXS, XSON, VERSION, EQUALS, NUMBERVERSION, ENDXS, NEWTRIVIA, GREATERT, COMMA, IDTRIVIA,
         COLON, TEXT, NAME, TIMEQUESTION, NUMBER, USERCREATOR, THEME, DATE, DATECREATION, DELETETRIVIA,
         EDITTRIVIA, ADDCOMPONENT, ID, TRIVIA, CLASSTRIVIA, TXTVISIBLE, RESPONSETRIVIA, DELETECOMPONENT,
         EDITCOMPONENT, INDEX, OPTIONS, OPTIONSRESPONSES, TEXTFIELD, TEXTAREA, CHECKBOX, RADIO, CARDINEX,
         COMBO, KEYA, KEYC, USERDATA, BRACKETA, BRACKETC, PARAMETERSTRIVIA, PARAMETERSCOMPONENT, OPENREQ,
         INREQUEST, LESST, EDREQUEST, ENDREQ,  INITREQUESTS, INRESPONSE, EDRESPONSE,
         INITRESPONSES, ENDRESPONSES, ROW, COLUMN, ENDREQUESTS;

non terminal endRequest, initRequest, endKeyBracket, initParametersComponent, initParametersTrivia;
non terminal String optionsresponse, classComponent, typequestion;
non terminal String modifyComponent;
non terminal in, initxson, statement, onerequest, requests, oneresponse, responses, initMoreRequest,
             recursiveRequest, endMoreRequest, newtrivia, deletetrivia, edittrivia,
             deleteComponent, componentsTrivia, componentsT, editTrivia, paramsET,
             oneResponse, endResponse, initMoreResponses, endMoreResponses, statementRequest,
             deleteTrivia, addcomponent, parameterC, parametersComponentEdit, editComponent, parametersComponent;
non terminal String idTrivia, nameTrivia, timeQuestionTrivia, userCreatorTrivia, themeTrivia, dateTrivia,
             idComponent, triviaComponent, classTriviaComponent, txtComponent, responseComponent, index, rowComponent,
             columnComponent;


start with in;

in::= initxson statement;

statement::= statementRequest
           | requests
           | oneresponse
           | responses
           ;

initxson::= OPENXS XSON VERSION EQUALS NUMBERVERSION ENDXS;

statementRequest::= initRequest onerequest endRequest;

requests::= initMoreRequest
            recursiveRequest
            endMoreRequest
            ;

responses::= ;

recursiveRequest::= recursiveRequest statementRequest
                | statementRequest
                ;

onerequest::= newtrivia
            | deleteTrivia
            | editTrivia
            | addcomponent
            | deleteComponent
            | modifyComponent
            ;

newtrivia::= NEWTRIVIA GREATERT
             initParametersTrivia
             componentsTrivia
             endKeyBracket
             //flag 1
             {:
                if(!currentIdTrivia.equals("") && !currentName.equals("") &&
                !currentTimeQuestion.equals("") && !currentTheme.equals("")){
                    if(currentDateCreation.equals("")){
                        Date date = Calendar.getInstance().getTime();
                        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd");
                        String strDate = dateFormat.format(date);
                        Trivia trivia = new Trivia(currentIdTrivia, currentName, currentTimeQuestion,
                        currentUserCreator, currentTheme, currentDateCreation, 1);
                        trivias.add(trivia);
                        cleanAttributsTrivia();
                    } else {
                        Trivia trivia = new Trivia(currentIdTrivia, currentName, currentTimeQuestion,
                        currentUserCreator, currentTheme, currentDateCreation, 1);
                        trivias.add(trivia);
                        cleanAttributsTrivia();
                    }
                } else {
                    addError("No se cumple los requisitos para una nueva trivia", "Semantico");
                    cleanAttributsTrivia();
                }
                RESULT = "";
             :}
             ;

componentsTrivia::= componentsT COMMA componentsTrivia
                  | componentsT
                  ;

componentsT::= idTrivia:idTrivia                             {:RESULT = idTrivia.toString();:}
                  | nameTrivia:nameTrivia                    {:RESULT = nameTrivia.toString();:}
                  | timeQuestionTrivia:timeQuestionTrivia    {:RESULT = timeQuestionTrivia.toString();:}
                  | userCreatorTrivia:userCreatorTrivia      {:RESULT = userCreatorTrivia.toString();:}
                  | themeTrivia:themeTrivia                  {:RESULT = themeTrivia.toString();:}
                  | dateTrivia:dateTrivia                    {:RESULT = dateTrivia.toString();:}
                  | error:e                                  {:
                                                                    int line    = (eleft)+1;
                                                                    int column  = eright;
                                                                    String message = "No se cumple con los parametros de los componentes";
                                                                    addError(line, column, message);
                                                                    RESULT = "";
                                                             :}
                  ;

idTrivia::= IDTRIVIA COLON TEXT:idTrivia
            {:
                if(idTriviaBoolean){
                    String message = "Ya existe un usuario";
                    addError(message, "Semantico");
                    RESULT = "";
                } else {
                    idTriviaBoolean = true;
                    currentIdTrivia = idTrivia.toString().replace("\"", "");
                    RESULT = currentIdTrivia;
                }
            :}
            ;

nameTrivia::= NAME COLON TEXT:name
            {:
                if(nameBoolean){
                    String message      = "Ya existe un nombre";
                    addError(message, "Semantico");
                    RESULT              = "";
                } else {
                    nameBoolean = true;
                    currentName = name.toString().replace("\"", "");
                    RESULT      = currentName;
                }
            :}
            ;

timeQuestionTrivia::= TIMEQUESTION COLON NUMBER:timeQuestion
                    {:
                        if(timeQuestionBoolean){
                            String message = "Ya existe un usuario";
                            addError(message, "Semantico");
                            RESULT = "";
                        } else {
                            timeQuestionBoolean = true;
                            currentTimeQuestion = timeQuestion.toString().replace("\"", "");
                            RESULT = currentTimeQuestion;
                        }
                    :}
                    ;

userCreatorTrivia::= USERCREATOR COLON TEXT:userCreator
                    {:
                        if(userCreatorBoolean){
                            String message  = "Ya existe un usuario creador";
                            addError(message, "Semantico");
                            RESULT          = "";
                        } else {
                            userCreatorBoolean  = true;
                            currentUserCreator  = userCreator.toString().replace("\"", "");
                            RESULT              = currentUserCreator;
                        }
                    :}
                    ;

themeTrivia::= THEME COLON TEXT:theme
             {:
                if(themeBoolean){
                    String message = "Ya existe un tema";
                    addError(message, "Semantico");
                    RESULT = "";
                } else {
                    themeBoolean = true;
                    currentTheme = theme.toString().replace("\"", "");
                    RESULT = currentTheme;
                }
             :}
             ;

dateTrivia::= DATE COLON DATECREATION:dateCreation
            {:
                if(dateBoolean){
                    String message = "Ya existe una fecha anterior";
                    addError(message, "Semantico");
                    RESULT = "";
                } else {
                    dateBoolean = true;
                    currentDateCreation = dateCreation.toString().replace("\"", "");
                    RESULT = currentDateCreation;
                }
            :}
            ;

deleteTrivia::= DELETETRIVIA GREATERT
                initParametersTrivia
                idTrivia:idTrivia
                endKeyBracket
                //flag 2
                {:
                    if(!idTrivia.toString().equals("")){
                        Trivia trivia = new Trivia(idTrivia.toString(), 2);
                        trivias.add(trivia);
                        cleanAttributsTrivia();
                        RESULT = trivia;
                    } else {
                        addError("El id no es valido para eliminar", "Semantico");
                        cleanAttributsTrivia();
                        RESULT = "";
                    }
                :}
                ;

editTrivia::= EDITTRIVIA GREATERT
              initParametersTrivia
              paramsET
              endKeyBracket
              //flag 3
              {:
                if(!currentIdTrivia.equals("") && !currentName.equals("") &&
                !currentTimeQuestion.equals("") && !currentTheme.equals("")){
                    Trivia trivia = new Trivia(currentIdTrivia, currentTimeQuestion, currentName, currentTheme, 3);
                    trivias.add(trivia);
                    cleanAttributsTrivia();
                    RESULT = trivia;
                } else {
                    cleanAttributsTrivia();
                    RESULT = "";
                }
              :}
              ;

addcomponent::= ADDCOMPONENT GREATERT
                initParametersComponent
                parametersComponent
                typequestion
                endKeyBracket
                //flag 1
                {:
                    if(!currentIdComponent.equals("") && !currentTriviaComponent.equals("") &&
                    !currentClassComponent.equals("") && !currentTxtVisibleComponent.equals("") && currentClassComponent.equals("AREA_TEXTO") &&
                    !currentResponseComponent.equals("")){
                        if(!currentRowComponent.equals("") && !currentColumnComponent.equals("")){
                            Component component = new Component(currentIdComponent, currentTriviaComponent,
                            currentClassComponent, currentTxtVisibleComponent, currentResponseComponent, 1);
                            component.setRows(currentRowComponent);
                            component.setCols(currentColumnComponent);
                            component.setResponse(currentResponseComponent);
                            components.add(component);
                            cleanComponents();
                            RESULT = "Ok";
                        } else {
                            addError("No se pudo crear este componente, por que no cumplio con filas y columnas", "Semantico");
                            cleanComponents();
                        }
                        RESULT = "OK";
                    } else if(!currentIdComponent.equals("") && !currentTriviaComponent.equals("") && !currentClassComponent.equals("")
                              && !currentTxtVisibleComponent.equals("") && !currentResponseComponent.equals("")){
                            Component component = new Component(currentIdComponent, currentTriviaComponent, currentClassComponent,
                            currentTxtVisibleComponent, currentResponseComponent, 1);
                            component.setResponse(currentResponseComponent);
                            components.add(component);
                            cleanComponents();
                            RESULT = "OK";
                    } else {
                        addError("Error en los parametros para crear un componente","Semantico");
                        cleanComponents();
                        RESULT = "";
                    }
                :}
                ;


modifyComponent::= EDITCOMPONENT GREATERT
                   initParametersComponent
                   parametersComponentEdit
                   typequestion:typeQuestion
                   endKeyBracket
                   //Flag 3
                   {:
                    if(!currentIdComponent.equals("") && !currentTriviaComponent.equals("") &&
                        !currentClassComponent.equals("") && !currentTxtVisibleComponent.equals("") && currentClassComponent.equals("AREA_TEXTO") &&
                        !currentResponseComponent.equals("")){
                            if(!currentRowComponent.equals("") && !currentColumnComponent.equals("")){
                                Component component = new Component(currentIdComponent, currentTriviaComponent, currentClassComponent,
                                currentIndexComponent, currentTxtVisibleComponent, currentResponseComponent,   1);
                                component.setRows(currentRowComponent);
                                component.setCols(currentColumnComponent);
                                component.setResponse(currentResponseComponent);
                                components.add(component);
                                cleanComponents();
                                RESULT = "OK";
                            } else {
                                addError("No se pudo crear este componente, por que no cumplio con filas y columnas", "Semantico");
                                cleanComponents();
                            }
                            RESULT = "OK";
                        } else if(!currentIdComponent.equals("") && !currentTriviaComponent.equals("") && !currentClassComponent.equals("")
                                  && !currentTxtVisibleComponent.equals("") && !currentResponseComponent.equals("")){
                                Component component = new Component(currentIdComponent, currentTriviaComponent, currentClassComponent,
                                currentIndexComponent, currentTxtVisibleComponent, currentResponseComponent,   1);
                                component.setResponse(currentResponseComponent);
                                components.add(component);
                                cleanComponents();
                                RESULT = "OK";
                    } else {
                            addError("Error en los parametros para crear un componente","Semantico");
                            cleanComponents();
                            RESULT = "";
                    }
                   :}
                   ;

parametersComponent::= parameterC COMMA parametersComponent
                     | parameterC
                     ;

parametersComponentEdit::= editComponent COMMA parametersComponent
                         | editComponent
                         ;

editComponent::= parameterC
                | index
                ;

parameterC::= idComponent
            | triviaComponent
            | classTriviaComponent
            | txtComponent
            | optionsresponse
            | rowComponent
            | columnComponent
            | responseComponent
            ;

rowComponent::= ROW COLON NUMBER:number
                {:
                    currentRowComponent = number.toString();
                    RESULT = currentRowComponent;
                :}
              ;

columnComponent::= COLUMN COLON NUMBER:number
                 {:
                    currentColumnComponent = number.toString();
                    RESULT = currentColumnComponent;
                 :}
                 ;

idComponent::= ID COLON TEXT:idComponent
               {:
                    if(idComponentBoolean){
                        String message = "Ya existe el id del componente";
                        addError(message, "Semantico");
                        RESULT         = "";
                    } else {
                        idComponentBoolean = true;
                        currentIdComponent = idComponent.toString().replace("\"", "");
                        RESULT             = currentIdComponent;
                    }
               :}
               ;
triviaComponent::= TRIVIA COLON TEXT:trivia
                    {:
                        if(triviaComponentBoolean){
                            String message = "Ya existe una trivia anterior";
                            addError(message, "Semantico");
                            RESULT = "";
                        } else {
                            triviaComponentBoolean = true;
                            currentTriviaComponent = trivia.toString().replace("\"", "");
                            RESULT = currentTriviaComponent;
                        }
                    :}
                    ;

classTriviaComponent::= CLASSTRIVIA COLON classComponent:classComponent
                        {:
                            if(classComponentBoolean){
                                String message = "Ya existe una clase del componente";
                                addError(message, "Semantico");
                                RESULT = "";
                            } else {
                                classComponentBoolean = true;
                                currentClassComponent = classComponent.toString().replace("\"", "");
                                RESULT = currentClassComponent;
                            }
                        :}
                        ;

txtComponent::= TXTVISIBLE COLON TEXT:txtVisible
                {:
                    if(txtVisibleComponentBoolean){
                        String message = "Ya existe un texto visible";
                        addError(message, "Semantico");
                        RESULT = "";
                    } else {
                        txtVisibleComponentBoolean = true;
                        currentTxtVisibleComponent = txtVisible.toString().replace("\"", "");
                        RESULT = currentTxtVisibleComponent;
                    }
                :}
                ;

responseComponent::= RESPONSETRIVIA COLON TEXT:response
                   {:
                        if(responseComponentBoolean){
                            addError("Ya existe una respuesta anterior", "Semantico");
                            RESULT = "";
                        } else {
                            responseComponentBoolean = true;
                            currentResponseComponent = response.toString();
                            RESULT = currentResponseComponent;
                        }
                   :}
                   ;

deleteComponent::= DELETECOMPONENT GREATERT
                   initParametersComponent
                   ID COLON TEXT:idTrivia COMMA
                   TRIVIA COLON TEXT:trivia
                   endKeyBracket
                   //flag 2
                   {:
                        if(!idTrivia.toString().equals("") && !trivia.toString().equals("")){
                            Component component = new Component(idTrivia.toString(), trivia.toString(), 2);
                            components.add(component);
                            cleanComponents();
                            RESULT = component;
                        } else {
                            addError("Los errores para eliminar una trivia no se cumplen", "Semantico");
                            cleanComponents();
                            RESULT = "";
                        }
                   :}
                   ;

index::= INDEX COLON TEXT:index
        {:
            if(indexComponentBoolean){
                addError("Ya existe un indice anterior para modificar", "Semantico");
                RESULT = "";
            } else {
                indexComponentBoolean = true;
                currentIndexComponent = index.toString();
                RESULT = currentIndexComponent;
            }
        :}
        ;

typequestion::= oneresponse:oneResponse
                {:
                    RESULT = oneResponse.toString().replace("\"", "");
                :}
                | optionsresponse:optionsResponse
                {:
                    RESULT = optionsResponse.toString().replace("\"", "");
                :}
                ;

oneresponse::= RESPONSETRIVIA COLON TEXT:textResponse
               {:
                    RESULT = textResponse.toString().replace("\"", "");
               :}
               ;

optionsresponse::= OPTIONS COLON OPTIONSRESPONSES:optionsResponse
                   {:
                        RESULT = optionsResponse.toString().replace("\"", "");
                   :}
                   ;

classComponent::= TEXTFIELD:txtField        {:RESULT = txtField.toString().replace("\"", "");:}
                  | TEXTAREA:txtArea        {:RESULT = txtArea.toString().replace("\"", "");:}
                  | CHECKBOX:checkBox       {:RESULT = checkBox.toString().replace("\"", "");:}
                  | RADIO:radio             {:RESULT = radio.toString().replace("\"", "");:}
                  | CARDINEX:cardIndex     {:RESULT = cardIndex.toString().replace("\"", "");:}
                  | COMBO:combo             {:RESULT = combo.toString().replace("\"", "");:}
                  ;


initParametersTrivia::= KEYA PARAMETERSTRIVIA COLON BRACKETA KEYA
                        | error:e
                                                                            {:
                                                                                int line        = (eleft)+1;
                                                                                int column      = eright;
                                                                                String message  = "No se cumple los parametros para crear la trivia";
                                                                                addError(line, column, message);
                                                                                RESULT = "";
                                                                            :}
                        ;

initParametersComponent::= KEYA PARAMETERSCOMPONENT COLON BRACKETA KEYA
                           | error:e
                                                                               {:
                                                                                   int line        = (eleft)+1;
                                                                                   int column      = eright;
                                                                                   String message  = "No se cumple los parametros para iniciar los componentes";
                                                                                   addError(line, column, message);
                                                                                   RESULT = "";
                                                                               :}
                            ;

endKeyBracket::= KEYC BRACKETC KEYC
                 | error:e
                                                    {:
                                                        int line        = (eleft)+1;
                                                        int column      = eright;
                                                        String message  = "No se cumple los parametros para iniciar las solicitudes";
                                                        addError(line, column, message);
                                                        RESULT = "";
                                                    :}
                 ;

initRequest::= OPENREQ INREQUEST COLON
                ;

endRequest::= LESST EDREQUEST ENDREQ
              | error:e
                                                 {:
                                                     int line        = (eleft)+1;
                                                     int column      = eright;
                                                     String message  = "No se cumple los parametros para iniciar las solicitudes";
                                                     addError(line, column, message);
                                                     RESULT = "";
                                                 :}
              ;

initMoreRequest::= OPENREQ INITREQUESTS GREATERT
                   | error:e
                                                      {:
                                                          int line        = (eleft)+1;
                                                          int column      = eright;
                                                          String message  = "No se cumple los parametros para iniciar las solicitudes";
                                                          addError(line, column, message);
                                                          RESULT = "";
                                                      :}
                    ;

endMoreRequest::= OPENREQ ENDREQUESTS GREATERT
                  | error:e
                                                     {:
                                                         int line        = (eleft)+1;
                                                         int column      = eright;
                                                         String message  = "No se cumple los parametros para iniciar las solicitudes";
                                                         addError(line, column, message);
                                                         RESULT = "";
                                                     :}
                  ;

oneResponse::= OPENREQ INRESPONSE GREATERT
               | error:e
                                   {:
                                       int line        = (eleft)+1;
                                       int column      = eright;
                                       String message  = "No se cumple los parametros para iniciar las solicitudes";
                                       addError(line, column, message);
                                       RESULT = "";
                                   :}
                ;

endResponse::= OPENREQ EDRESPONSE ENDREQ
               | error:e
                                    {:
                                        int line        = (eleft)+1;
                                        int column      = eright;
                                        String message  = "No se cumple los parametros para finalizar una respuesta";
                                        addError(line, column, message);
                                        RESULT = "";
                                    :}
                ;

initMoreResponses::= OPENREQ INITRESPONSES GREATERT
                     | error:e
                                         {:
                                             int line        = (eleft)+1;
                                             int column      = eright;
                                             String message  = "No se cumple los parametros para iniciar las respuesta";
                                             addError(line, column, message);
                                             RESULT = "";
                                         :}
                     ;

endMoreResponses::= OPENREQ ENDRESPONSES ENDREQ
                    | error:e
                                        {:
                                            int line        = (eleft)+1;
                                            int column      = eright;
                                            String message  = "No se cumple los parametros para finalizar una respuesta";
                                            addError(line, column, message);
                                            RESULT = "";
                                        :}
                    ;