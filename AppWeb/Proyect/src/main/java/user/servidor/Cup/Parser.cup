package org.proyect1.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Date.*;
import org.proyect1.Objects.*;

class Parser;

parser code{:
    private ArrayList<Component> components = new ArrayList<Component>();
    private ArrayList<Trivia> trivias = new ArrayList<Trivia>();
    private ArrayList<Error> errors = new ArrayList<Error>();

    //Booleans to the trivia
    private boolean idTriviaBoolean = false;
    private boolean nameBoolean = false;
    private boolean timeQuestionBoolean = false;
    private boolean userCreatorBoolean = false;
    private boolean themeBoolean = false;
    //Strings to the Trivia
    private String currentIdTrivia = "";
    private String currentTimeQuestion = "";
    private String currentName = "";
    private String currentTheme = "";
    private String currentDateCreation = "";
    private String currentUserCreator;

    public void cleanAttributsTrivia(){
        idTriviaBoolean = false;
        nameBoolean = false;
        timeQuestionBoolean = false;
        userCreatorBoolean = false;
        themeBoolean = false;

        currentIdTrivia = "";
        currentTimeQuestion = "";
        currentName = "";
        currentTheme = "";
        currentDateCreation = "";
        currentUserCreator = "";
    }

    //Booleans to the Components
    private boolean idComponentBoolean = false;
    private boolean triviaComponentBoolean = false;
    private boolean classComponentBoolean = false;
    private boolean txtVisibleComponentBoolean = false;
    private boolean responseComponentBoolean = false;
    private boolean indexComponentBoolean = false;
    //Strings to the Components
    private String currentIdComponent = "";
    private String currentTriviaComponent = "";
    private String currentClassComponent = "";
    private String currentTxtVisibleComponent = "";
    private String currentResponseComponent = "";
    private String currentIndexComponent = "";

    public void cleanComponents(){
        idComponentBoolean = false;
        triviaComponentBoolean = false;
        classComponentBoolean = false;
        txtVisibleComponentBoolean = false;
        responseComponentBoolean = false;
        indexComponentBoolean = false;

        currentIdComponent = "";
        currentTriviaComponent = "";
        currentClassComponent = "";
        currentTxtVisibleComponent = "";
        currentResponseComponent = "";
        currentIndexComponent = "";

    }

    public ArrayList<Component> getComponents(){
        return this.components;
    }

    public ArrayList<Trivia> getTrivias(){
        return this.trivias;
    }

    public ArrayList<Error> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(errorString, line, column, "Sintactico", message));
    }

    public void syntax_error(Symbol s){
        errorString = s.value+"";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.";
        messages.add(message);
    }


:}

terminal OPENXS, XSON, VERSION, EQUALS, NUMBERVERSION, ENDXS, OPENREQ, INREQUEST, COLON;

non terminal endRequest, initRequest, endKeyBracket, initParametersComponent, initParametersTrivia, initDataUser;
non terminal String optionsresponse, classComponent, typequestion;
non terminal Component modifyComponent, deleteComponent, addComponent;
non terminal initDataUser;


start with in;

in::= initxson statement;

statement::= initRequest onerequest endRequest
           | requests
           | oneresponse
           | responses
           ;

initxson::= OPENXS XSON VERSION EQUALS NUMBERVERSION ENDXS;

requests::= initMoreRequest
            recursiveRequest
            endMoreRequest
            ;

responses::= ;

recursiveRequest::= initRequest onerequest endRequest recursiveRequest
                | initRequest onerequest endRequest
                ;

onerequest::= newtrivia
            | deletetrivia
            | edittrivia
            | addcomponents
            | deletecomponent
            | editcomponent
            ;

newtrivia::= NEWTRIVIA GREATERT
             initParametersTrivia
             componentsTrivia
             endKeyBracket
             //flag 1
             {:
                if(!currentIdTrivia.equals("") && !currentName.equals("") &&
                !currentTimeQuestion.equals("") && !currentTheme.equals("")){

                Trivia trivia = new Trivia(currentIdTrivia, currentName, currentTimeQuestion,
                currentUserCreator, currentTheme, currentDateCreation, 1);

                }
                trivias.add(trivia);
                RESULT = trivia;
             :}
             ;

componentsTrivia::= componentsT COMMA componentsTrivia
                  | componentsT
                  ;

componentsT::= idTrivia:idTrivia
                  | nameTrivia:nameTrivia
                  | timeQuestionTrivia:timeQuestionTrivia
                  | userCreatorTrivia:userCreatorTrivia
                  | themeTrivia:themeTrivia
                  | dateTrivia:dateTrivia
                  | error:e
                  ;

idTrivia::= IDTRIVIA COLON TEXT:idTrivia
            {:
                currentIdTrivia = idTrivia.toString();
                RESULT = currentIdTrivia;
            :}
            ;

nameTrivia::= NAME COLON TEXT:name
            {:
                currentName = name.toString();
                RESULT = currentName;
            :}
            ;

timeQuestionTrivia::= TIMEQUESTION COLON NUMBER:timeQuestion
                    {:
                        currentTimeQuestion = timeQuestion.toString();
                        RESULT = currentTimeQuestion;
                    :}
                    ;

userCreatorTrivia::= USERCREATOR COLON TEXT:userCreator
                    {:
                        currentUserCreator = userCreator.toString();
                        RESULT = currentUserCreator;
                    :}
                    ;

themeTrivia::= THEME COLON TEXT:theme
             {:
                currentTheme = theme.toString();
                RESULT = currentTheme;
             :}
             ;

dateTrivia::= DATE COLON DATECREATION:dateCreation
            {:
                currentDateCreation = dateCreation.toString();
                RESULT = currentDateCreation;
            :}
            ;

deleteTrivia::= DELETETRIVIA GREATERT
                initParametersTrivia
                idTrivia:idTrivia
                endKeyBracket
                //flag 2
                {:
                    Trivia trivia = new Trivia(idTrivia.toString(), 2);
                    trivias.add(trivia);
                    RESULT = trivia;
                :}
                ;

editTrivia::= EDITTRIVIA GREATERT
              initParametersTrivia
              paramsET
              endKeyBracket
              //flag 3
              {:
                Trivia trivia = new Trivia(idTrivia.toString(), timeQuestion, name.toString(), theme.toString(), 3);
                trivias.add(trivia);
                RESULT = trivia;
              :}
              ;

paramsET::= paramsEditTrivia COMMA paramsET
          | paramsEditTrivia
          ;

paramsEditTrivia::= idTrivia:idTrivia
                  | timeQuestionTrivia:timeQuestion
                  | nameTrivia:nameTrivia
                  | themeTrivia:themeTrivia
                  | error:e
                  ;

addcomponent::= ADDCOMPONENT GREATERT
                initParametersComponent
                ID COLON TEXT:idComponent COMMA
                TRIVIA COLON TEXT:trivia COMMA
                CLASSTRIVIA COLON classComponent:classComponent COMMA
                TXTVISIBLE COLON TEXT:txtVisible COMMA
                typequestion
                endKeyBracket
                //flag 1
                {:
                    Component component = new Component(idComponent.toString(), trivia.toString(),
                    classComponent.toString(), txtVisible.toString(), 1);
                    components.add(component);
                    RESULT = component;
                :}
                ;

deleteComponent::= DELETECOMPONENT GREATERT
                   initParametersComponent
                   ID COLON TEXT:idTrivia COMMA
                   TRIVIA COLON TEXT:trivia
                   endKeyBracket
                   //flag 2
                   {:
                    Component component = new Component(idTrivia.toString(), trivia.toString(), 2);
                    components.add(component);
                    RESULT = component;
                   :}
                   ;

modifyComponent::= EDITCOMPONENT GREATERT
                   initParametersComponent
                   ID COLON TEXT:id COMMA
                   TRIVIA COLON TEXT:trivia COMMA
                   CLASSTRIVIA COLON classComponent:classComponent COMMA
                   INDEX COLON NUMBERVERSION:numberVersion COMMA
                   TXTVISIBLE COLON TEXT:txtVisible COMMA
                   typequestion:typeQuestion
                   endKeyBracket
                   //Flag 3
                   {:
                    Component component = new Component(id.toString(), trivia.toString(), classComponent.toString(),
                    numberVersion.toString(), txtVisible.toString(), typeQuestion.toString(), 3);
                    components.add(component);
                    RESULT = component;
                   :}
                   ;

typequestion::= oneresponse:oneResponse
                {:
                    RESULT = oneResponse.toString();
                :}
                | optionsresponse:optionsResponse
                {:
                    RESULT = optionsResponse.toString();
                :}
                ;

oneresponse::= RESPONSETRIVIA COLON TEXT:textResponse
               {:
                    RESULT = textResponse.toString();
               :}
               ;

optionsresponse::= OPTIONS COLON OPTIONSRESPONSES:optionsResponse
                   {:
                        RESULT = optionsResponse.toString();
                   :}
                   ;

classComponent::= TEXTFIELD:txtField        {:RESULT = txtField.toString();:}
                  | TEXTAREA:txtArea        {:RESULT = txtArea.toString();:}
                  | CHECKBOX:checkBox       {:RESULT = checkBox.toString();:}
                  | RADIO:radio             {:RESULT = radio.toString();:}
                  | CARDINDEX:cardIndex     {:RESULT = cardIndex.toString();:}
                  | COMBO:combo             {:RESULT = combo.toString();:}
                  ;

initDataUser::= KEYA USERDATA COLON BRACKETA KEYA;
           // | error

initParametersTrivia::= KEYA PARAMETERSTRIVIA COLON BRACKETA KEYA;

initParametersComponent::= KEYA PARAMETERSCOMPONENT COLON BRACKETA KEYA;

endKeyBracket::= KEYC BRACKETC KEYC;
             //| error

initRequest::= OPENREQ INREQUEST COLON;
           // | error

endRequest::= LESST EDREQUEST ENDREQ;

initMoreRequest::= OPENREQ INITREQUESTS GREATERT;

endMoreRequest::= OPENREQ ENDREQUESTS GREATERT;

oneResponse::= OPENREQ INRESPONSE GREATERT;

endResponse::= OPENREQ EDRESPONSE ENDREQ;

initMoreResponses::= OPENREQ INITRESPONSES GREATERT;

endMoreResponses::= OPENREQ ENDRESPONSES ENDREQ;