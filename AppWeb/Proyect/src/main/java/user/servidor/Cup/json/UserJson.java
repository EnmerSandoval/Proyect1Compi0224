
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package user.servidor.Cup.json;

import java_cup.runtime.*;
import java.util.ArrayList;
import user.servidor.Errors.ErrorL;
import user.servidor.Objects.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class UserJson extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return UserJsonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public UserJson() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public UserJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public UserJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\007\003\000\002\010" +
    "\005\000\002\010\004\000\002\011\005\000\002\011\003" +
    "\000\002\012\011\000\002\012\003\000\002\002\006\000" +
    "\002\003\006\000\002\004\006\000\002\005\006\000\002" +
    "\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\004\004\006\001\002\000\004\002\050\001" +
    "\002\000\004\002\000\001\002\000\010\003\007\005\010" +
    "\006\011\001\002\000\006\005\ufffa\011\ufffa\001\002\000" +
    "\004\002\ufffe\001\002\000\004\012\020\001\002\000\004" +
    "\005\016\001\002\000\006\005\ufffc\011\014\001\002\000" +
    "\006\003\007\006\011\001\002\000\004\005\ufffd\001\002" +
    "\000\004\002\uffff\001\002\000\004\013\025\001\002\000" +
    "\004\010\021\001\002\000\004\017\022\001\002\000\004" +
    "\011\023\001\002\000\004\013\ufff9\001\002\000\004\014" +
    "\032\001\002\000\004\010\026\001\002\000\004\017\027" +
    "\001\002\000\004\011\030\001\002\000\004\014\ufff8\001" +
    "\002\000\004\015\037\001\002\000\004\010\033\001\002" +
    "\000\004\017\034\001\002\000\004\011\035\001\002\000" +
    "\004\015\ufff7\001\002\000\004\016\044\001\002\000\004" +
    "\010\040\001\002\000\004\017\041\001\002\000\004\011" +
    "\042\001\002\000\004\016\ufff6\001\002\000\004\007\047" +
    "\001\002\000\004\010\045\001\002\000\004\020\046\001" +
    "\002\000\004\007\ufff5\001\002\000\006\005\ufffb\011\ufffb" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\006\007\003\010\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\011\012\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\014" +
    "\012\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$UserJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$UserJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$UserJson$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ArrayList<User> users = new ArrayList<User>();
    private ArrayList<ErrorL> errors = new ArrayList<ErrorL>();
    private String errorString = "";

    public ArrayList<User> getUsers(){
        return this.users;
    }

    public ArrayList<ErrorL> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(errorString, line, column, "Sintactico", message));
    }

    public void syntax_error(Symbol s){
        errorString = s.value+"";
        String errorString = "Error sintactico recuperable en la linea: "+
        (s.left)+ " columna: " + s.right + ". Componente  " + s.value + " no reconocido.";
        System.out.println("Error sintactico: "+errorString);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.";
        System.out.println(message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$UserJson$actions {
  private final UserJson parser;

  /** Constructor */
  CUP$UserJson$actions(UserJson parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$UserJson$do_action_part00000000(
    int                        CUP$UserJson$act_num,
    java_cup.runtime.lr_parser CUP$UserJson$parser,
    java.util.Stack            CUP$UserJson$stack,
    int                        CUP$UserJson$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$UserJson$result;

      /* select the action based on the action number */
      switch (CUP$UserJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= in EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).value;
		RESULT = start_val;
              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$UserJson$parser.done_parsing();
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // in ::= initUser 
            {
              Object RESULT =null;

              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("in",5, ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initUser ::= CORCHETEA dataUser CORCHETEC 
            {
              Object RESULT =null;

              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("initUser",6, ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-2)), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initUser ::= CORCHETEA CORCHETEC 
            {
              Object RESULT =null;

              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("initUser",6, ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dataUser ::= userComponents COMMA dataUser 
            {
              Object RESULT =null;

              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("dataUser",7, ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-2)), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dataUser ::= userComponents 
            {
              Object RESULT =null;

              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("dataUser",7, ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // userComponents ::= KEYA userStructure passwordStructure institutionStructure nameStructure dateStructure KEYC 
            {
              Object RESULT =null;
		int userleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-5)).left;
		int userright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-5)).right;
		String user = (String)((java_cup.runtime.Symbol) CUP$UserJson$stack.elementAt(CUP$UserJson$top-5)).value;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-4)).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-4)).right;
		String password = (String)((java_cup.runtime.Symbol) CUP$UserJson$stack.elementAt(CUP$UserJson$top-4)).value;
		int institutionleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-3)).left;
		int institutionright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-3)).right;
		String institution = (String)((java_cup.runtime.Symbol) CUP$UserJson$stack.elementAt(CUP$UserJson$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$UserJson$stack.elementAt(CUP$UserJson$top-2)).value;
		int dateleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).right;
		String date = (String)((java_cup.runtime.Symbol) CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).value;
		
            User userResult = new User(user.toString(), password.toString(), institution.toString(),
            name.toString(), date.toString());
            users.add(userResult);
        
              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("userComponents",8, ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-6)), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // userComponents ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$UserJson$stack.peek()).value;
		
                int line        = (eleft)+1;
                int column     = eright;
                String message  = "No se cumplen los parametros de usuario en tipo json";
                addError(line, column, message);
          
              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("userComponents",8, ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // userStructure ::= USER COLON TEXT COMMA 
            {
              String RESULT =null;
		int userleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).left;
		int userright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).right;
		Object user = (Object)((java_cup.runtime.Symbol) CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).value;
		
                    System.out.println("user" + user.toString());
                    RESULT = user.toString().replace("\"", "");
                
              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("userStructure",0, ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-3)), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // passwordStructure ::= PASSWORD COLON TEXT COMMA 
            {
              String RESULT =null;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).right;
		Object password = (Object)((java_cup.runtime.Symbol) CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).value;
		
                        RESULT = password.toString().replace("\"", "");
                    
              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("passwordStructure",1, ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-3)), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // institutionStructure ::= INSTITUTION COLON TEXT COMMA 
            {
              String RESULT =null;
		int institutionleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).left;
		int institutionright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).right;
		Object institution = (Object)((java_cup.runtime.Symbol) CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).value;
		
                            RESULT = institution.toString().replace("\"", "");
                        
              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("institutionStructure",2, ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-3)), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nameStructure ::= NAME COLON TEXT COMMA 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$UserJson$stack.elementAt(CUP$UserJson$top-1)).value;
		
                    RESULT = name.toString().replace("\"", "");
                
              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("nameStructure",3, ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-3)), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dateStructure ::= DATE COLON DATECREATION 
            {
              String RESULT =null;
		int dateleft = ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()).right;
		Object date = (Object)((java_cup.runtime.Symbol) CUP$UserJson$stack.peek()).value;
		
                    RESULT = date.toString().replace("\"", "");
                
              CUP$UserJson$result = parser.getSymbolFactory().newSymbol("dateStructure",4, ((java_cup.runtime.Symbol)CUP$UserJson$stack.elementAt(CUP$UserJson$top-2)), ((java_cup.runtime.Symbol)CUP$UserJson$stack.peek()), RESULT);
            }
          return CUP$UserJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$UserJson$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$UserJson$do_action(
    int                        CUP$UserJson$act_num,
    java_cup.runtime.lr_parser CUP$UserJson$parser,
    java.util.Stack            CUP$UserJson$stack,
    int                        CUP$UserJson$top)
    throws java.lang.Exception
    {
              return CUP$UserJson$do_action_part00000000(
                               CUP$UserJson$act_num,
                               CUP$UserJson$parser,
                               CUP$UserJson$stack,
                               CUP$UserJson$top);
    }
}

}
