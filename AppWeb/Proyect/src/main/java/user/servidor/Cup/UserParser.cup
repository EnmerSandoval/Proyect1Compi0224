package user.servidor.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import user.servidor.Objects.*;
import user.servidor.Errors.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

class UserParser;

parser code{:
    private ArrayList<User> users = new ArrayList<User>();
    private ArrayList<ErrorL> errors = new ArrayList<ErrorL>();
    private String errorString = "";

    private String currentUser = "";
    private String currentPassword = "";
    private String currentName = "";
    private String currentInstitution = "";
    private String currentDateCreation = "";
    private String currentOldUser = "";

    public void emptyParameters(){
        currentUser = "";
        currentPassword = "";
        currentName = "";
        currentInstitution = "";
        currentDateCreation = "";
        currentOldUser = "";
    }

    public ArrayList<User> getUsers(){
        return this.users;
    }

    public ArrayList<ErrorL> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(errorString, line, column, "Sintactico", message));
    }

    public void addError(String message, String typeError){
        errors.add(new ErrorL(errorString, 0, 0, typeError, message));
    }

    public void syntax_error(Symbol s){
        errorString = s.value+"";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.";
        System.out.println(message);
    }

:}

non terminal initxson, statement, initRequest, onerequest, endRequest, requests, initMoreRequest,
             recursiveRequest, endMoreRequest, newuser, edituser, deleteuser, paramsEdit, paramsEditUser, endKeyBracket, initDataUser,
             singleRequest, multipleRequest;

non terminal String userStructure, passwordStructure, nameStructure, institutionStructure,
                    dateStructure, oldUserStructure, newUserStructure, newPasswordStructure,
                    dateEditStructure,  paramStructureUser, paramsUserStructure;

terminal NEWUSER, GREATERT, COMMA, USER, COLON, TEXT, PASSWORD, NAME, INSTITUTION, DATE, DATECREATION,
         EDITUSER, OLDUSER, NEWPASSWORD, DATEEDIT, DELETEUSER, KEYA, USERDATA, BRACKETA, KEYC,
         BRACKETC, OPENREQ, INREQUEST, LESST, EDREQUEST, ENDREQ, OPENXS, XSON, VERSION, EQUALS, ENDXS,
         INITREQUESTS, ENDREQUESTS;

non terminal in;

start with in;

in::= initxson statement;

statement::= singleRequest
            | multipleRequest
            ;

singleRequest::= initRequest onerequest endRequest
               ;

multipleRequest::= requests;


requests::= initMoreRequest
            recursiveRequest
            endMoreRequest
            ;

recursiveRequest::= recursiveRequest initRequest onerequest endRequest
                  | initRequest onerequest endRequest
                  ;

onerequest::= newuser
            | edituser
            | deleteuser
            ;

newuser::= NEWUSER GREATERT
           initDataUser
           paramStructureUser
           endKeyBracket
           //flag 1
           {:
                System.out.printf("currentuser " + currentUser);
                System.out.printf("currentPassword " + currentPassword);
                System.out.printf("currentName " + currentName);
                System.out.printf("currentInstitution " + currentInstitution);
                if(!currentUser.equals("") && !currentPassword.equals("") && !currentName.equals("")
                && !currentInstitution.equals("")){
                    if(currentDateCreation.equals("")){
                        System.out.println("Aca andamos parser");
                        User user = new User(currentUser, currentPassword, currentName,
                        currentInstitution, currentDateCreation, 1);
                        users.add(user);
                        emptyParameters();
                    } else {
                        Date date = Calendar.getInstance().getTime();
                        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
                        String strDate = dateFormat.format(date);
                        User user = new User(currentUser, currentPassword, currentName,
                        currentInstitution, strDate, 1);
                        users.add(user);
                        emptyParameters();
                    }
                } else {
                    String message = "Error a la creacion de un usuario no cumples con todos los campos";
                    addError(message, "Semantico");
                    emptyParameters();
                }
           :}
           ;

paramStructureUser::= paramsUserStructure COMMA paramStructureUser
                    | paramsUserStructure
                    ;

paramsUserStructure::= userStructure:user {:System.out.println("user+" + user.toString());:}
                     | passwordStructure:password {:System.out.println("password+ " + password.toString());:}
                     | nameStructure:name {:System.out.println("Name: " + name.toString());:}
                     | institutionStructure:ins {:System.out.println("ins " + ins.toString());:}
                     | dateStructure:date {:System.out.println("date" + date.toString());:}
                     | error:e
                        {:
                            int line       = (eleft)+1;
                            int column     = eright;
                            String message = "No se cumple la estructura de usuario, se espera \"PASSWORD: \"PASSWORD DEL USUARIO\" ,";
                            addError(line, column, message);
                            RESULT = null;
                        :}
                     ;

userStructure::= USER COLON TEXT:user
                   {:
                        currentUser = user.toString();
                        RESULT = currentUser;
                   :}
//                 | error:e
//                   {:
//                        int line       = (eleft)+1;
//                        int column     = eright;
//                        String message = "No se cumple la estructura de usuario, se espera: \"USUARIO: \"NOMBRE DEL USUARIO\"";
//                        addError(line, column, message);
//                        RESULT = null;
//                   :}
                 ;

passwordStructure::= PASSWORD COLON TEXT:password
                    {:
                        currentPassword = password.toString();
                        RESULT = currentPassword;
                    :}
//                    | error:e
//                      {:
//                            int line       = (eleft)+1;
//                            int column     = eright;
//                            String message = "No se cumple la estructura de password, se espera: \"PASSWORD: \"PASSWORD DEL USUARIO\"";
//                            addError(line, column, message);
//                            RESULT = null;
//                      :}
                    ;

nameStructure::= NAME COLON TEXT:name
                {:
                    System.out.println("ANdo en nombre");
                    currentName = name.toString();
                    RESULT = currentName;
                :}
//                | error:e
//                  {:
//                    int line       = (eleft)+1;
//                    int column     = eright;
//                    String message = "No se cumple la estructura de Nombre de usuario, se espera: \"NOMBRE: \"NOMBRE DEL USUARIO\"";
//                    addError(line, column, message);
//                    RESULT = null;
//                  :}
                ;

institutionStructure::= INSTITUTION COLON TEXT:institution
                        {:
                            currentInstitution = institution.toString();
                            RESULT = currentInstitution;
                        :}
//                        | error:e
//                          {:
//                            int line       = (eleft)+1;
//                            int column     = eright;
//                            String message = "No se cumple la estructura de usuario, se espera \"PASSWORD: \"PASSWORD DEL USUARIO\" ,";
//                            addError(line, column, message);
//                            RESULT = null;
//                          :}
                        ;

dateStructure::= DATE COLON DATECREATION:dateCreation
                {:
                    currentDateCreation = dateCreation.toString();
                    RESULT = dateCreation.toString();
                :}
//                | error:e
//                  {:
//                        int line       = (eleft)+1;
//                        int column     = eright;
//                        String message = "No se cumple la estructura de usuario, se espera \"PASSWORD: \"PASSWORD DEL USUARIO\" ,";
//                        addError(line, column, message);
//                        RESULT = null;
//                  :}
                ;

edituser::= EDITUSER GREATERT
            initDataUser
            paramsEdit
            endKeyBracket
            //flag 2
            {:
                if(!currentOldUser.equals("") && !currentUser.equals("") && !currentPassword.equals("")
                && currentInstitution.equals("")){
                    if(!currentDateCreation.equals("")){
                        User user = new User(currentOldUser, currentUser, currentPassword,
                        currentInstitution, 2, currentDateCreation);
                        users.add(user);
                        emptyParameters();
                    } else {
                        Date date = Calendar.getInstance().getTime();
                        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
                        String strDate = dateFormat.format(date);
                        User user = new User(currentOldUser, currentUser, currentPassword,
                        currentInstitution, 2, strDate);
                        users.add(user);
                        emptyParameters();
                    }
                }
            :}
            ;

paramsEdit::= paramsEditUser COMMA paramsEdit
            | paramsEditUser
            ;

paramsEditUser::= oldUserStructure
                | newUserStructure
                | newPasswordStructure
                | institutionStructure
                | dateEditStructure
                ;

oldUserStructure::= OLDUSER COLON TEXT:olduser
                    {:
                        currentOldUser = olduser.toString();
                        RESULT = currentOldUser;
                    :}
                    ;

newUserStructure::= NEWUSER COLON TEXT:newuser
                    {:
                        currentUser = newuser.toString();
                        RESULT = currentUser;
                    :}
//                    | error:e
//                      {:
//                        int line        = (eleft)+1;
//                        int column      = eright;
//                        String message  = "No se cumple la estructura de nuevo usuario, se espera: \"USUARIO_NUEVO\": \"Nuevo username\"";
//                        addError(line, column, message);
//                        RESULT = null;
//                      :}
                    ;

newPasswordStructure::= NEWPASSWORD COLON TEXT:newpassword
                        {:
                            currentPassword = newpassword.toString();
                            RESULT = currentPassword;
                        :}
//                        | error:e
//                          {:
//                            int line        = (eleft)+1;
//                            int column      = eright;
//                            String message  = "No se cumple la estructura de nuevo password, se espera: \"NUEVO_PASSWORD\": \"Nuevo password del usuario\"";
//                            addError(line, column, message);
//                            RESULT = null;
//                          :}
                        ;

dateEditStructure::= DATEEDIT COLON DATECREATION:dateCreation
                     {:
                        currentDateCreation = dateCreation.toString();
                        RESULT = currentDateCreation;
                     :}
//                    | error:e
//                      {:
//                        int line        = (eleft)+1;
//                        int column      = eright;
//                        String message  = "No se cumple la estructura de nuevo password, se espera: \"NUEVO_PASSWORD\": \"Nuevo password del usuario\"";
//                        addError(line, column, message);
//                        RESULT = null;
//                      :}
                    ;

deleteuser::= DELETEUSER GREATERT
              initDataUser
              userStructure:user //user for the delete user
              endKeyBracket
              //flag 3
              {:
                if(!user.toString().equals("") | user != null){
                    User userResult = new User(user.toString(), 3);
                    users.add(userResult);
                    RESULT = user;
                } else {
                    int line   = (userleft)+1;
                    int column = userright;
                    String message = "Error semantico el usuario es invalido para eliminar";
                    addError(line, column, message);
                    RESULT = null;
                }
              :}
              | error:e GREATERT
                {:
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "Error para eliminar un usuario";
                    addError(line, column, message);
                    RESULT = null;
                :}
              ;

initDataUser::= KEYA USERDATA COLON BRACKETA KEYA
                | error:e KEYA
                {:
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden de las llaves de apertura xson";
                    addError(line, column, message);
                    RESULT = null;
                :}
                ;

endKeyBracket::= KEYC BRACKETC KEYC
                | error:e KEYC
                {:
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden de cierre de llaves en xson";
                    addError(line, column, message);
                    RESULT = null;
                :}
                ;

initRequest::= OPENREQ INREQUEST COLON
//               | error:e COLON
//               {:
//                    int line    = (eleft)+1;
//                    int column  = eright;
//                    String message = "No se cumple con el orden para iniciar una solicitud de login";
//                    addError(line, column, message);
//                    RESULT = null;
//               :}
               ;

endRequest::= LESST EDREQUEST ENDREQ
              | error:e ENDREQ
               {:
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden para finalizar una solicitud de llaves en xson";
                    addError(line, column, message);
                    RESULT = null;
               :}
              ;

initxson::= OPENXS XSON VERSION EQUALS TEXT ENDXS
            | error:e
            {:
                int line        = (eleft)+1;
                int column      = eright;
                String message  = "No se cumple los parametros para iniciar el xson";
                addError(line, column, message);
                RESULT = null;
            :}
            ;


initMoreRequest::= OPENREQ INITREQUESTS GREATERT
                   | error:e
                     {:
                        int line        = (eleft)+1;
                        int column      = eright;
                        String message  = "No se cumple los parametros para iniciar las solicitudes";
                        addError(line, column, message);
                        RESULT = null;
                     :}
                   ;

endMoreRequest::= OPENREQ ENDREQUESTS GREATERT
                  | error:e
                    {:
                        int line        = (eleft)+1;
                        int column      = eright;
                        String message  = "No se cumple los parametros para finalizar las solicitudes";
                        addError(line, column, message);
                        RESULT = null;
                    :}
                  ;