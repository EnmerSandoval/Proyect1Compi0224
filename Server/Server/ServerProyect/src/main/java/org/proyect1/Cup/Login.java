
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.proyect1.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import org.proyect1.Objects.*;
import org.proyect1.Errors.ErrorL;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Login extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LoginSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Login() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Login(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Login(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\005\010\000\002\006\007\000\002\012\006" +
    "\000\002\012\003\000\002\013\005\000\002\013\003\000" +
    "\002\007\007\000\002\007\003\000\002\011\005\000\002" +
    "\011\003\000\002\003\007\000\002\003\003\000\002\010" +
    "\005\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\004\006\001\002\000\004\002\061\001" +
    "\002\000\006\003\015\024\020\001\002\000\004\005\007" +
    "\001\002\000\004\006\010\001\002\000\004\007\011\001" +
    "\002\000\004\010\012\001\002\000\004\011\013\001\002" +
    "\000\006\003\ufffe\024\ufffe\001\002\000\006\003\054\030" +
    "\056\001\002\000\006\003\ufff3\017\ufff3\001\002\000\006" +
    "\003\026\017\027\001\002\000\004\002\000\001\002\000" +
    "\004\025\021\001\002\000\004\013\022\001\002\000\004" +
    "\026\023\001\002\000\004\027\024\001\002\000\006\003" +
    "\ufff4\017\ufff4\001\002\000\006\003\034\012\036\001\002" +
    "\000\006\003\ufff7\012\ufff7\001\002\000\004\020\030\001" +
    "\002\000\004\013\031\001\002\000\004\021\032\001\002" +
    "\000\004\017\033\001\002\000\006\003\ufff8\012\ufff8\001" +
    "\002\000\006\003\ufffb\016\ufffb\001\002\000\006\003\043" +
    "\016\044\001\002\000\004\013\037\001\002\000\004\014" +
    "\040\001\002\000\004\015\041\001\002\000\006\003\ufffc" +
    "\016\ufffc\001\002\000\006\003\047\023\050\001\002\000" +
    "\006\003\ufff9\023\ufff9\001\002\000\004\013\045\001\002" +
    "\000\004\014\046\001\002\000\006\003\ufffa\023\ufffa\001" +
    "\002\000\006\003\ufff5\030\ufff5\001\002\000\004\022\052" +
    "\001\002\000\006\003\ufffd\030\ufffd\001\002\000\004\023" +
    "\053\001\002\000\006\003\ufff6\030\ufff6\001\002\000\004" +
    "\002\ufff1\001\002\000\004\002\uffff\001\002\000\004\031" +
    "\057\001\002\000\004\032\060\001\002\000\004\002\ufff2" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\010\003\015\004\016\006\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\054" +
    "\001\001\000\002\001\001\000\004\007\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Login$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Login$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Login$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private User userUse = new User();
    private ArrayList<ErrorL> errors = new ArrayList<ErrorL>();
    private ArrayList<String> messages = new ArrayList<String>();
    private String errorString = "";

    public User getUser(){
        return this.userUse;
    }

    public ArrayList<ErrorL> getErrors(){
        return this.errors;
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(errorString, line, column, "Sintactico", message));
    }

    public ArrayList<String> getMessages(){
        return this.messages;
    }

    public void syntax_error(Symbol s){
        errorString = s.value+"";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.";
        messages.add(message);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Login$actions {
  private final Login parser;

  /** Constructor */
  CUP$Login$actions(Login parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Login$do_action_part00000000(
    int                        CUP$Login$act_num,
    java_cup.runtime.lr_parser CUP$Login$parser,
    java.util.Stack            CUP$Login$stack,
    int                        CUP$Login$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Login$result;

      /* select the action based on the action number */
      switch (CUP$Login$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= in EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Login$stack.elementAt(CUP$Login$top-1)).value;
		RESULT = start_val;
              CUP$Login$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-1)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Login$parser.done_parsing();
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // in ::= initxson initlogin 
            {
              Object RESULT =null;

              CUP$Login$result = parser.getSymbolFactory().newSymbol("in",0, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-1)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initlogin ::= login endRequest 
            {
              Object RESULT =null;

              CUP$Login$result = parser.getSymbolFactory().newSymbol("initlogin",2, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-1)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initxson ::= OPENXS XSON VERSION EQUALS NUMBERVERSION ENDXS 
            {
              Object RESULT =null;

              CUP$Login$result = parser.getSymbolFactory().newSymbol("initxson",3, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-5)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // login ::= initRequestLogin initDataUser userStructure passwordStructure endKeyBracket 
            {
              Object RESULT =null;
		int userleft = ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-2)).left;
		int userright = ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-2)).right;
		String user = (String)((java_cup.runtime.Symbol) CUP$Login$stack.elementAt(CUP$Login$top-2)).value;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-1)).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-1)).right;
		String password = (String)((java_cup.runtime.Symbol) CUP$Login$stack.elementAt(CUP$Login$top-1)).value;
		
            User userResult = new User(user.toString(), password.toString(), 4);
            userUse = userResult;
            RESULT = userUse;
         
              CUP$Login$result = parser.getSymbolFactory().newSymbol("login",4, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-4)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // userStructure ::= USER COLON TEXT COMMA 
            {
              String RESULT =null;
		int userleft = ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-1)).left;
		int userright = ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-1)).right;
		Object user = (Object)((java_cup.runtime.Symbol) CUP$Login$stack.elementAt(CUP$Login$top-1)).value;
		
                        RESULT = user.toString();
                   
              CUP$Login$result = parser.getSymbolFactory().newSymbol("userStructure",8, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-3)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // userStructure ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Login$stack.peek()).value;
		
                        int line       = (eleft)+1;
                        int column     = eright;
                        String message = "No se cumple la estructura de usuario, se espera \"PASSWORD: \"NOMBRE DEL USUARIO\" ,";
                        addError(line, column, message);
                        RESULT = null;
                   
              CUP$Login$result = parser.getSymbolFactory().newSymbol("userStructure",8, ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // passwordStructure ::= PASSWORD COLON TEXT 
            {
              String RESULT =null;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).right;
		Object password = (Object)((java_cup.runtime.Symbol) CUP$Login$stack.peek()).value;
		
                        RESULT = password.toString();
                     
              CUP$Login$result = parser.getSymbolFactory().newSymbol("passwordStructure",9, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-2)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // passwordStructure ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Login$stack.peek()).value;
		
                        int line        = (eleft)+1;
                        int column      = eright;
                        String message = "No se cumple la estructura de usuario, se espera: \"PASSWORD: \"PASSWORD DEL USUARIO\"";
                        addError(line, column, message);
                        RESULT = null;
                     
              CUP$Login$result = parser.getSymbolFactory().newSymbol("passwordStructure",9, ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // initDataUser ::= KEYA USERDATA COLON BRACKETA KEYA 
            {
              Object RESULT =null;

              CUP$Login$result = parser.getSymbolFactory().newSymbol("initDataUser",5, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-4)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // initDataUser ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Login$stack.peek()).value;
		
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden de las llaves de apertura xson";
                    addError(line, column, message);
                    RESULT = null;
                
              CUP$Login$result = parser.getSymbolFactory().newSymbol("initDataUser",5, ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // endKeyBracket ::= KEYC BRACKETC KEYC 
            {
              Object RESULT =null;

              CUP$Login$result = parser.getSymbolFactory().newSymbol("endKeyBracket",7, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-2)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // endKeyBracket ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Login$stack.peek()).value;
		
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden de cierre de llaves en xson";
                    addError(line, column, message);
                    RESULT = null;
                
              CUP$Login$result = parser.getSymbolFactory().newSymbol("endKeyBracket",7, ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // initRequestLogin ::= OPENREQ INREQUEST COLON LOGINUSER GREATERT 
            {
              Object RESULT =null;

              CUP$Login$result = parser.getSymbolFactory().newSymbol("initRequestLogin",1, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-4)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // initRequestLogin ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Login$stack.peek()).value;
		
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden para iniciar una solicitud de login";
                    addError(line, column, message);
                    RESULT = null;
               
              CUP$Login$result = parser.getSymbolFactory().newSymbol("initRequestLogin",1, ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // endRequest ::= LESST EDREQUEST ENDREQ 
            {
              Object RESULT =null;

              CUP$Login$result = parser.getSymbolFactory().newSymbol("endRequest",6, ((java_cup.runtime.Symbol)CUP$Login$stack.elementAt(CUP$Login$top-2)), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // endRequest ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Login$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Login$stack.peek()).value;
		
                    int line    = (eleft)+1;
                    int column  = eright;
                    String message = "No se cumple con el orden para finalizar una solicitud de llaves en xson";
                    addError(line, column, message);
                    RESULT = null;
               
              CUP$Login$result = parser.getSymbolFactory().newSymbol("endRequest",6, ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), ((java_cup.runtime.Symbol)CUP$Login$stack.peek()), RESULT);
            }
          return CUP$Login$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Login$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Login$do_action(
    int                        CUP$Login$act_num,
    java_cup.runtime.lr_parser CUP$Login$parser,
    java.util.Stack            CUP$Login$stack,
    int                        CUP$Login$top)
    throws java.lang.Exception
    {
              return CUP$Login$do_action_part00000000(
                               CUP$Login$act_num,
                               CUP$Login$parser,
                               CUP$Login$stack,
                               CUP$Login$top);
    }
}

}
