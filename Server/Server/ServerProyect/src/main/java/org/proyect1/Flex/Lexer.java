package org.proyect1.Flex;// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex



import java_cup.runtime.*;
import java.util.ArrayList;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\17\u0200\1\u0500"+
    "\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\10\0\1\4"+
    "\1\0\1\4\1\5\1\0\12\6\2\0\1\7\1\10"+
    "\1\11\1\12\1\0\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\2\22\1\24\1\25\1\26"+
    "\1\27\1\30\1\22\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\22\1\40\1\41\1\0\1\42\1\0"+
    "\1\43\1\0\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\2\22\1\24\1\25\1\26\1\27"+
    "\1\30\1\22\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\22\1\40\1\44\1\45\1\46\7\0\1\1"+
    "\32\0\1\1\217\0\2\47\115\0\1\50\u0200\0\1\1"+
    "\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\21\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\0\1\16\1\17\6\7\1\0\1\20\13\7\1\0"+
    "\1\7\1\0\2\7\1\0\1\20\3\0\1\15\1\0"+
    "\4\7\1\0\2\7\1\0\3\7\1\0\7\7\1\0"+
    "\2\7\1\0\4\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\15\1\0\1\15\2\0\2\7\1\0\2\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0"+
    "\2\7\1\0\1\21\3\7\2\0\1\7\1\0\1\7"+
    "\1\0\2\22\1\0\1\7\2\23\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\2\0\2\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\1\0\2\7"+
    "\1\0\1\7\1\0\1\7\1\0\3\7\2\0\1\7"+
    "\1\0\1\7\2\0\2\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\2\0\1\7\1\0\2\24\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\25\3\7\1\0\2\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\2\26\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\2\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\2\27\2\30"+
    "\2\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\2\31\1\7\2\32\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\33\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\2\34"+
    "\1\7\1\0\1\7\1\0\2\7\2\0\2\7\1\0"+
    "\3\7\3\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\2\0\2\7\1\0\3\7\3\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\2\35\1\7"+
    "\1\0\3\7\3\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\2\0\2\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7"+
    "\3\0\2\36\1\7\1\0\2\7\2\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\37\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\40\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\2\7\2\0\1\7\1\0\2\41"+
    "\1\7\1\0\1\7\1\0\2\42\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\2\7\2\0\2\7"+
    "\1\0\1\7\2\0\2\43\2\7\2\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\2\44\1\7\2\0"+
    "\2\45\1\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\2\0\2\7\2\0\1\7\1\0\2\46"+
    "\2\47\2\7\2\50\1\0\2\51\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\52\1\7\2\0\2\7"+
    "\2\0\1\7\1\0\2\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\53\1\0\1\7\2\54"+
    "\1\0\1\7\1\0\1\55\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\56\2\57\2\60\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\61\1\7\1\0"+
    "\1\7\1\0\2\62\1\7\1\0\2\63\1\7\1\0"+
    "\1\7\1\0\2\64\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\65\1\7\1\0\2\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[671];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\51\0\173\0\244\0\315\0\366"+
    "\0\51\0\51\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec"+
    "\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334"+
    "\0\u035d\0\u0386\0\u03af\0\51\0\51\0\51\0\51\0\51"+
    "\0\u03d8\0\u0401\0\u042a\0\51\0\51\0\u0453\0\u047c\0\u04a5"+
    "\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed"+
    "\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735"+
    "\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d"+
    "\0\u08a6\0\u08cf\0\51\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c"+
    "\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4"+
    "\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c"+
    "\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb"+
    "\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123"+
    "\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b"+
    "\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361\0\u138a\0\u13b3"+
    "\0\u13dc\0\u1405\0\u0148\0\u142e\0\u1457\0\u1480\0\u14a9\0\u14d2"+
    "\0\u14fb\0\u1524\0\u154d\0\u1576\0\u0148\0\51\0\u159f\0\u15c8"+
    "\0\u0148\0\51\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be"+
    "\0\u16e7\0\u1710\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806"+
    "\0\u182f\0\u1858\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e"+
    "\0\u1977\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96"+
    "\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde"+
    "\0\u1c07\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\u1d26"+
    "\0\u1d4f\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c\0\u1e45\0\u1e6e"+
    "\0\u0148\0\51\0\u1e97\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64"+
    "\0\u0148\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\u2031\0\u205a\0\u2083"+
    "\0\u20ac\0\u20d5\0\u20fe\0\u2127\0\u2150\0\u2179\0\u0148\0\51"+
    "\0\u21a2\0\u21cb\0\u21f4\0\u221d\0\u2246\0\u226f\0\u2298\0\u22c1"+
    "\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e\0\u23b7\0\u23e0\0\u2409"+
    "\0\u2432\0\u245b\0\u2484\0\u24ad\0\u24d6\0\u24ff\0\u2528\0\u2551"+
    "\0\u257a\0\u25a3\0\u25cc\0\u25f5\0\u261e\0\u2647\0\u2670\0\u2699"+
    "\0\u26c2\0\u26eb\0\u2714\0\u273d\0\u2766\0\u278f\0\u27b8\0\u27e1"+
    "\0\u0148\0\51\0\u280a\0\u2833\0\u285c\0\u2885\0\u28ae\0\u28d7"+
    "\0\u2900\0\u2929\0\u2952\0\u297b\0\u29a4\0\u29cd\0\u29f6\0\u2a1f"+
    "\0\u2a48\0\u2a71\0\u2a9a\0\u2ac3\0\u2aec\0\u2b15\0\u2b3e\0\u0148"+
    "\0\51\0\u2b67\0\u0148\0\51\0\u2b90\0\u2bb9\0\u2be2\0\u2c0b"+
    "\0\u2c34\0\u2c5d\0\u2c86\0\u2caf\0\u2cd8\0\u2d01\0\u2d2a\0\u2d53"+
    "\0\u2d7c\0\u2da5\0\u2dce\0\u2df7\0\u2e20\0\u2e49\0\u2e72\0\u2e9b"+
    "\0\u2ec4\0\u0148\0\51\0\u2eed\0\u2f16\0\u2f3f\0\u2f68\0\u2f91"+
    "\0\u2fba\0\u2fe3\0\u300c\0\u3035\0\u305e\0\u3087\0\u30b0\0\u30d9"+
    "\0\u0148\0\51\0\u3102\0\u312b\0\u3154\0\u317d\0\u31a6\0\u31cf"+
    "\0\u31f8\0\u3221\0\u324a\0\u3273\0\u329c\0\u32c5\0\u32ee\0\u3317"+
    "\0\u3340\0\u3369\0\u3392\0\u33bb\0\u33e4\0\u340d\0\u3436\0\u345f"+
    "\0\u3488\0\u34b1\0\u34da\0\u3503\0\u352c\0\u3555\0\u357e\0\u35a7"+
    "\0\u35d0\0\u35f9\0\u3622\0\u364b\0\u3674\0\u369d\0\u36c6\0\u36ef"+
    "\0\u3718\0\u3741\0\u376a\0\u3793\0\u37bc\0\u37e5\0\u380e\0\u3837"+
    "\0\u3860\0\u3889\0\u38b2\0\u38db\0\u3904\0\u392d\0\u3956\0\u397f"+
    "\0\u39a8\0\u39d1\0\u39fa\0\u3a23\0\u3a4c\0\u3a75\0\u0148\0\51"+
    "\0\u3a9e\0\u3ac7\0\u3af0\0\u3b19\0\u3b42\0\u3b6b\0\u3b94\0\u3bbd"+
    "\0\u3be6\0\u3c0f\0\u3c38\0\u3c61\0\u3c8a\0\u3cb3\0\u3cdc\0\u3d05"+
    "\0\u3d2e\0\u3d57\0\u3d80\0\u3da9\0\u3dd2\0\u3dfb\0\u3e24\0\u3e4d"+
    "\0\u3e76\0\u3e9f\0\u3ec8\0\u3ef1\0\u3f1a\0\u3f43\0\u3f6c\0\u3f95"+
    "\0\u3fbe\0\u3fe7\0\u4010\0\u4039\0\u4062\0\u408b\0\u40b4\0\u40dd"+
    "\0\u4106\0\u412f\0\u4158\0\u4181\0\u41aa\0\u41d3\0\u41fc\0\u0148"+
    "\0\51\0\u4225\0\u424e\0\u4277\0\u42a0\0\u42c9\0\u42f2\0\u431b"+
    "\0\u4344\0\u436d\0\u4396\0\u43bf\0\u43e8\0\u4411\0\u443a\0\u4463"+
    "\0\u448c\0\u44b5\0\u0148\0\51\0\u44de\0\u4507\0\u4530\0\u4559"+
    "\0\u4582\0\u45ab\0\u45d4\0\u45fd\0\u4626\0\u464f\0\u4678\0\u46a1"+
    "\0\u0148\0\51\0\u46ca\0\u46f3\0\u471c\0\u4745\0\u476e\0\u4797"+
    "\0\u47c0\0\u47e9\0\u4812\0\u483b\0\u4864\0\u488d\0\u48b6\0\u48df"+
    "\0\u0148\0\51\0\u4908\0\u4931\0\u495a\0\u4983\0\u0148\0\51"+
    "\0\u49ac\0\u49d5\0\u49fe\0\u4a27\0\u4a50\0\u4a79\0\u4aa2\0\u4acb"+
    "\0\u4af4\0\u4b1d\0\u4b46\0\u4b6f\0\u4b98\0\u4bc1\0\u4bea\0\u4c13"+
    "\0\u4c3c\0\u4c65\0\u4c8e\0\u4cb7\0\u4ce0\0\u0148\0\51\0\u4d09"+
    "\0\u4d32\0\u4d5b\0\u4d84\0\u4dad\0\u4dd6\0\u4dff\0\u4e28\0\u4e51"+
    "\0\u4e7a\0\u4ea3\0\u4ecc\0\u0148\0\51\0\u4ef5\0\u4f1e\0\u4f47"+
    "\0\u4f70\0\u4f99\0\u4fc2\0\u4feb\0\u5014\0\u503d\0\u5066\0\u508f"+
    "\0\u50b8\0\u50e1\0\u510a\0\u5133\0\u515c\0\u5185\0\u51ae\0\u51d7"+
    "\0\u5200\0\u5229\0\u5252\0\u527b\0\u0148\0\51\0\u0148\0\51"+
    "\0\u52a4\0\u52cd\0\u0148\0\51\0\u52f6\0\u0148\0\51\0\u531f"+
    "\0\u5348\0\u5371\0\u539a\0\u53c3\0\u53ec\0\u5415\0\u0148\0\51"+
    "\0\u543e\0\u5467\0\u5490\0\u54b9\0\u54e2\0\u550b\0\u5534\0\u555d"+
    "\0\u5586\0\u55af\0\u55d8\0\u5601\0\u562a\0\u5653\0\u567c\0\u56a5"+
    "\0\u56ce\0\u56f7\0\u5720\0\u0148\0\51\0\u5749\0\u5772\0\u0148"+
    "\0\51\0\u579b\0\u57c4\0\u57ed\0\u0148\0\u5816\0\u583f\0\u5868"+
    "\0\u5891\0\u58ba\0\u58e3\0\u590c\0\u5935\0\u595e\0\u5987\0\u59b0"+
    "\0\u59d9\0\u5a02\0\u5a2b\0\u0148\0\51\0\u5a54\0\u5a7d\0\u5aa6"+
    "\0\u5acf\0\u5af8\0\u5b21\0\u5b4a\0\u5b73\0\u5b9c\0\u5bc5\0\u5bee"+
    "\0\u5c17\0\u0148\0\51\0\u5c40\0\u5c69\0\u5c92\0\u5cbb\0\u0148"+
    "\0\51\0\u5ce4\0\u5d0d\0\u0148\0\51\0\u5d36\0\u5d5f\0\u5d88"+
    "\0\u5db1\0\u0148\0\51\0\u5dda\0\u5e03\0\u5e2c\0\u5e55\0\u5e7e"+
    "\0\u5ea7\0\u0148\0\51\0\u5ed0\0\u5ef9\0\u0148\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[671];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\14\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\14\1\30\1\31\1\32\1\14\1\33\1\14"+
    "\1\34\1\35\1\14\1\36\1\37\1\40\1\41\1\2"+
    "\52\0\1\3\55\0\1\42\50\0\1\43\50\0\1\7"+
    "\44\0\1\44\7\0\1\45\44\0\1\14\4\0\6\14"+
    "\1\46\17\14\2\0\1\14\13\0\1\14\4\0\26\14"+
    "\2\0\1\14\13\0\1\14\4\0\11\14\1\47\14\14"+
    "\2\0\1\14\13\0\1\14\4\0\1\50\25\14\2\0"+
    "\1\14\13\0\1\14\4\0\11\14\1\51\1\14\1\52"+
    "\12\14\2\0\1\14\13\0\1\14\4\0\10\14\1\53"+
    "\15\14\2\0\1\14\3\0\1\54\7\0\1\14\4\0"+
    "\3\14\1\55\7\14\1\56\12\14\2\0\1\14\13\0"+
    "\1\14\4\0\14\14\1\57\11\14\2\0\1\14\13\0"+
    "\1\14\4\0\14\14\1\60\11\14\2\0\1\14\13\0"+
    "\1\14\4\0\14\14\1\61\4\14\1\62\4\14\2\0"+
    "\1\14\13\0\1\14\4\0\15\14\1\63\10\14\2\0"+
    "\1\14\13\0\1\14\4\0\1\64\25\14\2\0\1\14"+
    "\13\0\1\14\4\0\4\14\1\65\21\14\2\0\1\14"+
    "\13\0\1\14\4\0\4\14\1\66\3\14\1\67\5\14"+
    "\1\70\7\14\2\0\1\14\3\0\1\71\7\0\1\14"+
    "\4\0\17\14\1\72\6\14\2\0\1\14\4\0\1\73"+
    "\6\0\1\14\4\0\4\14\1\74\21\14\2\0\1\14"+
    "\13\0\1\14\4\0\17\14\1\75\6\14\2\0\1\14"+
    "\4\0\1\76\16\0\1\77\7\0\1\100\27\0\1\101"+
    "\1\42\10\0\1\102\34\0\1\103\2\0\1\43\10\0"+
    "\1\104\37\0\1\14\4\0\16\14\1\105\7\14\2\0"+
    "\1\14\13\0\1\14\4\0\1\106\25\14\2\0\1\14"+
    "\13\0\1\14\4\0\20\14\1\107\5\14\2\0\1\14"+
    "\13\0\1\14\4\0\10\14\1\110\15\14\2\0\1\14"+
    "\3\0\1\111\7\0\1\14\4\0\22\14\1\112\3\14"+
    "\2\0\1\14\13\0\1\14\4\0\13\14\1\113\12\14"+
    "\2\0\1\14\33\0\1\114\30\0\1\14\4\0\26\14"+
    "\2\0\1\115\13\0\1\14\4\0\3\14\1\116\13\14"+
    "\1\117\6\14\2\0\1\14\4\0\1\120\6\0\1\14"+
    "\4\0\6\14\1\121\17\14\2\0\1\14\13\0\1\14"+
    "\4\0\3\14\1\122\22\14\2\0\1\14\13\0\1\14"+
    "\4\0\12\14\1\123\13\14\2\0\1\14\13\0\1\14"+
    "\4\0\4\14\1\124\21\14\2\0\1\14\13\0\1\14"+
    "\4\0\2\14\1\125\23\14\2\0\1\14\13\0\1\14"+
    "\4\0\16\14\1\126\1\127\6\14\2\0\1\14\4\0"+
    "\1\130\6\0\1\14\4\0\1\131\16\14\1\132\6\14"+
    "\2\0\1\14\4\0\1\133\6\0\1\14\4\0\12\14"+
    "\1\134\11\14\1\135\1\14\2\0\1\14\13\0\1\14"+
    "\4\0\4\14\1\136\21\14\2\0\1\14\13\0\1\14"+
    "\4\0\10\14\1\137\15\14\2\0\1\14\3\0\1\140"+
    "\20\0\1\141\37\0\1\14\4\0\21\14\1\142\4\14"+
    "\2\0\1\14\41\0\1\143\22\0\1\14\4\0\16\14"+
    "\1\144\7\14\2\0\1\14\13\0\1\14\4\0\14\14"+
    "\1\145\11\14\2\0\1\14\34\0\1\146\64\0\1\147"+
    "\23\0\1\150\13\0\1\120\15\0\1\120\6\0\1\151"+
    "\46\0\1\152\1\0\1\153\46\0\1\154\1\0\1\155"+
    "\50\0\1\14\4\0\4\14\1\156\21\14\2\0\1\14"+
    "\13\0\1\14\4\0\17\14\1\157\6\14\2\0\1\14"+
    "\4\0\1\160\6\0\1\14\4\0\14\14\1\161\11\14"+
    "\2\0\1\14\13\0\1\14\4\0\12\14\1\162\13\14"+
    "\2\0\1\14\32\0\1\163\31\0\1\14\4\0\10\14"+
    "\1\164\15\14\2\0\1\14\3\0\1\165\7\0\1\14"+
    "\4\0\26\14\2\0\1\166\50\0\1\167\13\0\1\14"+
    "\4\0\20\14\1\170\5\14\2\0\1\14\13\0\1\14"+
    "\4\0\10\14\1\171\15\14\2\0\1\14\3\0\1\172"+
    "\7\0\1\14\4\0\20\14\1\173\5\14\2\0\1\14"+
    "\40\0\1\174\23\0\1\14\4\0\10\14\1\175\15\14"+
    "\2\0\1\14\3\0\1\176\7\0\1\14\4\0\10\14"+
    "\1\177\15\14\2\0\1\14\3\0\1\200\7\0\1\14"+
    "\4\0\1\14\1\201\24\14\2\0\1\14\13\0\1\14"+
    "\4\0\22\14\1\202\3\14\2\0\1\14\13\0\1\14"+
    "\4\0\10\14\1\203\15\14\2\0\1\14\3\0\1\204"+
    "\7\0\1\14\4\0\1\205\25\14\2\0\1\14\13\0"+
    "\1\14\4\0\17\14\1\206\6\14\2\0\1\14\4\0"+
    "\1\207\32\0\1\207\15\0\1\207\6\0\1\14\4\0"+
    "\11\14\1\210\14\14\2\0\1\14\13\0\1\14\4\0"+
    "\15\14\1\211\10\14\2\0\1\14\35\0\1\212\26\0"+
    "\1\14\4\0\1\213\25\14\2\0\1\14\13\0\1\14"+
    "\4\0\20\14\1\214\5\14\2\0\1\14\13\0\1\14"+
    "\4\0\12\14\1\215\13\14\2\0\1\14\13\0\1\14"+
    "\4\0\22\14\1\216\3\14\2\0\1\14\42\0\1\217"+
    "\40\0\1\220\31\0\1\14\4\0\1\221\25\14\2\0"+
    "\1\14\20\0\1\222\43\0\1\14\4\0\17\14\1\223"+
    "\6\14\2\0\1\14\4\0\1\224\6\0\1\14\4\0"+
    "\13\14\1\225\12\14\2\0\1\14\33\0\1\226\55\0"+
    "\1\227\40\0\1\172\23\0\1\172\7\0\1\151\10\0"+
    "\1\102\37\0\1\153\50\0\1\155\45\0\1\103\2\0"+
    "\1\155\50\0\1\14\4\0\6\14\1\230\17\14\2\0"+
    "\1\14\13\0\1\14\4\0\4\14\1\231\21\14\2\0"+
    "\1\14\24\0\1\232\37\0\1\14\4\0\17\14\1\233"+
    "\6\14\2\0\1\14\4\0\1\234\6\0\1\14\4\0"+
    "\10\14\1\235\15\14\2\0\1\14\3\0\1\236\24\0"+
    "\1\236\23\0\1\236\7\0\1\14\4\0\14\14\1\237"+
    "\11\14\2\0\1\14\34\0\1\240\27\0\1\14\4\0"+
    "\4\14\1\241\12\14\1\242\6\14\2\0\1\14\4\0"+
    "\1\243\17\0\1\244\12\0\1\243\15\0\1\243\6\0"+
    "\1\14\4\0\16\14\1\245\7\14\2\0\1\14\13\0"+
    "\1\14\4\0\2\14\1\246\23\14\2\0\1\14\22\0"+
    "\1\247\41\0\1\14\4\0\10\14\1\250\15\14\2\0"+
    "\1\14\3\0\1\251\24\0\1\251\23\0\1\251\7\0"+
    "\1\14\4\0\13\14\1\252\12\14\2\0\1\14\33\0"+
    "\1\253\30\0\1\14\4\0\5\14\1\254\20\14\2\0"+
    "\1\14\25\0\1\255\36\0\1\14\4\0\16\14\1\256"+
    "\7\14\2\0\1\14\13\0\1\14\4\0\1\257\13\14"+
    "\1\260\11\14\2\0\1\14\13\0\1\14\4\0\14\14"+
    "\1\261\11\14\2\0\1\14\34\0\1\262\27\0\1\14"+
    "\4\0\12\14\1\263\13\14\2\0\1\14\13\0\1\14"+
    "\4\0\23\14\1\264\2\14\2\0\1\14\43\0\1\265"+
    "\20\0\1\14\4\0\10\14\1\266\15\14\2\0\1\14"+
    "\3\0\1\267\7\0\1\14\4\0\21\14\1\270\4\14"+
    "\2\0\1\14\41\0\1\271\22\0\1\14\4\0\14\14"+
    "\1\272\11\14\2\0\1\14\13\0\1\14\4\0\15\14"+
    "\1\273\10\14\2\0\1\14\13\0\1\14\4\0\10\14"+
    "\1\274\15\14\2\0\1\14\3\0\1\275\24\0\1\275"+
    "\23\0\1\275\31\0\1\276\26\0\1\14\4\0\16\14"+
    "\1\277\7\14\2\0\1\14\36\0\1\300\25\0\1\14"+
    "\4\0\10\14\1\301\15\14\2\0\1\14\3\0\1\302"+
    "\24\0\1\302\23\0\1\302\32\0\1\303\25\0\1\14"+
    "\4\0\1\304\25\14\2\0\1\14\13\0\1\14\4\0"+
    "\26\14\2\0\1\305\50\0\1\306\13\0\1\14\4\0"+
    "\13\14\1\307\12\14\2\0\1\14\33\0\1\310\30\0"+
    "\1\14\4\0\26\14\2\0\1\311\50\0\1\312\13\0"+
    "\1\14\4\0\13\14\1\313\12\14\2\0\1\14\13\0"+
    "\1\14\4\0\14\14\1\314\11\14\2\0\1\14\34\0"+
    "\1\315\47\0\1\316\30\0\1\14\4\0\10\14\1\317"+
    "\15\14\2\0\1\14\3\0\1\320\7\0\1\14\4\0"+
    "\4\14\1\321\21\14\2\0\1\14\24\0\1\322\37\0"+
    "\1\14\4\0\20\14\1\323\5\14\2\0\1\14\40\0"+
    "\1\324\23\0\1\14\4\0\26\14\2\0\1\325\50\0"+
    "\1\326\13\0\1\14\4\0\10\14\1\327\15\14\2\0"+
    "\1\14\3\0\1\330\24\0\1\330\23\0\1\330\7\0"+
    "\1\14\4\0\4\14\1\331\21\14\2\0\1\14\13\0"+
    "\1\14\4\0\26\14\2\0\1\332\13\0\1\14\4\0"+
    "\26\14\2\0\1\333\13\0\1\14\4\0\13\14\1\334"+
    "\12\14\2\0\1\14\33\0\1\335\30\0\1\14\4\0"+
    "\4\14\1\336\21\14\2\0\1\14\13\0\1\14\4\0"+
    "\14\14\1\337\11\14\2\0\1\14\34\0\1\340\27\0"+
    "\1\14\4\0\25\14\1\341\2\0\1\14\45\0\1\342"+
    "\16\0\1\14\4\0\4\14\1\343\21\14\2\0\1\14"+
    "\24\0\1\344\37\0\1\14\4\0\26\14\2\0\1\345"+
    "\13\0\1\14\4\0\14\14\1\346\11\14\2\0\1\14"+
    "\13\0\1\14\4\0\1\347\25\14\2\0\1\14\20\0"+
    "\1\350\64\0\1\351\27\0\1\14\4\0\10\14\1\352"+
    "\15\14\2\0\1\14\3\0\1\353\24\0\1\353\23\0"+
    "\1\353\7\0\1\14\4\0\14\14\1\354\11\14\2\0"+
    "\1\14\34\0\1\355\44\0\1\320\23\0\1\320\7\0"+
    "\1\14\4\0\16\14\1\356\7\14\2\0\1\14\13\0"+
    "\1\14\4\0\21\14\1\357\4\14\2\0\1\14\41\0"+
    "\1\360\22\0\1\14\4\0\1\361\25\14\2\0\1\14"+
    "\20\0\1\362\43\0\1\14\4\0\16\14\1\363\7\14"+
    "\2\0\1\14\36\0\1\364\25\0\1\14\4\0\22\14"+
    "\1\365\3\14\2\0\1\14\13\0\1\14\4\0\11\14"+
    "\1\366\14\14\2\0\1\14\31\0\1\367\61\0\1\370"+
    "\21\0\1\14\4\0\22\14\1\371\3\14\2\0\1\14"+
    "\42\0\1\372\21\0\1\14\4\0\21\14\1\373\4\14"+
    "\2\0\1\14\41\0\1\374\22\0\1\14\4\0\21\14"+
    "\1\375\4\14\2\0\1\14\41\0\1\376\22\0\1\14"+
    "\4\0\2\14\1\377\23\14\2\0\1\14\22\0\1\u0100"+
    "\41\0\1\14\4\0\20\14\1\u0101\5\14\2\0\1\14"+
    "\13\0\1\14\4\0\15\14\1\u0102\10\14\2\0\1\14"+
    "\13\0\1\14\4\0\4\14\1\u0103\21\14\2\0\1\14"+
    "\24\0\1\u0104\37\0\1\14\4\0\20\14\1\u0105\5\14"+
    "\2\0\1\14\13\0\1\14\4\0\16\14\1\u0106\7\14"+
    "\2\0\1\14\36\0\1\u0107\25\0\1\14\4\0\1\u0108"+
    "\25\14\2\0\1\14\20\0\1\u0109\43\0\1\14\4\0"+
    "\17\14\1\u010a\6\14\2\0\1\14\4\0\1\u010b\32\0"+
    "\1\u010b\15\0\1\u010b\6\0\1\14\4\0\22\14\1\u010c"+
    "\3\14\2\0\1\14\13\0\1\14\4\0\26\14\2\0"+
    "\1\u010d\50\0\1\u010e\13\0\1\14\4\0\14\14\1\u010f"+
    "\11\14\2\0\1\14\34\0\1\u0110\27\0\1\14\4\0"+
    "\13\14\1\u0111\12\14\2\0\1\14\33\0\1\u0112\30\0"+
    "\1\14\4\0\26\14\2\0\1\u0113\13\0\1\14\4\0"+
    "\17\14\1\u0114\6\14\2\0\1\14\4\0\1\u0115\32\0"+
    "\1\u0115\15\0\1\u0115\6\0\1\14\4\0\16\14\1\u0116"+
    "\7\14\2\0\1\14\36\0\1\u0117\25\0\1\14\4\0"+
    "\4\14\1\u0118\21\14\2\0\1\14\24\0\1\u0119\37\0"+
    "\1\14\4\0\10\14\1\u011a\15\14\2\0\1\14\3\0"+
    "\1\u011b\7\0\1\14\4\0\10\14\1\u011c\15\14\2\0"+
    "\1\14\3\0\1\u011d\24\0\1\u011d\23\0\1\u011d\24\0"+
    "\1\u011b\23\0\1\u011b\7\0\1\14\4\0\10\14\1\u011e"+
    "\15\14\2\0\1\14\3\0\1\u011f\24\0\1\u011f\23\0"+
    "\1\u011f\7\0\1\14\4\0\2\14\1\u0120\23\14\2\0"+
    "\1\14\22\0\1\u0121\41\0\1\14\4\0\17\14\1\u0122"+
    "\6\14\2\0\1\14\4\0\1\u0123\32\0\1\u0123\15\0"+
    "\1\u0123\6\0\1\14\4\0\1\u0124\25\14\2\0\1\14"+
    "\20\0\1\u0125\43\0\1\14\4\0\16\14\1\u0126\7\14"+
    "\2\0\1\14\13\0\1\14\4\0\1\u0127\25\14\2\0"+
    "\1\14\13\0\1\14\4\0\17\14\1\u0128\6\14\2\0"+
    "\1\14\4\0\1\u0129\32\0\1\u0129\15\0\1\u0129\6\0"+
    "\1\14\4\0\16\14\1\u012a\7\14\2\0\1\14\13\0"+
    "\1\14\4\0\3\14\1\u012b\22\14\2\0\1\14\23\0"+
    "\1\u012c\40\0\1\14\4\0\16\14\1\u012d\7\14\2\0"+
    "\1\14\36\0\1\u012e\25\0\1\14\4\0\20\14\1\u012f"+
    "\5\14\2\0\1\14\40\0\1\u0130\23\0\1\14\4\0"+
    "\10\14\1\u0131\15\14\2\0\1\14\3\0\1\u0132\7\0"+
    "\1\14\4\0\15\14\1\u0133\10\14\2\0\1\14\35\0"+
    "\1\u0134\26\0\1\14\4\0\26\14\2\0\1\u0135\50\0"+
    "\1\u0136\13\0\1\14\4\0\2\14\1\u0137\23\14\2\0"+
    "\1\14\13\0\1\14\4\0\21\14\1\u0138\4\14\2\0"+
    "\1\14\41\0\1\u0139\22\0\1\14\4\0\26\14\2\0"+
    "\1\u013a\50\0\1\u013b\13\0\1\14\4\0\17\14\1\u013c"+
    "\6\14\2\0\1\14\4\0\1\u013d\32\0\1\u013d\15\0"+
    "\1\u013d\6\0\1\14\4\0\14\14\1\u013e\11\14\2\0"+
    "\1\14\34\0\1\u013f\27\0\1\14\4\0\2\14\1\u0140"+
    "\23\14\2\0\1\14\22\0\1\u0141\41\0\1\14\4\0"+
    "\1\u0142\25\14\2\0\1\14\20\0\1\u0143\43\0\1\14"+
    "\4\0\10\14\1\u0144\15\14\2\0\1\14\3\0\1\u0145"+
    "\24\0\1\u0145\23\0\1\u0145\7\0\1\14\4\0\21\14"+
    "\1\u0146\4\14\2\0\1\14\41\0\1\u0147\22\0\1\14"+
    "\4\0\16\14\1\u0148\7\14\2\0\1\14\36\0\1\u0149"+
    "\25\0\1\14\4\0\10\14\1\u014a\15\14\2\0\1\14"+
    "\3\0\1\u014b\7\0\1\14\4\0\17\14\1\u014c\6\14"+
    "\2\0\1\14\4\0\1\u014d\6\0\1\14\4\0\14\14"+
    "\1\u014e\11\14\2\0\1\14\13\0\1\14\4\0\26\14"+
    "\2\0\1\u014f\50\0\1\u0150\13\0\1\14\4\0\1\u0151"+
    "\25\14\2\0\1\14\20\0\1\u0152\43\0\1\14\4\0"+
    "\17\14\1\u0153\6\14\2\0\1\14\4\0\1\u0154\32\0"+
    "\1\u0154\15\0\1\u0154\6\0\1\14\4\0\16\14\1\u0155"+
    "\7\14\2\0\1\14\36\0\1\u0156\25\0\1\14\4\0"+
    "\1\u0157\12\14\1\u0158\12\14\2\0\1\14\20\0\1\u0159"+
    "\12\0\1\u015a\30\0\1\14\4\0\14\14\1\u015b\11\14"+
    "\2\0\1\14\13\0\1\14\4\0\1\u015c\25\14\2\0"+
    "\1\14\20\0\1\u015d\43\0\1\14\4\0\2\14\1\u015e"+
    "\15\14\1\u015f\1\u0160\4\14\2\0\1\14\22\0\1\u0161"+
    "\15\0\1\u0162\1\u0163\22\0\1\14\4\0\15\14\1\u0164"+
    "\10\14\2\0\1\14\35\0\1\u0165\26\0\1\14\4\0"+
    "\26\14\2\0\1\u0166\50\0\1\u0167\13\0\1\14\4\0"+
    "\10\14\1\u0168\15\14\2\0\1\14\3\0\1\u0169\24\0"+
    "\1\u0169\23\0\1\u0169\7\0\1\14\4\0\14\14\1\u016a"+
    "\11\14\2\0\1\14\34\0\1\u016b\27\0\1\14\4\0"+
    "\1\u016c\25\14\2\0\1\14\20\0\1\u016d\43\0\1\14"+
    "\4\0\26\14\2\0\1\u016e\50\0\1\u016f\13\0\1\14"+
    "\4\0\22\14\1\u0170\3\14\2\0\1\14\42\0\1\u0171"+
    "\21\0\1\14\4\0\17\14\1\u0172\6\14\2\0\1\14"+
    "\4\0\1\u0173\32\0\1\u0173\15\0\1\u0173\6\0\1\14"+
    "\4\0\17\14\1\u0174\6\14\2\0\1\14\4\0\1\u0175"+
    "\6\0\1\14\4\0\17\14\1\u0176\6\14\2\0\1\14"+
    "\4\0\1\u0177\32\0\1\u0177\15\0\1\u0177\6\0\1\14"+
    "\4\0\10\14\1\u0178\15\14\2\0\1\14\3\0\1\u0179"+
    "\24\0\1\u0179\23\0\1\u0179\7\0\1\14\4\0\4\14"+
    "\1\u017a\21\14\2\0\1\14\24\0\1\u017b\37\0\1\14"+
    "\4\0\13\14\1\u017c\12\14\2\0\1\14\13\0\1\14"+
    "\4\0\21\14\1\u017d\4\14\2\0\1\14\33\0\1\u017e"+
    "\56\0\1\u017f\22\0\1\14\4\0\12\14\1\u0180\13\14"+
    "\2\0\1\14\13\0\1\14\4\0\16\14\1\u0181\7\14"+
    "\2\0\1\14\36\0\1\u0182\25\0\1\14\4\0\14\14"+
    "\1\u0183\11\14\2\0\1\14\13\0\1\14\4\0\16\14"+
    "\1\u0184\7\14\2\0\1\14\13\0\1\14\4\0\17\14"+
    "\1\u0185\6\14\2\0\1\14\4\0\1\u0186\27\0\1\u0187"+
    "\52\0\1\u0188\51\0\1\u0186\15\0\1\u0186\6\0\1\14"+
    "\4\0\21\14\1\u0189\4\14\2\0\1\14\41\0\1\u018a"+
    "\22\0\1\14\4\0\16\14\1\u018b\7\14\2\0\1\14"+
    "\36\0\1\u018c\25\0\1\14\4\0\20\14\1\u018d\5\14"+
    "\2\0\1\14\40\0\1\u018e\23\0\1\14\4\0\13\14"+
    "\1\u018f\12\14\2\0\1\14\33\0\1\u0190\30\0\1\14"+
    "\4\0\16\14\1\u0191\7\14\2\0\1\14\36\0\1\u0192"+
    "\25\0\1\14\4\0\2\14\1\u0193\15\14\1\u0194\1\u0195"+
    "\4\14\2\0\1\14\22\0\1\u0196\15\0\1\u0197\1\u0198"+
    "\22\0\1\14\4\0\10\14\1\u0199\15\14\2\0\1\14"+
    "\3\0\1\u019a\24\0\1\u019a\23\0\1\u019a\7\0\1\14"+
    "\4\0\23\14\1\u019b\2\14\2\0\1\14\43\0\1\u019c"+
    "\20\0\1\14\4\0\26\14\2\0\1\u019d\50\0\1\u019e"+
    "\13\0\1\14\4\0\14\14\1\u019f\11\14\2\0\1\14"+
    "\34\0\1\u01a0\27\0\1\14\4\0\1\14\1\u01a1\24\14"+
    "\2\0\1\14\21\0\1\u01a2\42\0\1\14\4\0\6\14"+
    "\1\u01a3\17\14\2\0\1\14\26\0\1\u01a4\35\0\1\14"+
    "\4\0\20\14\1\u01a5\5\14\2\0\1\14\13\0\1\14"+
    "\4\0\4\14\1\u01a6\21\14\2\0\1\14\40\0\1\u01a7"+
    "\34\0\1\u01a8\37\0\1\14\4\0\15\14\1\u01a9\10\14"+
    "\2\0\1\14\13\0\1\14\4\0\10\14\1\u01aa\15\14"+
    "\2\0\1\14\3\0\1\u01ab\24\0\1\u01ab\23\0\1\u01ab"+
    "\7\0\1\14\4\0\12\14\1\u01ac\13\14\2\0\1\14"+
    "\13\0\1\14\4\0\10\14\1\u01ad\15\14\2\0\1\14"+
    "\3\0\1\u01ae\7\0\1\14\4\0\21\14\1\u01af\4\14"+
    "\2\0\1\14\41\0\1\u01b0\41\0\1\u01b1\46\0\1\u01ae"+
    "\23\0\1\u01ae\7\0\1\14\4\0\4\14\1\u01b2\21\14"+
    "\2\0\1\14\24\0\1\u01b3\37\0\1\14\4\0\4\14"+
    "\1\u01b4\21\14\2\0\1\14\24\0\1\u01b5\37\0\1\14"+
    "\4\0\21\14\1\u01b6\4\14\2\0\1\14\41\0\1\u01b7"+
    "\22\0\1\14\4\0\10\14\1\u01b8\15\14\2\0\1\14"+
    "\3\0\1\u01b9\24\0\1\u01b9\23\0\1\u01b9\7\0\1\14"+
    "\4\0\14\14\1\u01ba\11\14\2\0\1\14\13\0\1\14"+
    "\4\0\16\14\1\u01bb\7\14\2\0\1\14\13\0\1\14"+
    "\4\0\17\14\1\u01bc\6\14\2\0\1\14\4\0\1\u01bd"+
    "\27\0\1\u01be\52\0\1\u01bf\51\0\1\u01bd\15\0\1\u01bd"+
    "\6\0\1\14\4\0\1\u01c0\25\14\2\0\1\14\20\0"+
    "\1\u01c1\43\0\1\14\4\0\14\14\1\u01c2\11\14\2\0"+
    "\1\14\34\0\1\u01c3\27\0\1\14\4\0\2\14\1\u01c4"+
    "\15\14\1\u01c5\5\14\2\0\1\14\22\0\1\u01c6\15\0"+
    "\1\u01c7\23\0\1\14\4\0\11\14\1\u01c8\14\14\2\0"+
    "\1\14\31\0\1\u01c9\32\0\1\14\4\0\11\14\1\u01ca"+
    "\14\14\2\0\1\14\31\0\1\u01cb\32\0\1\14\4\0"+
    "\21\14\1\u01cc\4\14\2\0\1\14\41\0\1\u01cd\22\0"+
    "\1\14\4\0\10\14\1\u01ce\15\14\2\0\1\14\3\0"+
    "\1\u01cf\7\0\1\14\4\0\22\14\1\u01d0\3\14\2\0"+
    "\1\14\30\0\1\u01cf\23\0\1\u01cf\36\0\1\u01d1\21\0"+
    "\1\14\4\0\14\14\1\u01d2\11\14\2\0\1\14\13\0"+
    "\1\14\4\0\14\14\1\u01d3\11\14\2\0\1\14\34\0"+
    "\1\u01d4\27\0\1\14\4\0\15\14\1\u01d5\10\14\2\0"+
    "\1\14\13\0\1\14\4\0\22\14\1\u01d6\3\14\2\0"+
    "\1\14\42\0\1\u01d7\21\0\1\14\4\0\1\u01d8\25\14"+
    "\2\0\1\14\20\0\1\u01d9\65\0\1\u01da\26\0\1\14"+
    "\4\0\17\14\1\u01db\6\14\2\0\1\14\4\0\1\u01dc"+
    "\32\0\1\u01dc\15\0\1\u01dc\6\0\1\14\4\0\17\14"+
    "\1\u01dd\6\14\2\0\1\14\4\0\1\u01de\32\0\1\u01de"+
    "\15\0\1\u01de\6\0\1\14\4\0\3\14\1\u01df\22\14"+
    "\2\0\1\14\23\0\1\u01e0\40\0\1\14\4\0\14\14"+
    "\1\u01e1\11\14\2\0\1\14\34\0\1\u01e2\27\0\1\14"+
    "\4\0\12\14\1\u01e3\13\14\2\0\1\14\13\0\1\14"+
    "\4\0\10\14\1\u01e4\15\14\2\0\1\14\3\0\1\u01e5"+
    "\7\0\1\14\4\0\21\14\1\u01e6\4\14\2\0\1\14"+
    "\41\0\1\u01e7\41\0\1\u01e8\46\0\1\u01e5\23\0\1\u01e5"+
    "\7\0\1\14\4\0\16\14\1\u01e9\7\14\2\0\1\14"+
    "\36\0\1\u01ea\25\0\1\14\4\0\14\14\1\u01eb\11\14"+
    "\2\0\1\14\13\0\1\14\4\0\16\14\1\u01ec\7\14"+
    "\2\0\1\14\34\0\1\u01ed\52\0\1\u01ee\25\0\1\14"+
    "\4\0\10\14\1\u01ef\15\14\2\0\1\14\3\0\1\u01f0"+
    "\24\0\1\u01f0\23\0\1\u01f0\7\0\1\14\4\0\4\14"+
    "\1\u01f1\21\14\2\0\1\14\24\0\1\u01f2\37\0\1\14"+
    "\4\0\13\14\1\u01f3\12\14\2\0\1\14\33\0\1\u01f4"+
    "\30\0\1\14\4\0\6\14\1\u01f5\17\14\2\0\1\14"+
    "\26\0\1\u01f6\35\0\1\14\4\0\14\14\1\u01f7\11\14"+
    "\2\0\1\14\34\0\1\u01f8\27\0\1\14\4\0\13\14"+
    "\1\u01f9\12\14\2\0\1\14\13\0\1\14\4\0\14\14"+
    "\1\u01fa\11\14\2\0\1\14\13\0\1\14\4\0\10\14"+
    "\1\u01fb\15\14\2\0\1\14\3\0\1\u01fc\24\0\1\u01fc"+
    "\23\0\1\u01fc\7\0\1\14\4\0\16\14\1\u01fd\7\14"+
    "\2\0\1\14\36\0\1\u01fe\46\0\1\u01ff\27\0\1\14"+
    "\4\0\20\14\1\u0200\5\14\2\0\1\14\40\0\1\u0201"+
    "\23\0\1\14\4\0\15\14\1\u0202\10\14\2\0\1\14"+
    "\35\0\1\u0203\26\0\1\14\4\0\4\14\1\u0204\21\14"+
    "\2\0\1\u0205\24\0\1\u0206\23\0\1\u0207\13\0\1\14"+
    "\4\0\15\14\1\u0208\10\14\2\0\1\14\13\0\1\14"+
    "\4\0\22\14\1\u0209\3\14\2\0\1\14\42\0\1\u020a"+
    "\21\0\1\14\4\0\1\u020b\25\14\2\0\1\14\20\0"+
    "\1\u020c\65\0\1\u020d\26\0\1\14\4\0\3\14\1\u020e"+
    "\22\14\2\0\1\14\23\0\1\u020f\40\0\1\14\4\0"+
    "\12\14\1\u0210\13\14\2\0\1\14\13\0\1\14\4\0"+
    "\10\14\1\u0211\15\14\2\0\1\14\3\0\1\u0212\26\0"+
    "\1\u0213\46\0\1\u0212\23\0\1\u0212\7\0\1\14\4\0"+
    "\2\14\1\u0214\23\14\2\0\1\14\22\0\1\u0215\41\0"+
    "\1\14\4\0\20\14\1\u0216\5\14\2\0\1\14\40\0"+
    "\1\u0217\23\0\1\14\4\0\21\14\1\u0218\4\14\2\0"+
    "\1\14\41\0\1\u0219\22\0\1\14\4\0\4\14\1\u021a"+
    "\21\14\2\0\1\14\13\0\1\14\4\0\13\14\1\u021b"+
    "\12\14\2\0\1\14\13\0\1\14\4\0\1\u021c\25\14"+
    "\2\0\1\14\20\0\1\u021d\43\0\1\14\4\0\10\14"+
    "\1\u021e\15\14\2\0\1\14\3\0\1\u021f\24\0\1\u021f"+
    "\23\0\1\u021f\27\0\1\u0220\30\0\1\14\4\0\1\u0221"+
    "\25\14\2\0\1\14\20\0\1\u0222\43\0\1\14\4\0"+
    "\21\14\1\u0223\4\14\2\0\1\14\41\0\1\u0224\22\0"+
    "\1\14\4\0\17\14\1\u0225\6\14\2\0\1\14\4\0"+
    "\1\u0226\6\0\1\14\4\0\16\14\1\u0227\7\14\2\0"+
    "\1\14\37\0\1\u0226\15\0\1\u0226\31\0\1\u0228\25\0"+
    "\1\14\4\0\14\14\1\u0229\11\14\2\0\1\14\13\0"+
    "\1\14\4\0\10\14\1\u022a\15\14\2\0\1\14\3\0"+
    "\1\u022b\24\0\1\u022b\23\0\1\u022b\7\0\1\14\4\0"+
    "\16\14\1\u022c\7\14\2\0\1\14\36\0\1\u022d\46\0"+
    "\1\u022e\27\0\1\14\4\0\15\14\1\u022f\10\14\2\0"+
    "\1\14\13\0\1\14\4\0\22\14\1\u0230\3\14\2\0"+
    "\1\14\42\0\1\u0231\43\0\1\u0232\26\0\1\14\4\0"+
    "\10\14\1\u0233\15\14\2\0\1\14\3\0\1\u0234\24\0"+
    "\1\u0234\23\0\1\u0234\7\0\1\14\4\0\1\u0235\25\14"+
    "\2\0\1\14\20\0\1\u0236\43\0\1\14\4\0\14\14"+
    "\1\u0237\11\14\2\0\1\14\34\0\1\u0238\27\0\1\14"+
    "\4\0\13\14\1\u0239\12\14\2\0\1\14\13\0\1\14"+
    "\4\0\4\14\1\u023a\21\14\2\0\1\14\13\0\1\14"+
    "\4\0\14\14\1\u023b\11\14\2\0\1\14\34\0\1\u023c"+
    "\40\0\1\u023d\37\0\1\14\4\0\17\14\1\u023e\6\14"+
    "\2\0\1\14\4\0\1\u023f\32\0\1\u023f\15\0\1\u023f"+
    "\6\0\1\14\4\0\4\14\1\u0240\21\14\2\0\1\14"+
    "\24\0\1\u0241\37\0\1\14\4\0\26\14\2\0\1\u0242"+
    "\50\0\1\u0243\13\0\1\14\4\0\4\14\1\u0244\21\14"+
    "\2\0\1\14\24\0\1\u0245\37\0\1\14\4\0\13\14"+
    "\1\u0246\12\14\2\0\1\14\13\0\1\14\4\0\1\u0247"+
    "\25\14\2\0\1\14\20\0\1\u0248\43\0\1\14\4\0"+
    "\10\14\1\u0249\15\14\2\0\1\14\3\0\1\u024a\24\0"+
    "\1\u024a\23\0\1\u024a\27\0\1\u024b\30\0\1\14\4\0"+
    "\14\14\1\u024c\11\14\2\0\1\14\13\0\1\14\4\0"+
    "\10\14\1\u024d\15\14\2\0\1\14\3\0\1\u024e\24\0"+
    "\1\u024e\23\0\1\u024e\30\0\1\u024f\27\0\1\14\4\0"+
    "\20\14\1\u0250\5\14\2\0\1\14\40\0\1\u0251\23\0"+
    "\1\14\4\0\20\14\1\u0252\5\14\2\0\1\14\13\0"+
    "\1\14\4\0\13\14\1\u0253\12\14\2\0\1\14\33\0"+
    "\1\u0254\30\0\1\14\4\0\17\14\1\u0255\6\14\2\0"+
    "\1\14\4\0\1\u0256\32\0\1\u0256\15\0\1\u0256\6\0"+
    "\1\14\4\0\16\14\1\u0257\7\14\2\0\1\14\36\0"+
    "\1\u0258\25\0\1\14\4\0\1\u0259\25\14\2\0\1\14"+
    "\20\0\1\u025a\43\0\1\14\4\0\4\14\1\u025b\21\14"+
    "\2\0\1\14\13\0\1\14\4\0\14\14\1\u025c\11\14"+
    "\2\0\1\14\34\0\1\u025d\40\0\1\u025e\37\0\1\14"+
    "\4\0\13\14\1\u025f\12\14\2\0\1\14\13\0\1\14"+
    "\4\0\1\u0260\25\14\2\0\1\14\20\0\1\u0261\63\0"+
    "\1\u0262\30\0\1\14\4\0\21\14\1\u0263\4\14\2\0"+
    "\1\14\41\0\1\u0264\22\0\1\14\4\0\4\14\1\u0265"+
    "\21\14\2\0\1\14\13\0\1\14\4\0\20\14\1\u0266"+
    "\5\14\2\0\1\14\40\0\1\u0267\23\0\1\14\4\0"+
    "\20\14\1\u0268\5\14\2\0\1\14\40\0\1\u0269\23\0"+
    "\1\14\4\0\4\14\1\u026a\21\14\2\0\1\14\24\0"+
    "\1\u026b\37\0\1\14\4\0\11\14\1\u026c\14\14\2\0"+
    "\1\14\31\0\1\u026d\32\0\1\14\4\0\13\14\1\u026e"+
    "\12\14\2\0\1\14\33\0\1\u026f\30\0\1\14\4\0"+
    "\4\14\1\u0270\21\14\2\0\1\14\24\0\1\u0271\37\0"+
    "\1\14\4\0\3\14\1\u0272\22\14\2\0\1\14\23\0"+
    "\1\u0273\40\0\1\14\4\0\4\14\1\u0274\21\14\2\0"+
    "\1\14\24\0\1\u0275\37\0\1\14\4\0\1\u0276\25\14"+
    "\2\0\1\14\20\0\1\u0277\43\0\1\14\4\0\1\u0278"+
    "\25\14\2\0\1\14\20\0\1\u0279\43\0\1\14\4\0"+
    "\10\14\1\u027a\15\14\2\0\1\14\3\0\1\u027b\24\0"+
    "\1\u027b\23\0\1\u027b\7\0\1\14\4\0\20\14\1\u027c"+
    "\5\14\2\0\1\14\40\0\1\u027d\23\0\1\14\4\0"+
    "\13\14\1\u027e\12\14\2\0\1\14\33\0\1\u027f\30\0"+
    "\1\14\4\0\4\14\1\u0280\21\14\2\0\1\14\24\0"+
    "\1\u0281\37\0\1\14\4\0\17\14\1\u0282\6\14\2\0"+
    "\1\14\4\0\1\u0283\32\0\1\u0283\15\0\1\u0283\6\0"+
    "\1\14\4\0\11\14\1\u0284\14\14\2\0\1\14\31\0"+
    "\1\u0285\32\0\1\14\4\0\25\14\1\u0286\2\0\1\14"+
    "\45\0\1\u0287\16\0\1\14\4\0\4\14\1\u0288\21\14"+
    "\2\0\1\14\24\0\1\u0289\37\0\1\14\4\0\20\14"+
    "\1\u028a\5\14\2\0\1\14\40\0\1\u028b\23\0\1\14"+
    "\4\0\17\14\1\u028c\6\14\2\0\1\14\4\0\1\u028d"+
    "\32\0\1\u028d\15\0\1\u028d\6\0\1\14\4\0\10\14"+
    "\1\u028e\15\14\2\0\1\14\3\0\1\u028f\24\0\1\u028f"+
    "\23\0\1\u028f\7\0\1\14\4\0\1\u0290\25\14\2\0"+
    "\1\14\20\0\1\u0291\43\0\1\14\4\0\4\14\1\u0292"+
    "\21\14\2\0\1\14\24\0\1\u0293\37\0\1\14\4\0"+
    "\25\14\1\u0294\2\0\1\14\45\0\1\u0295\16\0\1\14"+
    "\4\0\3\14\1\u0296\22\14\2\0\1\14\23\0\1\u0297"+
    "\40\0\1\14\4\0\1\u0298\25\14\2\0\1\14\20\0"+
    "\1\u0299\43\0\1\14\4\0\1\u029a\25\14\2\0\1\14"+
    "\20\0\1\u029b\43\0\1\14\4\0\3\14\1\u029c\22\14"+
    "\2\0\1\14\23\0\1\u029d\40\0\1\14\4\0\1\u029e"+
    "\25\14\2\0\1\14\20\0\1\u029f\35\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24354];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\4\1\2\11\21\1\5\11"+
    "\2\1\1\0\2\11\6\1\1\0\14\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\3\0\1\11\1\0\4\1"+
    "\1\0\2\1\1\0\3\1\1\0\7\1\1\0\2\1"+
    "\1\0\4\1\2\0\1\1\1\0\2\1\3\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\2\1\1\0\2\1"+
    "\1\0\4\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\0\2\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\2\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\2\0\1\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\2\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\11\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\3\1\1\11\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\11\2\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\2\0\2\1"+
    "\1\0\3\1\3\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\2\0\2\1\1\0\3\1"+
    "\3\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\3\1\3\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\2\0\2\1\1\0\2\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\3\0\1\1\1\11\1\1\1\0\2\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\2\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\1\1\0\1\1\2\0\1\1\1\0\2\1"+
    "\2\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\3\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\2\1\2\0\2\1\1\0\1\1"+
    "\2\0\1\1\1\11\2\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\11\1\1\2\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\2\0\2\1\2\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\3\1\1\11\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\1\1\2\0"+
    "\2\1\2\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\1\0\2\1"+
    "\1\11\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\11\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[671];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
        StringBuffer stringBuffer = new StringBuffer();
        ArrayList<Error> errors = new ArrayList<Error>();

        private Symbol symbol(int type){
            return new Symbol(type, yyline+1, yycolumn+1);
        }

        private Symbol symbol(int type, Object value){
            return new Symbol(type, yyline+1, yycolumn+1, value);
        }

        public ArrayList<ErrorL> getErrorsLexicos(){
            return this.errors;
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*ignore*/
            }
          // fall through
          case 55: break;
          case 2:
            { return new Symbol(ParserSym.EXCLAMATION, yycolumn, yyline, yytext());
            }
          // fall through
          case 56: break;
          case 3:
            { return new Symbol(ParserSym.NUMBER, yyline, yycolumn, yytext());
            }
          // fall through
          case 57: break;
          case 4:
            { return new Symbol(ParserSym.LESST, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 5:
            { return new Symbol(ParserSym.EQUALS, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 6:
            { return new Symbol(ParserSym.GREATERT, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 7:
            { return new Symbol(ParserSym.TEXT, yyline, yycolumn, yytext());
            }
          // fall through
          case 61: break;
          case 8:
            { return new Symbol(ParserSym.BRACKETA, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 9:
            { return new Symbol(ParserSym.BRACKETC, yycolumn, yyline, yytext());
            }
          // fall through
          case 63: break;
          case 10:
            { return new Symbol(ParserSym.KEYA, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 11:
            { return new Symbol(ParserSym.OR, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 12:
            { return new Symbol(ParserSym.KEYC, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 13:
            { return new Symbol(ParserSym.NUMBERVERSION, yyline, yycolumn, yytext());
            }
          // fall through
          case 67: break;
          case 14:
            { return new Symbol(ParserSym.OPENREQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 15:
            { return new Symbol(ParserSym.OPENXS, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 16:
            { return new Symbol(ParserSym.ID, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 17:
            { return new Symbol(ParserSym.THEME, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 18:
            { return new Symbol(ParserSym.XSON, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 19:
            { return new Symbol(ParserSym.CLASS, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 20:
            { return new Symbol(ParserSym.INDEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 21:
            { return new Symbol(ParserSym.NAME, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 22:
            { return new Symbol(ParserSym.TRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 23:
            { return new Symbol(ParserSym.USER, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 24:
            { return new Symbol(ParserSym.VERSION, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 25:
            { return new Symbol(ParserSym.OPTIONS, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 26:
            { return new Symbol(ParserSym.PASSWORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 27:
            { return new Symbol(ParserSym.IDTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 28:
            { return new Symbol(ParserSym.RESPONSETRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 29:
            { return new Symbol(ParserSym.INSTITUTION, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 30:
            { return new Symbol(ParserSym.NEWTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 31:
            { return new Symbol(ParserSym.USERDATA, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 32:
            { return new Symbol(ParserSym.LOGINUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 33:
            { return new Symbol(ParserSym.TXTVISIBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 34:
            { return new Symbol(ParserSym.NEWUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 35:
            { return new Symbol(ParserSym.NEWPASSWORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 36:
            { return new Symbol(ParserSym.DELETETRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 37:
            { return new Symbol(ParserSym.INRESPONSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 91: break;
          case 38:
            { return new Symbol(ParserSym.TIMEQUESTION, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 39:
            { return new Symbol(ParserSym.OLDUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 40:
            { return new Symbol(ParserSym.DELETEUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 41:
            { return new Symbol(ParserSym.INITRESPONSES, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 42:
            { return new Symbol(ParserSym.EDITTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 43:
            { return new Symbol(ParserSym.EDITUSER, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 44:
            { return new Symbol(ParserSym.PARAMETERSTRIVIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 45:
            { return new Symbol(ParserSym.ADDCOMPONENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 46:
            { return new Symbol(ParserSym.INREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          case 47:
            { return new Symbol(ParserSym.DELETECOMPONENTT, yycolumn, yyline, yytext());
            }
          // fall through
          case 101: break;
          case 48:
            { return new Symbol(ParserSym.EDRESPONSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 102: break;
          case 49:
            { return new Symbol(ParserSym.ENDRESPONSES, yycolumn, yyline, yytext());
            }
          // fall through
          case 103: break;
          case 50:
            { return new Symbol(ParserSym.EDITCOMPONENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 104: break;
          case 51:
            { return new Symbol(ParserSym.INITREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 105: break;
          case 52:
            { return new Symbol(ParserSym.PARAMETERSCOMPONENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 106: break;
          case 53:
            { return new Symbol(ParserSym.EDREQUEST, yycolumn, yyline, yytext());
            }
          // fall through
          case 107: break;
          case 54:
            { return new Symbol(ParserSym.ENDREQUESTS, yycolumn, yyline, yytext());
            }
          // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
